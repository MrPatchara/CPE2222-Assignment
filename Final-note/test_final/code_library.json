[
    {
        "filename": "(XI)สร้างFactorialพร้อมเลขยกกำลัง.py",
        "description": "# โปรแกรมคำนวณค่า factorial และค่ากำลังสองของเลขแต่ละตัวในลิสต์",
        "content_snippet": "# โปรแกรมคำนวณค่า factorial และค่ากำลังสองของเลขแต่ละตัวในลิสต์\n# สร้างลิสต์ของค่า factorial และค่ากำลังสองของเลขแต่ละตัวในลิสต์นั้น\nprint('Generating Factorial series with their squared values')\nn = int(input(\"Enter 'n' for Factorial series: \"))\nresult = 1\nfactorial_list = []\nsquared_list = []\n\n# Loop คำนวณ factorial และค่ากำลังสอง\nfor i in range(1, n+1):\n    result *= i  # คำนวณ factorial\n    factorial_list.append(result)  # เพิ่มค่า factorial ในลิสต์\n    squared_list.append(result**2)  # เพิ่มค่ากำลังสองในลิสต์\n\n# แสดงผล\nprint(f\"Factorial series: {factorial_list}\")\nprint(f\"Squared values of the series: {squared_list}\\n\")\n"
    },
    {
        "filename": "เครื่องคำนวณ_BMI.py",
        "description": "# โปรแกรมคำนวณค่า BMI และแปลผล BMI",
        "content_snippet": "# โปรแกรมคำนวณค่า BMI และแปลผล BMI\ndef calculate_bmi(weight, height):\n    \"\"\"คำนวณ BMI จากน้ำหนัก (kg) และส่วนสูง (m)\"\"\"\n    return weight / (height ** 2)\n\n\ndef interpret_bmi(bmi):\n    \"\"\"แปลผล BMI\"\"\"\n    if bmi < 18.5:\n        return \"น้ำหนักต่ำกว่าเกณฑ์\"\n    elif 18.5 <= bmi < 24.9:\n        return \"น้ำหนักปกติ\"\n    elif 25 <= bmi < 29.9:\n        return \"น้ำหนักเกิน\"\n    else:\n        return \"โรคอ้วน\"\n\n\n# รับข้อมูลจากผู้ใช้\nweight = float(input(\"กรุณาใส่น้ำหนักของคุณ (kg): \"))\nheight = float(input(\"กรุณาใส่ส่วนสูงของคุณ (m): \"))\n\n\n# คำนวณ BMI\nbmi = calculate_bmi(weight, height)\nprint(f\"ค่า BMI ของคุณคือ: {bmi:.2f} ({interpret_bmi(bmi)})\")"
    },
    {
        "filename": "(XIII)GuessingGameพร้อมคะแนนลดตามรอบ.py",
        "description": "# โปรแกรมที่ให้ผู้เล่นทายตัวเลขที่สุ่มได้ โดยมีหลายโหมดให้เลือกเล่น",
        "content_snippet": "# โปรแกรมที่ให้ผู้เล่นทายตัวเลขที่สุ่มได้ โดยมีหลายโหมดให้เลือกเล่น\nimport random\n\ndef scoring_based_game():\n    # เกมที่ผู้เล่นเริ่มด้วยคะแนนสูงสุดและลดลงตามจำนวนรอบ\n    secret_number = random.randint(1, 100)\n    max_score = 100 # คะแนนเริ่มต้น\n    attempts = 10 # จำนวนรอบ\n\n    print(\"\\n***** Scoring-Based Guessing Game *****\")\n    print(f\"Try to guess the number. You start with {max_score} points.\\n\")\n\n    for attempt in range(1, attempts + 1): # วนลูปจนครบจำนวนรอบ\n        guess = int(input(f\"Attempt {attempt}: Enter your guess: \"))\n\n        if guess == secret_number: # ถ้าทายถูก\n            print(f\"Congratulations! You guessed the number {secret_number}.\")\n            print(f\"Your score is {max_score}.\")\n            return\n        else:\n            max_score -= 10 # ลดคะแนนเมื่อทายผิด\n            print(\"Wrong guess! Your score decreases.\")\n\n    print(f\"\\nGame over! The secret number was {secret_number}.\")\n    print(f\"Your final score is {max_score}.\")\n\nscoring_based_game()\n"
    },
    {
        "filename": "(XV)ผสมการเข้ารหัสหลายรูปแบบ.py",
        "description": "# โปรแกรมเข้ารหัสแบบ Hybrid โดยใช้ Caesar Cipher และ Reverse Alphabet",
        "content_snippet": "# โปรแกรมเข้ารหัสแบบ Hybrid โดยใช้ Caesar Cipher และ Reverse Alphabet\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        elif char.isspace():  # Space characters remain unchanged\n            result += ' '\n        else:  # Convert special characters to Unicode\n            result += f\"\\\\u{ord(char):04x}\"\n    return result\n\ndef reverse_alphabet_encrypt(text): # ฟังก์ชันเข้ารหัส Reverse Alphabet\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            reversed_char = chr(shift_base + (25 - (ord(char) - shift_base)))\n            result += reversed_char\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ndef hybrid_encrypt(text, key): # ฟังก์ชันเข้ารหัสแบบ Hybrid\n    # เข้ารหัสแบบ Caesar\n    encrypted_text = secret_password(text, key)\n    # เปลี่ยนไปใช้ Reverse Alphabet\n    return reverse_alphabet_encrypt(encrypted_text)\n\ndef hybrid_decrypt(text, key): # ฟังก์ชันถอดรหัสแบบ Hybrid\n    # ถอดรหัสจาก Reverse Alphabet\n    decrypted_text = reverse_alphabet_encrypt(text)\n    # ถอดรหัสจาก Caesar\n    return secret_password(decrypted_text, -key)\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    # เข้ารหัสแบบ Hybrid\n    ciphertext = hybrid_encrypt(plaintext, key)\n    print(\"The hybrid encrypted ciphertext:\", ciphertext)\n\n    # ถอดรหัสข้อความแบบ Hybrid\n    decrypted_text = hybrid_decrypt(ciphertext, key)\n    print(f'The hybrid decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(7)เพิ่มการจัดอันดับวิชาโดยเฉลี่ยคะแนนสูงสุด.py",
        "description": "# โปรแกรมแสดงผลลัพธ์ของการทำงานของโมดูล module_exam.py",
        "content_snippet": "# โปรแกรมแสดงผลลัพธ์ของการทำงานของโมดูล module_exam.py\nfrom module_exam import Info_Dict, grading\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nsubject_scores = {}\n\nfor subject in valid_subjects:\n    grades_count = {'A': 0, 'B+': 0, 'B': 0, 'C+': 0, 'C': 0, 'D+': 0, 'D': 0, 'F': 0}\n    total_score = 0\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        grade = grading(subject, score)\n        grades_count[grade] += 1\n        total_score += score\n\n    average_score = total_score / len(Info_Dict)\n    subject_scores[subject] = average_score\n\nsorted_subjects = sorted(subject_scores.items(), key=lambda x: x[1], reverse=True)\n\nprint(\"Subject Ranking by Average Score:\")\nfor rank, (subject, avg_score) in enumerate(sorted_subjects, start=1):\n    print(f\"{rank}. {subject} - Average Score: {avg_score:.2f}\")\nprint(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "(IX)สร้างสามเหลี่ยมรูปแบบใหม่.py",
        "description": "# โปรแกรมสร้างรูปสามเหลี่ยมล่างขวา",
        "content_snippet": "# โปรแกรมสร้างรูปสามเหลี่ยมล่างขวา\n# โค้ดสร้างสามเหลี่ยมล่างขวา\nprint('---------- Drawing right-bottom triangle ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the size (at least 2): \"))\n\n    if size == 0:\n        break\n    elif size >= 2:\n        for i in range(1, size + 1):\n            print(\" \" * (size - i) + \"#\" * i)\n    else:\n        print(\"Invalid input. Please enter a size >= 2.\")\n"
    },
    {
        "filename": "MinorMax.py",
        "description": "# โปรแกรมที่รับค่าจำนวนเต็ม 2 จำนวน และตรวจสอบว่าจำนวนใดมากกว่ากัน หรือเท่ากัน",
        "content_snippet": "# โปรแกรมที่รับค่าจำนวนเต็ม 2 จำนวน และตรวจสอบว่าจำนวนใดมากกว่ากัน หรือเท่ากัน\nmyInput_1 = int(input())\nmyInput_2 = int(input())\n\nif myInput_1 > myInput_2:\n  print(\"A\")\nelif myInput_1 < myInput_2:\n  print(\"B\")\nelse:\n  print(\"AB\")"
    },
    {
        "filename": "หาค่าเบี่ยงเบนDXAYJK.py",
        "description": "# โปรแกรมที่ใช้ในการคำนวณข้อมูลจากไฟล์ 5 ไฟล์ และทำการคำนวณตามข้อกำหนด",
        "content_snippet": "# โปรแกรมที่ใช้ในการคำนวณข้อมูลจากไฟล์ 5 ไฟล์ และทำการคำนวณตามข้อกำหนด\nimport numpy as np\n\n# Load data from files and create variable D\nfile_names = [\"1.csv\", \"2.csv\", \"3.csv\", \"4.csv\", \"5.csv\"]\nD = []\n\n# Load data from each file\nfor file in file_names:\n    data = np.loadtxt(file, delimiter=\" \")\n    D.append(data)\n\nD = np.array(D)  # D should have shape (5, 100, 100)\nprint(\"Shape of D:\", D.shape)  # Confirm shape\n\n# Calculate X as the mean of D along axis 1\nX = D.mean(axis=1)  # X will have shape (5, 100)\nX = X.T  # Transpose to shape (100, 5)\nprint(\"X[0,:] =\", X[0])  # Check first row of X\nprint(\"X[-1,:] =\", X[-1])  # Check last row of X\n\n# Calculate Y as the standard deviation of D along axis 1, then reshape it to (100, 1)\nY = D.std(axis=1)  # Standard deviation along axis 1\nY = Y.reshape(100, 5)  # Reshape to (100, 5)\nprint(\"Y[0,0] =\", Y[0, 0])  # Check first element of Y\nprint(\"Y[-1,0] =\", Y[-1, 0])  # Check last element of Y\n\n# Calculate A as the sum of D along axes 1 and 2\nA = D.sum(axis=(1, 2)).reshape(1, 5)  # A will have shape (1, 5)\nprint(\"A =\", A)  # Check A\n\n# Compute J\nJ = np.sum((X - np.mean(X, axis=0)) ** 2)\n\n# Compute K\nK = np.mean(X, axis=0).reshape(1, -1) * 10000\n\n# Print the results\nprint(f\"X[0,:] = {X[0, :5]}\")\nprint(f\"X[-1,:] = {X[-1, :5]}\")\nprint(f\"Y[0,0] = {Y[0, 0]}\")\nprint(f\"Y[-1,0] = {Y[-1, 0]}\")\nprint(f\"A = {A}\")\nprint(f\"J = {J}\")\nprint(f\"K = {K[:, :5]}\")"
    },
    {
        "filename": "การหาค่าGCDและLCM.py",
        "description": "#โปรแกรมคำนวณหาค่าหรม. (GCD) และพ.ร.น. (LCM) ของตัวเลขสองตัว",
        "content_snippet": "#โปรแกรมคำนวณหาค่าหรม. (GCD) และพ.ร.น. (LCM) ของตัวเลขสองตัว\n# การหาค่า GCD และ LCM\nimport math\n\ndef calculate_gcd_lcm(a, b):\n    gcd = math.gcd(a, b)\n    lcm = abs(a * b) // gcd\n    return gcd, lcm\n\n# รับข้อมูลจากผู้ใช้\na = int(input(\"ใส่ตัวเลขตัวแรก: \"))\nb = int(input(\"ใส่ตัวเลขตัวที่สอง: \"))\n\ngcd, lcm = calculate_gcd_lcm(a, b)\nprint(f\"ค่า GCD ของ {a} และ {b} คือ {gcd}\")\nprint(f\"ค่า LCM ของ {a} และ {b} คือ {lcm}\")"
    },
    {
        "filename": "น้ำหนักปลา.py",
        "description": "# โปรแกรมรับน้ำหนักของปลาจากผู้ใช้ จนกว่าผู้ใช้จะใส่ 0 แล้วแสดง",
        "content_snippet": "# โปรแกรมรับน้ำหนักของปลาจากผู้ใช้ จนกว่าผู้ใช้จะใส่ 0 แล้วแสดง\nfish = []\n\nwhile True:\n  weight = int(input())\n  if weight == 0:\n    break\n  fish.append(weight)\n\nsort = str(input())\nif sort.lower() == \"max\":\n  fish.sort(reverse=True)\nelse:\n  fish.sort()\n\nprint(' '.join(map(str, fish)))"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมด้านเท่า (Equilateral Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of equilateral triangle: \"))\n\n    if height == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n\n    # วาดสามเหลี่ยมด้านเท่าตามความสูงที่กำหนด\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)  # ช่องว่างด้านซ้าย\n        stars = '*' * (2 * i - 1)  # จำนวน * ในแต่ละแถว\n        print(spaces + stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมที่ซ้อนกัน (Nested Triangles).py",
        "description": "while True:",
        "content_snippet": "while True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of nested triangles: \"))\n\n    if height == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n\n    # วาดสามเหลี่ยมซ้อนกัน\n    for i in range(1, height + 1):\n        for j in range(1, i + 1):\n            stars = '*' * j\n            print(stars.center(height * 2))  # จัดตรงกลาง\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "คำนวณดัชนีผลรวม.py",
        "description": "# โปรแกรมรับค่าตัวเลขจากผู้ใช้ และคำนวณดัชนีผลรวมของรายการตัวเลข",
        "content_snippet": "# โปรแกรมรับค่าตัวเลขจากผู้ใช้ และคำนวณดัชนีผลรวมของรายการตัวเลข\ndef calculate_index_sum(numbers):\n    index_sum = 0\n    for index, value in enumerate(numbers):\n        index_sum += index * value\n    return index_sum\n\n# รับค่าจากผู้ใช้\nnumbers = list(map(float, input(\"ใส่ตัวเลข (คั่นด้วยช่องว่าง): \").split()))\nresult = calculate_index_sum(numbers)\nprint(f\"ดัชนีผลรวมของรายการคือ: {result:.2f}\")"
    },
    {
        "filename": "รับInputจากผู้ใช้เพื่อสร้างMatrixและหาผลคูณ.py",
        "description": "# โปรแกรมคูณเมทริกซ์ 2 ตัว โดยรับค่าจากผู้ใช้",
        "content_snippet": "# โปรแกรมคูณเมทริกซ์ 2 ตัว โดยรับค่าจากผู้ใช้\nprint('*' * 70)\nprint('Matrix Multiplication from User Input'.center(70))\nprint('*' * 70)\n\n# ฟังก์ชันรับ Matrix Input จากผู้ใช้\ndef input_matrix(rows, cols, name):\n    print(f\"Enter values for {name} ({rows}x{cols}):\")\n    return [[int(input(f\"Enter value for {name}[{i+1}][{j+1}]: \")) for j in range(cols)] for i in range(rows)]\n\n# รับขนาดเมทริกซ์จากผู้ใช้\nrows, cols = map(int, input(\"Enter dimensions of the matrix (rows cols): \").split())\n\n# รับค่าเมทริกซ์\nmatrix_1 = input_matrix(rows, cols, \"Matrix 1\")\nmatrix_2 = input_matrix(cols, rows, \"Matrix 2\")  # ต้องการเพื่อให้สามารถคูณได้\n\n# คำนวณผลคูณ\nresult = [[sum(matrix_1[i][k] * matrix_2[k][j] for k in range(cols)) for j in range(rows)] for i in range(rows)]\n\n# แสดงผล\nprint(\"\\nMatrix 1:\")\nfor row in matrix_1:\n    print(row)\n\nprint(\"\\nMatrix 2:\")\nfor row in matrix_2:\n    print(row)\n\nprint(\"\\nResult of Multiplication:\")\nfor row in result:\n    print(row)\n"
    },
    {
        "filename": "แปลงอัตราแลกเปลี่ยนเงินตรา.py",
        "description": "#โปรแกรมแปลงอัตราแลกเปลี่ยนเงินตราระหว่างสองสกุลเงินโดยใช้อัตราที่กำหนด",
        "content_snippet": "#โปรแกรมแปลงอัตราแลกเปลี่ยนเงินตราระหว่างสองสกุลเงินโดยใช้อัตราที่กำหนด\ndef convert_currency(amount, rate, currency_to):\n    return amount * rate if currency_to.lower() == \"usd\" else amount / rate\n\n# รับข้อมูลจากผู้ใช้\namount = float(input(\"ใส่จำนวนเงิน: \"))\nrate = float(input(\"ใส่อัตราแลกเปลี่ยน (THB/USD): \"))\ncurrency_to = input(\"แปลงเป็น (USD/THB): \").upper()\n\nconverted_amount = convert_currency(amount, rate, currency_to)\nprint(f\"จำนวนเงินที่แปลงแล้ว: {converted_amount:.2f} {currency_to}\")"
    },
    {
        "filename": "(IX)สร้างรูปทรงเพชร.py",
        "description": "# โค้ดสร้างเพชร",
        "content_snippet": "# โค้ดสร้างเพชร\nprint('---------- Drawing diamonds ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the size (at least 3): \"))\n\n    if size == 0:\n        break\n    elif size >= 3:\n        # ส่วนบน\n        for i in range(size):\n            print(\" \" * (size - i - 1) + \"#\" * (2 * i + 1))\n        # ส่วนล่าง\n        for i in range(size - 2, -1, -1):\n            print(\" \" * (size - i - 1) + \"#\" * (2 * i + 1))\n    else:\n        print(\"Invalid input. Please enter a size >= 3.\")\n"
    },
    {
        "filename": "สร้างกราฟวงกลมพร้อมแยกส่วน.py",
        "description": "#โปรแกรมสร้างกราฟวงกลมที่สามารถแยกส่วนได้",
        "content_snippet": "#โปรแกรมสร้างกราฟวงกลมที่สามารถแยกส่วนได้\nimport matplotlib.pyplot as plt\n\ndef plot_pie_with_explode(labels, sizes, explode):\n    plt.pie(sizes, labels=labels, explode=explode, autopct='%1.1f%%', startangle=90)\n    plt.title(\"กราฟวงกลมพร้อมแยกส่วน\")\n    plt.axis('equal')  # เพื่อให้วงกลมสมบูรณ์\n    plt.show()\n\n# ตัวอย่างการใช้งาน\nlabels = ['A', 'B', 'C', 'D']\nsizes = [30, 20, 40, 10]\nexplode = (0, 0.1, 0, 0)  # แยกส่วนของ 'B'\nplot_pie_with_explode(labels, sizes, explode)"
    },
    {
        "filename": "(1)เพิ่มการคำนวณDeterminantโดยใช้RecursiveFunction.py",
        "description": "# โปรแกรมสร้างเมทริกซ์สี่เหลี่ยมจัตุรัสแบบสุ่ม และคำนวณ Determinant",
        "content_snippet": "# โปรแกรมสร้างเมทริกซ์สี่เหลี่ยมจัตุรัสแบบสุ่ม และคำนวณ Determinant \n# โดยใช้ฟังก์ชันแบบ Recursive\nimport random\n\ndef determinant(matrix): # สร้างฟังก์ชันคำนวณ Determinant\n    #   คำนวณ Determinant ของ Matrix แบบ Recursive\n    if len(matrix) == 1: # กรณี Matrix 1x1\n        return matrix[0][0] # ค่าเดียวกัน\n    if len(matrix) == 2: # กรณี Matrix 2x2\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0] # คำนวณ Determinant ของ Matrix 2x2\n\n    det = 0 # กำหนดค่าเริ่มต้นของ Determinant เป็น 0\n    for c in range(len(matrix)): # กรณี Matrix 3x3 ขึ้นไป\n        minor = [row[:c] + row[c+1:] for row in matrix[1:]] # สร้าง Minor Matrix\n        det += ((-1) ** c) * matrix[0][c] * determinant(minor) # คำนวณ Determinant ของ Matrix 3x3 ขึ้นไป\n    return det # คืนค่า Determinant\n\nprint(\"=\" * 80) # แสดงข้อความต้อนรับ\nrows = int(input(\"Enter a number of rows: \")) # รับค่าจำนวนแถวของ Matrix\n\n# ใช้เฉพาะ Matrix สี่เหลี่ยมจัตุรัส\nmatrix_a = [[random.randint(1, 5) for _ in range(rows)] for _ in range(rows)] # สร้าง Matrix สี่เหลี่ยมจัตุรัส แบบสุ่ม\nprint(f\"Matrix A [{rows}x{rows}]: {matrix_a}\") # แสดง Matrix A\n\n# คำนวณ Determinant\ndet = determinant(matrix_a) # คำนวณ Determinant ของ Matrix A\nprint(f\"Determinant: {det}\") # แสดงค่า Determinant"
    },
    {
        "filename": "(II)หาพื้นที่_lv2.py",
        "description": "# โปรแกรมคำนวณพื้นที่และปริมาตรของทรงกลม, ระยะห่างใน 3 มิติ, ความลาดเอียงระหว่างสองจุด, และวาดกราฟสมการกำลังสอง",
        "content_snippet": "# โปรแกรมคำนวณพื้นที่และปริมาตรของทรงกลม, ระยะห่างใน 3 มิติ, ความลาดเอียงระหว่างสองจุด, และวาดกราฟสมการกำลังสอง\nimport math\nimport matplotlib.pyplot as plt\n\n# ฟังก์ชันคำนวณพื้นที่และปริมาตรของทรงกลม\ndef circle_and_sphere_calculations(radius):\n    if radius <= 0:\n        return \"Radius must be greater than 0.\"\n    # พื้นที่วงกลม\n    circle_area = math.pi * radius**2\n    # ปริมาตรทรงกลม\n    sphere_volume = (4/3) * math.pi * radius**3\n    return f\"Circle Area = {circle_area:.2f}, Sphere Volume = {sphere_volume:.2f}\"\n\n# ฟังก์ชันคำนวณระยะห่างใน 3 มิติ\ndef distance_3d(x1, y1, z1, x2, y2, z2):\n    # ระยะทางใน 3 มิติ\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)\n    return f\"Distance in 3D = {distance:.2f}\"\n\n# ฟังก์ชันคำนวณความลาดเอียงระหว่างสองจุด\ndef slope(x1, y1, x2, y2):\n    if x2 - x1 == 0:\n        return \"Slope is undefined (vertical line).\"\n    slope_value = (y2 - y1) / (x2 - x1)\n    return f\"Slope = {slope_value:.2f}\"\n\n# ฟังก์ชันวาดกราฟสมการกำลังสอง\ndef plot_quadratic(a, b, c):\n    if a == 0:\n        return \"Coefficient 'a' must not be zero.\"\n    # สร้างช่วงของ x สำหรับกราฟ\n    x = [i / 10 for i in range(-100, 101)]  # -10 ถึง 10 (เพิ่มความละเอียด)\n    # คำนวณค่า y ตามสมการ ax^2 + bx + c\n    y = [a*i**2 + b*i + c for i in x]\n    # วาดกราฟ\n    plt.plot(x, y, label=f\"{a}x² + {b}x + {c}\")\n    plt.axhline(0, color='black', linewidth=0.5)  # เส้นแกน x\n    plt.axvline(0, color='black', linewidth=0.5)  # เส้นแกน y\n    plt.title(\"Graph of Quadratic Equation\")\n    plt.xlabel(\"x-axis\")\n    plt.ylabel(\"y-axis\")\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n    return \"Graph plotted successfully.\"\n\n# เมนูหลักของโปรแกรม\ndef main():\n    while True:\n        print(\"\\n=== Advanced Math Calculations Menu ===\")\n        print(\"1. Circle Area and Sphere Volume\")\n        print(\"2. Distance in 3D Space\")\n        print(\"3. Slope Between Two Points\")\n        print(\"4. Plot Quadratic Equation\")\n        print(\"5. Exit\")\n        \n        try:\n            choice = int(input(\"Enter your choice (1-5): \"))\n        except ValueError:\n            print(\"Invalid input. Please enter a number between 1 and 5.\")\n            continue\n\n        if choice == 1:\n            # รับข้อมูลสำหรับรัศมี\n            try:\n                radius = float(input(\"Enter the radius: \"))\n                print(circle_and_sphere_calculations(radius))\n            except ValueError:\n                print(\"Invalid input. Please enter a numeric value.\")\n\n        elif choice == 2:\n            # รับข้อมูลสำหรับจุดใน 3 มิติ\n            try:\n                x1 = float(input(\"Enter x1: \"))\n                y1 = float(input(\"Enter y1: \"))\n                z1 = float(input(\"Enter z1: \"))\n                x2 = float(input(\"Enter x2: \"))\n                y2 = float(input(\"Enter y2: \"))\n                z2 = float(input(\"Enter z2: \"))\n                print(distance_3d(x1, y1, z1, x2, y2, z2))\n            except ValueError:\n                print(\"Invalid input. Please enter numeric values.\")\n\n        elif choice == 3:\n            # รับข้อมูลสำหรับคำนวณความลาดเอียง\n            try:\n                x1 = float(input(\"Enter x1: \"))\n                y1 = float(input(\"Enter y1: \"))\n                x2 = float(input(\"Enter x2: \"))\n                y2 = float(input(\"Enter y2: \"))\n                print(slope(x1, y1, x2, y2))\n            except ValueError:\n                print(\"Invalid input. Please enter numeric values.\")\n\n        elif choice == 4:\n            # รับข้อมูลสำหรับสมการกำลังสอง\n            try:\n                a = float(input(\"Enter coefficient a: \"))\n                b = float(input(\"Enter coefficient b: \"))\n                c = float(input(\"Enter constant c: \"))\n                print(plot_quadratic(a, b, c))\n            except ValueError:\n                print(\"Invalid input. Please enter numeric values.\")\n\n        elif choice == 5:\n            print(\"Exiting the program. Goodbye!\")\n            break\n\n        else:\n            print(\"Invalid choice. Please select a number between 1 and 5.\")\n\n# เรียกใช้โปรแกรมหลัก\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมซ้อนกันแบบกลวง (Nested Hollow Triangles).py",
        "description": "while True:",
        "content_snippet": "while True:\n    height = int(input(\"Enter the height of nested hollow triangles: \"))\n\n    if height == 0:\n        break\n\n    for i in range(1, height + 1):\n        for j in range(1, i + 1):\n            spaces = ' ' * (height - j)\n            if j == 1 or j == i:\n                stars = '*' * j\n            else:\n                stars = '*' + ' ' * (j - 2) + '*'\n            print(spaces + stars)\n    print()"
    },
    {
        "filename": "(2)เพิ่มการคำนวณผลรวมของตัวเลขในแถวที่เลือก.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการคำนวณผลรวมของตัวเลขในแถวที่เลือก",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการคำนวณผลรวมของตัวเลขในแถวที่เลือก\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]\n        new_row = [previous_row[-1]]\n        for j in range(len(previous_row)):\n            new_row.append(new_row[-1] + previous_row[j])\n        rows.append(new_row)\n    return rows\n\ndef main():\n    rows = []\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            row_sum = sum(rows[user_row])\n            print(f\"Row {user_row}: {rows[user_row]} (Sum: {row_sum})\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "จัดเรียงข้อมูลนักเรียน.py",
        "description": "# โปรแกรมจัดเรียงข้อมูลนักเรียนตามคะแนนจากมากไปน้อย",
        "content_snippet": "# โปรแกรมจัดเรียงข้อมูลนักเรียนตามคะแนนจากมากไปน้อย\ndef sort_students_by_score(students):\n    # จัดเรียงตามคะแนนจากมากไปน้อย\n    return sorted(students, key=lambda x: x['score'], reverse=True)\n\n# ข้อมูลนักเรียนตัวอย่าง\nstudents = [\n    {\"name\": \"สมชาย\", \"score\": 85},\n    {\"name\": \"สมหญิง\", \"score\": 92},\n    {\"name\": \"จันทร์\", \"score\": 78},\n    {\"name\": \"เพ็ญ\", \"score\": 88}\n]\n\nsorted_students = sort_students_by_score(students)\nprint(\"ข้อมูลนักเรียนหลังจัดเรียง:\")\nfor student in sorted_students:\n    print(f\"{student['name']}: {student['score']} คะแนน\")"
    },
    {
        "filename": "(IX)เพิ่มความหลากหลายด้วยรูปแบบวงกลม.py",
        "description": "# โค้ดสร้างวงกลมแบบง่าย",
        "content_snippet": "# โค้ดสร้างวงกลมแบบง่าย\nimport math\nprint('---------- Drawing circles ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    radius = int(input(\"Please enter the radius (at least 3): \"))\n\n    if radius == 0:\n        break\n    elif radius >= 3:\n        for y in range(-radius, radius + 1):\n            for x in range(-radius, radius + 1):\n                if math.sqrt(x**2 + y**2) <= radius:\n                    print(\"#\", end=\"\")\n                else:\n                    print(\" \", end=\"\")\n            print()\n    else:\n        print(\"Invalid input. Please enter a radius >= 3.\")\n"
    },
    {
        "filename": "(7)เพิ่มการตรวจสอบข้อผิดพลาดใน Info_Dict เช่น วิชาที่ไม่มีคะแนน.py",
        "description": "# โปรแกรมตรวจสอบคะแนนของนักเรียนที่เรียนวิชาที่มีในระบบ",
        "content_snippet": "# โปรแกรมตรวจสอบคะแนนของนักเรียนที่เรียนวิชาที่มีในระบบ\nfrom module_exam import Info_Dict, grading\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\ndef validate_scores(info_dict, valid_subjects):\n    \"\"\"ตรวจสอบว่าทุกวิชามีคะแนนครบในระบบ\"\"\"\n    errors = []\n    for student_id, scores in info_dict.items():\n        for subject in valid_subjects:\n            if subject not in scores:\n                errors.append(f\"Missing score for {subject} in student ID {student_id}\")\n    return errors\n\nprint(\"----------------------------------------------------------\")\nerrors = validate_scores(Info_Dict, valid_subjects)\nif errors:\n    print(\"Errors found in the data:\")\n    for error in errors:\n        print(f\"  - {error}\")\nelse:\n    print(\"All data is valid.\")\nprint(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "(XI)Factorialเฉพาะเลขคี่.py",
        "description": "# โปรแกรมคำนวณ Factorial ของเลขคู่และเลขคี่",
        "content_snippet": "# โปรแกรมคำนวณ Factorial ของเลขคู่และเลขคี่\n# สร้างลิสต์ Factorial ที่คำนวณเฉพาะเลขคี่\nprint('Generating Odd Factorial series')\nn = int(input(\"Enter 'n' for Odd Factorial series: \"))\nresult = 1\nodd_factorial_list = []\n\n# คำนวณ Factorial เฉพาะเลขคี่\nfor i in range(1, n+1):\n    if i % 2 != 0:  # เช็คว่าเลขเป็นคี่\n        result *= i\n        odd_factorial_list.append(result)\n\n# แสดงผล\nprint(f\"Odd Factorial series: {odd_factorial_list}\\n\")\n"
    },
    {
        "filename": "(XI)Factorial_series.py",
        "description": "# โปรแกรมที่ทำการสร้างลิสต์ของ Factorial series ของ n ที่รับค่า n จากผู้ใช้",
        "content_snippet": "# โปรแกรมที่ทำการสร้างลิสต์ของ Factorial series ของ n ที่รับค่า n จากผู้ใช้\nprint('Making a list of Factorial series of n')\nn = int(input(\"Enter 'n' of Factorial number:\"))\nresult = 1\nlist_of_n = []\n\nfor i in range(1, n+1):\n    result *= i\n    list_of_n.append(result)\n    \nprint(f\"A list of Factorial series of {n} is {list_of_n}\\n\")\n"
    },
    {
        "filename": "หาค่าที่ไม่ซ้ำในชุดข้อมูล.py",
        "description": "#โปรแกรมค้นหาค่าที่ไม่ซ้ำในชุดข้อมูลที่ป้อน",
        "content_snippet": "#โปรแกรมค้นหาค่าที่ไม่ซ้ำในชุดข้อมูลที่ป้อน\ndef find_unique_values(data):\n    return list(set(data))\n\n# รับข้อมูลจากผู้ใช้\ndata = list(map(int, input(\"ใส่ข้อมูลตัวเลข (คั่นด้วยช่องว่าง): \").split()))\nunique_values = find_unique_values(data)\nprint(f\"ค่าที่ไม่ซ้ำในชุดข้อมูล: {unique_values}\")"
    },
    {
        "filename": "การหาอายุเฉลี่ยและรายชื่อคนที่ได้คะแนนต่ำกว่าเกณฑ์.py",
        "description": "# โปรแกรมค้นหาข้อมูลบุคคลในรายชื่อ",
        "content_snippet": "# โปรแกรมค้นหาข้อมูลบุคคลในรายชื่อ\nid = {'Peter' : {'Age': 40 , 'Gender': 'Male', 'Test': {'First': 20, 'Second': 18, 'Third': 19}},\n      'Paul' : {'Age': 25, 'Gender': 'Male', 'Test': {'First' : 19, 'Second': 20, 'Third': 19}},\n      'Mary' : {'Age': 18, 'Gender': 'Female', 'Test': {'First': 10, 'Second': 5, 'Third': 4}},\n      'Jenny' : {'Age': 60, 'Gender': 'Female', 'Test': {'First': 5, 'Second': 3, 'Third': 1}}}\n\n# ฟังก์ชันค้นหาข้อมูลบุคคลตามชื่อ\ndef search_person(name):\n    if name in id:\n        data = id[name]\n        avg_score = data.get('Average', \"N/A\")\n        print(f\"Name: {name}\")\n        print(f\"Age: {data['Age']}\")\n        print(f\"Gender: {data['Gender']}\")\n        print(f\"Scores: {data['Test']}\")\n        print(f\"Average Score: {avg_score}\")\n    else:\n        print(f\"No data found for {name}\")\n\n# ทดสอบการค้นหาข้อมูล\nsearch_person(\"Mary\")\nsearch_person(\"John\")\n"
    },
    {
        "filename": "(5)เพิ่มการรับค่าเงินทอนด้วยธนบัตรและเหรียญต่างประเทศ (USD).py",
        "description": "# โปรแกรมคำนวณเงินทอน และแสดงจำนวนแบงค์และเหรียญที่ต้องทอน โดยมีตัวเลือกในการเลือกสกุลเงิน USD หรือ THB",
        "content_snippet": "# โปรแกรมคำนวณเงินทอน และแสดงจำนวนแบงค์และเหรียญที่ต้องทอน โดยมีตัวเลือกในการเลือกสกุลเงิน USD หรือ THB\n# Program to calculate change with options for USD denominations\ndef calculate_change(total_price, payment, currency=\"THB\"):\n    denominations = {\n        \"THB\": {\n            \"The 500-$Baht Banknote\": 500,\n            \"The 100-$Baht Banknote\": 100,\n            \"The 50-$Baht Banknote\": 50,\n            \"The 20-$Baht Banknote\": 20,\n            \"The 10-$Baht Coin\": 10,\n            \"The 5-$Baht Coin\": 5,\n            \"The 2-$Baht Coin\": 2,\n            \"The 1-$Baht Coin\": 1,\n        },\n        \"USD\": {\n            \"The 100-$Bill\": 100,\n            \"The 50-$Bill\": 50,\n            \"The 20-$Bill\": 20,\n            \"The 10-$Bill\": 10,\n            \"The 5-$Bill\": 5,\n            \"The 1-$Bill\": 1,\n            \"The 25c-Coin\": 0.25,\n            \"The 10c-Coin\": 0.10,\n            \"The 5c-Coin\": 0.05,\n            \"The 1c-Coin\": 0.01,\n        },\n    }\n\n    if currency not in denominations:\n        return \"Unsupported currency!\"\n\n    change = payment - total_price\n    if change < 0:\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in denominations[currency].items():\n            count = int(change // value)\n            if count > 0:\n                unit = \"Piece(s)\" if \"Coin\" in denom or \"c\" in denom else \"Note(s)\"\n                result.append(f\"{denom} = {count} {unit}\")\n            change %= value\n        return \"\\n\".join(result)\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    currency = input(\"Enter currency (THB/USD): \").strip().upper()\n    total_price = float(input(\"The total price of products: \"))\n    payment = float(input(\"Customer payment: \"))\n    print(\"----------------------------------------------------------\")\n    \n    if payment == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change(total_price, payment, currency)\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "จากแสนรวมเป็นหนึ่ง.py",
        "description": "# โปรแกรมที่รับค่าจำนวนเต็มจากผู้ใช้ และหาผลรวมของเลขทุกตัวในตัวเลขนั้น จนกว่าจะเหลือเลขตัวเดียว",
        "content_snippet": "# โปรแกรมที่รับค่าจำนวนเต็มจากผู้ใช้ และหาผลรวมของเลขทุกตัวในตัวเลขนั้น จนกว่าจะเหลือเลขตัวเดียว\nnum = int(input())\n\nwhile num >= 10:\n  num = sum(int(numa) for numa in str(num))\n\nprint(num)"
    },
    {
        "filename": "คำนวณสูตรพีทาโกรัส.py",
        "description": "#โปรแกรมคำนวณความยาวด้านของสามเหลี่ยมมุมฉากโดยใช้สูตรพีทาโกรัส",
        "content_snippet": "#โปรแกรมคำนวณความยาวด้านของสามเหลี่ยมมุมฉากโดยใช้สูตรพีทาโกรัส\nimport math\n\ndef calculate_pythagoras(a, b):\n    return math.sqrt(a**2 + b**2)\n\n# รับข้อมูลจากผู้ใช้\na = float(input(\"กรุณาใส่ความยาวด้านสั้นด้านแรก: \"))\nb = float(input(\"กรุณาใส่ความยาวด้านสั้นด้านที่สอง: \"))\n\nc = calculate_pythagoras(a, b)\nprint(f\"ความยาวด้านตรงข้ามมุมฉากคือ: {c:.2f}\")"
    },
    {
        "filename": "(1)เพิ่มการสร้างMatrix_Identity.py",
        "description": "# โปรแกรมนี้สร้าง Matrix Identity (เมทริกซ์เอกลักษณ์) ตามขนาดที่ผู้ใช้ระบุ",
        "content_snippet": "# โปรแกรมนี้สร้าง Matrix Identity (เมทริกซ์เอกลักษณ์) ตามขนาดที่ผู้ใช้ระบุ\n# โดย Matrix Identity คือ Matrix ที่มีเลข 1 อยู่บนแนวทแยง และเลข 0 อยู่ที่ตำแหน่งอื่น ๆ\nimport random\n\ndef determinant(matrix):\n    \"\"\"คำนวณ Determinant ของ Matrix แบบ Recursive\"\"\"\n    if len(matrix) == 1:\n        return matrix[0][0]\n    if len(matrix) == 2:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n\n    det = 0\n    for c in range(len(matrix)):\n        minor = [row[:c] + row[c+1:] for row in matrix[1:]]\n        det += ((-1) ** c) * matrix[0][c] * determinant(minor)\n    return det\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\n\n# ใช้เฉพาะ Matrix สี่เหลี่ยมจัตุรัส\nmatrix_a = [[random.randint(1, 5) for _ in range(rows)] for _ in range(rows)]\nprint(f\"Matrix A [{rows}x{rows}]: {matrix_a}\")\n\n# คำนวณ Determinant\ndet = determinant(matrix_a)\nprint(f\"Determinant: {det}\")\n\n# สร้าง Matrix Identity\nidentity_matrix = [[1 if i == j else 0 for j in range(rows)] for i in range(rows)]\nprint(f\"Identity Matrix [{rows}x{rows}]: {identity_matrix}\")"
    },
    {
        "filename": "เกมแข่งตอบคำถามคณิตศาสตร์.py",
        "description": "#เกมสุ่มโจทย์คณิตศาสตร์ให้ผู้เล่นตอบในเวลาที่กำหนด",
        "content_snippet": "#เกมสุ่มโจทย์คณิตศาสตร์ให้ผู้เล่นตอบในเวลาที่กำหนด\nimport random\nimport time\n\ndef generate_math_problem():\n    num1 = random.randint(1, 10)\n    num2 = random.randint(1, 10)\n    operation = random.choice(['+', '-', '*'])\n    question = f\"{num1} {operation} {num2}\"\n    answer = eval(question)\n    return question, answer\n\ndef play_math_race(rounds=5, time_limit=5):\n    print(\"เริ่มเกมแข่งตอบคำถามคณิตศาสตร์!\")\n    score = 0\n    for _ in range(rounds):\n        question, correct_answer = generate_math_problem()\n        print(f\"โจทย์: {question}\")\n        start_time = time.time()\n        try:\n            user_answer = int(input(\"คำตอบของคุณ: \"))\n            if time.time() - start_time > time_limit:\n                print(\"หมดเวลา!\")\n            elif user_answer == correct_answer:\n                print(\"ถูกต้อง!\")\n                score += 1\n            else:\n                print(f\"ผิด! คำตอบที่ถูกต้องคือ {correct_answer}\")\n        except ValueError:\n            print(\"คำตอบไม่ถูกต้อง\")\n    print(f\"คะแนนรวมของคุณคือ: {score}/{rounds}\")\n\n# ตัวอย่างการใช้งาน\nplay_math_race()"
    },
    {
        "filename": "(IX)วาดสี่เหลี่ยมด้วย#.py",
        "description": "# โปรแกรมวาดรูปสี่เหลี่ยมจตุรัสด้วยเครื่องหมาย \"#\" โดยรับขนาดของรูปจากผู้ใช้",
        "content_snippet": "# โปรแกรมวาดรูปสี่เหลี่ยมจตุรัสด้วยเครื่องหมาย \"#\" โดยรับขนาดของรูปจากผู้ใช้\nprint('---------- Drawing the square rectangular by \"#\" ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the size: \"))\n\n    if size == 0:\n        break\n    elif size >= 2:\n        print(\"#\" * size)\n        for i in range(size-2):\n            print(f\"#\" + \" \" * (size - 2) + \"#\")\n        print(\"#\" * size)\n    elif size == 1:\n        print(\"#\" * size)"
    },
    {
        "filename": "(5)เพิ่มตัวเลือกคำนวณเงินทอนแบบไม่มีเหรียญ.py",
        "description": "# โปรแกรมคำนวณเงินทอน แต่ใช้แบงค์เท่านั้น",
        "content_snippet": "# โปรแกรมคำนวณเงินทอน แต่ใช้แบงค์เท่านั้น\n# Program to calculate change with notes only\ndef calculate_change_no_coins(total_price, payment):\n    denominations = {\n        \"The 500-$Baht Banknote\": 500,\n        \"The 100-$Baht Banknote\": 100,\n        \"The 50-$Baht Banknote\": 50,\n        \"The 20-$Baht Banknote\": 20,\n    }\n\n    change = payment - total_price\n    if change < 0:\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in denominations.items():\n            count = change // value\n            if count > 0:\n                result.append(f\"{denom} = {count} Note(s)\")\n            change %= value\n        return \"\\n\".join(result)\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    total_price = int(input(\"The total price of products: \"))\n    payment = int(input(\"Customer payment: \"))\n    print(\"----------------------------------------------------------\")\n\n    if payment == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change_no_coins(total_price, payment)\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "ThePassword.py",
        "description": "# โปรแกรมตรวจสอบรหัสผ่านที่ผู้ใช้ป้อนเข้ามาว่ามีความปลอดภัยหรือไม่",
        "content_snippet": "# โปรแกรมตรวจสอบรหัสผ่านที่ผู้ใช้ป้อนเข้ามาว่ามีความปลอดภัยหรือไม่\nimport re\n\npassword = input()\n\nif 3 <= len(password) <= 20:\n  if (re.search(r'[A-Z]', password) and\n     re.search(r'[a-z]', password) and\n     re.search(r'[0-9]', password) and\n     re.search(r'[!@#$%^&*_+.,\\/;]', password)):\n     print(\"Valid\")\n  else:\n     print(\"Invalid\")\n       \nelse:\n  print(\"Invalid\")"
    },
    {
        "filename": "ตีกรอบ.py",
        "description": "# โปรแกรมสร้างสี่เหลี่ยมจัตุรัสที่มีขนาดของด้านเท่ากับ N โดยที่ N คือจำนวนเต็มที่รับเข้ามาจากผู้ใช้",
        "content_snippet": "# โปรแกรมสร้างสี่เหลี่ยมจัตุรัสที่มีขนาดของด้านเท่ากับ N โดยที่ N คือจำนวนเต็มที่รับเข้ามาจากผู้ใช้\nMyI = int(input())\n\n\nprint(\"#\" * MyI)\n\nif MyI >= 2:\n    for i in range(MyI - 2):\n        print(f\"#{' ' * (MyI - 2)}#\")\n        \nif MyI > 1:\n    print(\"#\" * MyI)"
    },
    {
        "filename": "(6)เพิ่มระบบตรวจสอบข้อความด้วยลายนิ้วมือ (Digital Fingerprint).py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วยวิธี XOR พร้อมลายนิ้วมือดิจิทัล (Digital Fingerprint)",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วยวิธี XOR พร้อมลายนิ้วมือดิจิทัล (Digital Fingerprint)\nimport hashlib\n\ndef generate_fingerprint(data):\n    \"\"\"สร้างลายนิ้วมือดิจิทัล (Digital Fingerprint)\"\"\"\n    return hashlib.md5(data.encode()).hexdigest()\n\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef encrypt(plaintext, secret_key):\n    \"\"\"เข้ารหัสข้อความด้วย XOR\"\"\"\n    ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n    fingerprint = generate_fingerprint(ciphertext)  # สร้างลายนิ้วมือ\n    return ciphertext, fingerprint\n\ndef decrypt(ciphertext, secret_key, original_fingerprint):\n    \"\"\"ถอดรหัสข้อความและตรวจสอบลายนิ้วมือ\"\"\"\n    plaintext = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, secret_key))\n    fingerprint = generate_fingerprint(ciphertext)\n    if fingerprint != original_fingerprint:\n        return plaintext, \"Warning: Data might have been altered!\"\n    return plaintext, \"Data integrity verified.\"\n\n# Main Program\nprint(\"------------- Encryption and Decryption Program with Digital Fingerprint -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\nsecret_key = input(\"Enter your secret key: \")\n\nadjusted_key = adjust_key_length(plaintext, secret_key)\nciphertext, fingerprint = encrypt(plaintext, adjusted_key)\nprint(f\"The encrypted ciphertext: {ciphertext}\")\nprint(f\"Digital Fingerprint: {fingerprint}\")\n\ndecrypted_text, verification_message = decrypt(ciphertext, adjusted_key, fingerprint)\nprint(f\"The decryption results: {decrypted_text}\")\nprint(f\"Verification: {verification_message}\\n\")"
    },
    {
        "filename": "บันได.py",
        "description": "# โปรแกรมสร้างรูปแบบของบันไดด้วยเครื่องหมาย * โดยรับค่าจำนวนชั้นของบันได",
        "content_snippet": "# โปรแกรมสร้างรูปแบบของบันไดด้วยเครื่องหมาย * โดยรับค่าจำนวนชั้นของบันได\nladder = int(input())\ni = 1\n\nwhile i-1 < ladder:\n  print(\"*\" * i)\n  i += 1"
    },
    {
        "filename": "ไม่ใช่แค่หนึ่งแต่ถึงสาม(max).py",
        "description": "# โปรแกรมหาค่ามากที่สุดจาก 3 จำนวนที่รับเข้ามา",
        "content_snippet": "# โปรแกรมหาค่ามากที่สุดจาก 3 จำนวนที่รับเข้ามา\nInput1 = int(input())\nInput2 = int(input())\nInput3 = int(input())\n\nMax = Input1\n\nif Input2 > Max:\n  Max = Input2\n\nelif Input3 > Max:\n  Max = Input3\n\nprint(f\"MAX : {Max}\")"
    },
    {
        "filename": "(XIII)High-StakesDoubleorNothingGame.py",
        "description": "# โปรแกรมเกมทายเลขที่คะแนนเพิ่มเป็นสองเท่าหรือสูญเสียทั้งหมด",
        "content_snippet": "# โปรแกรมเกมทายเลขที่คะแนนเพิ่มเป็นสองเท่าหรือสูญเสียทั้งหมด\n# โดยใช้ฟังก์ชัน high_stakes_game() และ random.randint() จากโมดูล random\nimport random\n\ndef high_stakes_game():\n    \"\"\"เกมที่คะแนนเพิ่มเป็นสองเท่าหรือสูญเสียทั้งหมด\"\"\"\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    score = 10 # คะแนนเริ่มต้น\n\n    print(\"\\n***** High-Stakes Double or Nothing Game *****\")\n    print(\"Guess correctly to double your score. A wrong guess resets your score to 0.\\n\")\n\n    while True:\n        guess = int(input(\"Enter your guess: \"))\n\n        if guess == secret_number: # ถ้าทายถูก\n            score *= 2 # เพิ่มคะแนนเป็นสองเท่า\n            print(f\"Correct! Your score is now {score}.\")\n            break\n        else:\n            score = 0 # รีเซ็ตคะแนนเป็น 0\n            print(\"Wrong guess! Your score is reset to 0.\")\n            break\n\n    print(f\"The secret number was {secret_number}. Your final score: {score}\")\n\nhigh_stakes_game()\n"
    },
    {
        "filename": "(XIII)GuessingGameพร้อมประวัติการเดา.py",
        "description": "# โปรแกรมเกมทายเลขที่บันทึกประวัติการเดาของผู้เล่น",
        "content_snippet": "# โปรแกรมเกมทายเลขที่บันทึกประวัติการเดาของผู้เล่น\n# โดยให้ผู้เล่นทายเลขตั้งแต่ 1-100 โดยมีโอกาสทาย 7 ครั้ง\nimport random\n\ndef game_with_history():\n    \"\"\"เกมที่บันทึกประวัติการเดาของผู้เล่น\"\"\"\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    attempts = 7 # จำนวนรอบที่ให้ทาย\n    history = [] # บันทึกประวัติการเดา\n\n    print(\"\\n***** Guessing Game with History *****\")\n\n    for attempt in range(1, attempts + 1): # วนลูปจนครบจำนวนรอบ\n        guess = int(input(f\"Attempt {attempt}: Enter your guess: \"))\n        history.append(guess) # บันทึกประวัติการเดา\n\n        if guess == secret_number: # ถ้าทายถูก\n            print(f\"Correct! You guessed the number {secret_number}.\")\n            print(f\"Your guesses: {history}\")\n            return\n        elif guess < secret_number: # ตรวจสอบว่าเดาน้อยเกินไปหรือไม่\n            print(\"Your guess is too low.\")\n        else:\n            print(\"Your guess is too high.\")\n\n    print(f\"\\nGame over! The secret number was {secret_number}.\")\n    print(f\"Your guesses: {history}\")\n\ngame_with_history()\n"
    },
    {
        "filename": "เกมจับคู่ลำดับตัวเลข.py",
        "description": "# โปรแกรมเกมให้ผู้เล่นจัดเรียงตัวเลขที่แสดงแบบสุ่ม",
        "content_snippet": "# โปรแกรมเกมให้ผู้เล่นจัดเรียงตัวเลขที่แสดงแบบสุ่ม\n# เกมให้ผู้เล่นจัดเรียงตัวเลขที่แสดงแบบสุ่ม\nimport random\n\ndef play_number_sequence_game(size):\n    sequence = list(range(1, size + 1))\n    shuffled_sequence = sequence[:]\n    random.shuffle(shuffled_sequence)\n\n    print(\"ลำดับตัวเลขสุ่ม:\")\n    print(shuffled_sequence)\n    print(\"ให้จัดเรียงตัวเลขให้ถูกต้อง\")\n\n    user_sequence = list(map(int, input(\"ใส่ลำดับตัวเลขที่เรียง (คั่นด้วยช่องว่าง): \").split()))\n    if user_sequence == sequence:\n        print(\"ยินดีด้วย! คุณจัดเรียงถูกต้อง\")\n    else:\n        print(f\"ผิด! ลำดับที่ถูกต้องคือ {sequence}\")\n\n# ตัวอย่างการใช้งาน\nplay_number_sequence_game(5)"
    },
    {
        "filename": "สร้างฮิสโตแกรม.py",
        "description": "#โปรแกรมสร้างฮิสโตแกรมจากชุดข้อมูลที่ป้อน",
        "content_snippet": "#โปรแกรมสร้างฮิสโตแกรมจากชุดข้อมูลที่ป้อน\nimport matplotlib.pyplot as plt\n\ndef plot_histogram(data, bins):\n    plt.hist(data, bins=bins, edgecolor='black', alpha=0.7)\n    plt.title(\"ฮิสโตแกรมแสดงการกระจายข้อมูล\")\n    plt.xlabel(\"ช่วงข้อมูล\")\n    plt.ylabel(\"ความถี่\")\n    plt.show()\n\n# ตัวอย่างการใช้งาน\ndata = [12, 15, 12, 13, 19, 21, 24, 25, 23, 22, 18, 19, 24, 25, 25, 30, 31, 35]\nbins = 5\nplot_histogram(data, bins)"
    },
    {
        "filename": "(6)เพิ่มการตรวจสอบและแจ้งเตือนการเข้ารหัสผิดพลาด (Error Handling).py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR พร้อมจัดการข้อผิดพลาด",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR พร้อมจัดการข้อผิดพลาด\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef encrypt(plaintext, secret_key):\n    \"\"\"เข้ารหัสข้อความด้วย XOR\"\"\"\n    try:\n        ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n        return ciphertext\n    except Exception as e:\n        return f\"Error during encryption: {e}\"\n\ndef decrypt(ciphertext, secret_key):\n    \"\"\"ถอดรหัสข้อความด้วย XOR\"\"\"\n    try:\n        plaintext = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, secret_key))\n        return plaintext\n    except Exception as e:\n        return f\"Error during decryption: {e}\"\n\n# Main Program\nprint(\"------------- Encryption and Decryption Program with Error Handling -------------\")\n\ntry:\n    plaintext = input(\"Enter your plaintext: \")\n    secret_key = input(\"Enter your secret key: \")\n\n    adjusted_key = adjust_key_length(plaintext, secret_key)\n    ciphertext = encrypt(plaintext, adjusted_key)\n    if \"Error\" in ciphertext:\n        print(ciphertext)\n    else:\n        print(f\"The encrypted ciphertext: {ciphertext}\")\n\n    decrypted_text = decrypt(ciphertext, adjusted_key)\n    if \"Error\" in decrypted_text:\n        print(decrypted_text)\n    else:\n        print(f\"The decryption results: {decrypted_text}\\n\")\n\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")"
    },
    {
        "filename": "เกม_Tic_Tac_Toe.py",
        "description": "# โปรแกรมเกม Tic Tac Toe โดยใช้ภาษา Python",
        "content_snippet": "# โปรแกรมเกม Tic Tac Toe โดยใช้ภาษา Python\n# เกมกระดานคลาสสิคที่ผู้เล่นสองคนสามารถเล่นแข่งกันได้\ndef print_board(board):\n    for row in board:\n        print(\" | \".join(row))\n        print(\"-\" * 5)\n\ndef check_winner(board, player):\n    # ตรวจสอบแถว\n    for row in board:\n        if all(cell == player for cell in row):\n            return True\n    # ตรวจสอบคอลัมน์\n    for col in range(3):\n        if all(row[col] == player for row in board):\n            return True\n    # ตรวจสอบแนวทแยง\n    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):\n        return True\n    return False\n\ndef play_tic_tac_toe():\n    board = [[\" \" for _ in range(3)] for _ in range(3)]\n    players = [\"X\", \"O\"]\n    turn = 0\n    for _ in range(9):\n        print_board(board)\n        player = players[turn % 2]\n        print(f\"ถึงตาของ {player}\")\n        row, col = map(int, input(\"ใส่ตำแหน่ง (row col): \").split())\n        if board[row][col] == \" \":\n            board[row][col] = player\n            if check_winner(board, player):\n                print_board(board)\n                print(f\"{player} ชนะ!\")\n                return\n            turn += 1\n        else:\n            print(\"ตำแหน่งนี้มีคนเลือกแล้ว!\")\n    print(\"เสมอกัน!\")\n\n# ตัวอย่างการใช้งาน\nplay_tic_tac_toe()"
    },
    {
        "filename": "(5)เพิ่มการรองรับหน่วยเงินที่กำหนดโดยผู้ใช้ (เช่น ค่าเงินบาท ค่าเหรียญต่างประเทศ).py",
        "description": "# โปรแกรมคำนวณเงินทอนด้วยหน่วยเงินที่กำหนดเอง",
        "content_snippet": "# โปรแกรมคำนวณเงินทอนด้วยหน่วยเงินที่กำหนดเอง\n# Program to calculate change with custom currency units\ndef calculate_change(total_price, payment, denominations):\n    change = payment - total_price\n\n    if change < 0:\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in denominations.items():\n            count = change // value\n            if count > 0:\n                result.append(f\"{denom} = {count} Piece(s)\")\n            change %= value\n        return \"\\n\".join(result)\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    custom_denominations = input(\"Enter custom denominations (e.g., '100:100,50:50,20:20'): \")\n    denominations = {k: int(v) for k, v in (pair.split(\":\") for pair in custom_denominations.split(\",\"))}\n    total_price = int(input(\"The total price of products: \"))\n    payment = int(input(\"Customer payment: \"))\n    print(\"----------------------------------------------------------\")\n\n    if payment == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change(total_price, payment, denominations)\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "(2)เพิ่มการหมุนตัวเลขในแถวที่เลือกไปทางขวา_1_ตำแหน่ง.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการหมุนตัวเลขในแถวที่เลือกไปทางขวา 1 ตำแหน่ง",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการหมุนตัวเลขในแถวที่เลือกไปทางขวา 1 ตำแหน่ง\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]\n        new_row = [previous_row[-1]]\n        for j in range(len(previous_row)):\n            new_row.append(new_row[-1] + previous_row[j])\n        rows.append(new_row)\n    return rows\n\ndef rotate_right(row):\n    return [row[-1]] + row[:-1]\n\ndef main():\n    rows = []\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            rotated_row = rotate_right(rows[user_row])\n            print(f\"Row {user_row}: {rows[user_row]} (Rotated: {rotated_row})\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "(7)เพิ่มระบบจัดกลุ่มนักเรียนตามเกรด.py",
        "description": "# โปรแกรมแสดงผลการจัดกลุ่มนักเรียนตามเกรดของรายวิชาที่เลือก",
        "content_snippet": "# โปรแกรมแสดงผลการจัดกลุ่มนักเรียนตามเกรดของรายวิชาที่เลือก\nfrom module_exam import Info_Dict, grading\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nsubject = input(\"Enter your subject [Mathematics, Physics, English, Chemistry, Computer]: \")\n\nif subject not in valid_subjects:\n    print(\"----------------------------------------------------------\")\n    print(\"!!!   Subject Error   !!!\")\n    print(\"----------------------------------------------------------\\n\")\nelse:\n    print(\"----------------------------------------------------------\")\n    grouped_students = {'A': [], 'B+': [], 'B': [], 'C+': [], 'C': [], 'D+': [], 'D': [], 'F': []}\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        grade = grading(subject, score)\n        grouped_students[grade].append(student_id)\n\n    print(\"Students Grouped by Grades:\")\n    for grade, students in grouped_students.items():\n        print(f\"  {grade}: {', '.join(students) if students else 'No students'}\")\n\n    print(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "(XIV)คำนวณค่าใน PascalTriangleโดยไม่ใช้การเรียกซ้ำ(IterativeApproach).py",
        "description": "# ฟังก์ชันสร้าง Pascal Triangle แบบ Iterative",
        "content_snippet": "# ฟังก์ชันสร้าง Pascal Triangle แบบ Iterative\ndef pascal_triangle_iterative(n):\n    triangle = []  # เริ่มต้นเป็นลิสต์ว่าง\n    for i in range(n + 1):  # สำหรับแต่ละแถว\n        row = [1]  # เริ่มด้วย 1\n        if i > 0:  # ถ้าไม่ใช่แถวแรก\n            for j in range(1, i):\n                row.append(triangle[i - 1][j - 1] + triangle[i - 1][j])  # คำนวณค่าใหม่จากแถวก่อนหน้า\n            row.append(1)  # เพิ่ม 1 ที่ท้ายแถว\n        triangle.append(row)  # เพิ่มแถวนี้ใน Triangle\n    return triangle\n\n# รับค่าระดับจากผู้ใช้\nn = int(input(\"Enter the number of rows for Pascal Triangle: \"))\nresult = pascal_triangle_iterative(n)\n\n# แสดงผล\nfor row in result:\n    print(row)\n"
    },
    {
        "filename": "(XII)การแปลงพร้อมเพิ่มฟังก์ชันสำหรับเลขฐานอื่น.py",
        "description": "# โปรแกรมแปลงเลขฐาน 2 และ 16 เป็น Roman Numeral",
        "content_snippet": "# โปรแกรมแปลงเลขฐาน 2 และ 16 เป็น Roman Numeral\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\ndef base_to_roman(number, base=10):\n    \"\"\"แปลงเลขจากระบบฐานต่าง ๆ เป็น Roman Numeral\"\"\"\n    try:\n        if base != 10:\n            number = int(str(number), base)\n        return int_to_roman(number) if 0 < number <= 1000000 else \"Out of range\"\n    except ValueError:\n        return \"Invalid number for base conversion\"\n\n# ตัวอย่างการใช้งาน\nnumbers_base2 = [\"110\", \"1001\", \"1010\"]  # Binary\nfor binary in numbers_base2:\n    print(f\"Binary: {binary}, Roman: {base_to_roman(binary, base=2)}\")\n\nnumbers_base16 = [\"A\", \"1F\", \"3E8\"]  # Hexadecimal\nfor hex_num in numbers_base16:\n    print(f\"Hex: {hex_num}, Roman: {base_to_roman(hex_num, base=16)}\")\n"
    },
    {
        "filename": "โรงเรียนของเด็กชายเอ มันมีข้อผิดพลาด.py",
        "description": "# โปรแกรมคำนวณเกรด",
        "content_snippet": "# โปรแกรมคำนวณเกรด\nmyInput =int(input())\ngrade = 0\n\nif myInput < 0:\n  grade = 'Error : Value must be greater than or equal to 0.'\n\nelif myInput > 100:\n  grade = 'Error : Value must be less than or equal to 100.'\n\nelif myInput >= 90:\n  grade = 'A'\n\nelif myInput >= 80:\n  grade = 'B'\n\nelif myInput >= 70:\n  grade = 'C'\n\nelif myInput >= 60:\n  grade = 'D'\n\nelif myInput >= 0:\n  grade = 'F'\n\nprint(grade)\n"
    },
    {
        "filename": "(XV)ใช้ฟังก์ชันLambdaและMapในการปรับปรุง.py",
        "description": "# โปรแกรมรับข้อความและคีย์จากผู้ใช้ แล้วทำการเข้ารหัสข้อความด้วยวิธี Caesar Cipher และแสดงผลลัพธ์ข้อความที่เข้ารหัส",
        "content_snippet": "# โปรแกรมรับข้อความและคีย์จากผู้ใช้ แล้วทำการเข้ารหัสข้อความด้วยวิธี Caesar Cipher และแสดงผลลัพธ์ข้อความที่เข้ารหัส\ndef shift_char(char, key):\n    if char.isalpha():\n        shift_base = ord('A') if char.isupper() else ord('a')\n        return chr((ord(char) - shift_base + key) % 26 + shift_base)\n    elif char.isspace():\n        return char\n    else:\n        raise ValueError(\"Error!!!! Input contains invalid characters.\")\n\ndef secret_password(text, key):\n    return ''.join(map(lambda char: shift_char(char, key), text))\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    decrypted_text = secret_password(ciphertext, -key)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(1)เพิ่มการสุ่มค่าจากช่วงตัวเลขที่กำหนดโดยผู้ใช้.py",
        "description": "# โปรแกรมสร้างเมทริกซ์ด้วยขนาดที่ผู้ใช้ระบุ และสุ่มค่าตัวเลขในช่วงที่กำหนด",
        "content_snippet": "# โปรแกรมสร้างเมทริกซ์ด้วยขนาดที่ผู้ใช้ระบุ และสุ่มค่าตัวเลขในช่วงที่กำหนด\n# พร้อมทั้งแสดง Transpose และผลรวมของแนวทแยง (ถ้าเป็นเมทริกซ์สี่เหลี่ยมจัตุรัส)\nimport random \n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows > 5 or columns > 5:\n    print(\"Matrix size too large! Try smaller dimensions.\")\n    exit()\n\n# ให้ผู้ใช้กำหนดช่วงตัวเลขสุ่ม\nmin_val = int(input(\"Enter minimum random value: \"))\nmax_val = int(input(\"Enter maximum random value: \"))\n\nmatrix_a = [[random.randint(min_val, max_val) for _ in range(columns)] for _ in range(rows)]\nprint(f\"Matrix A [{rows}x{columns}]: {matrix_a}\")\n\n# คำนวณ Transpose\nmatrix_a_t = [[matrix_a[j][i] for j in range(rows)] for i in range(columns)]\nprint(f\"Transpose [{columns}x{rows}]: {matrix_a_t}\")\n\n# ตรวจสอบว่า Matrix A เป็นสี่เหลี่ยมจัตุรัสและคำนวณผลรวมแนวทแยง\nif rows == columns:\n    diag_sum = sum(matrix_a[i][i] for i in range(rows))\n    print(f\"Sum of main diagonal elements: {diag_sum}\")"
    },
    {
        "filename": "คำนวณค่ามัธยฐาน.py",
        "description": "#โปรแกรมคำนวณค่ามัธยฐานจากชุดข้อมูลที่ป้อน",
        "content_snippet": "#โปรแกรมคำนวณค่ามัธยฐานจากชุดข้อมูลที่ป้อน\nimport statistics\n\ndef calculate_median(data):\n    return statistics.median(data)\n\n# รับข้อมูลจากผู้ใช้\ndata = list(map(float, input(\"ใส่ข้อมูลตัวเลข (คั่นด้วยช่องว่าง): \").split()))\nmedian = calculate_median(data)\nprint(f\"ค่ามัธยฐานคือ: {median}\")"
    },
    {
        "filename": "(XV)ใช้XOREncryptionกับตัวอักษร.py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR\n# โดยใช้ฟังก์ชัน secret_password(text, key) ที่รับข้อความและคีย์เป็นอาร์กิวเมนต์\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            # ใช้ XOR กับ key เพื่อเข้ารหัสตัวอักษร\n            shifted_char = chr(ord(char) ^ key)  \n            result += shifted_char\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    # เข้ารหัสข้อความด้วย XOR\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    # ถอดรหัสข้อความด้วย XOR (กระบวนการเดียวกันเพราะ XOR เป็นการกลับด้านได้)\n    decrypted_text = secret_password(ciphertext, key)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(XI)Factorialแบบสุ่มค่าn.py",
        "description": "# โปรแกรมสร้างลิสต์ Factorial โดย n ถูกสุ่มจากช่วงตัวเลขที่กำหนด",
        "content_snippet": "# โปรแกรมสร้างลิสต์ Factorial โดย n ถูกสุ่มจากช่วงตัวเลขที่กำหนด\nimport random\n\n# สร้างลิสต์ Factorial โดย n ถูกสุ่มจากช่วงตัวเลขที่กำหนด\nprint('Generating Randomized Factorial series')\nlower = int(input(\"Enter lower bound for random n: \"))\nupper = int(input(\"Enter upper bound for random n: \"))\nn = random.randint(lower, upper)  # สุ่มค่า n\nprint(f\"Randomly chosen n: {n}\")\n\nresult = 1\nfactorial_list = []\n\nfor i in range(1, n+1):\n    result *= i\n    factorial_list.append(result)\n\n# แสดงผล\nprint(f\"Factorial series for random n={n}: {factorial_list}\\n\")\n"
    },
    {
        "filename": "(7)เพิ่มระบบวิเคราะห์นักเรียนที่มีคะแนนต่ำสุดและสูงสุดในแต่ละวิชา.py",
        "description": "# โปรแกรมแสดงผลรายชื่อนักเรียนที่ได้คะแนนสูงสุดและต่ำสุดของแต่ละวิชา",
        "content_snippet": "# โปรแกรมแสดงผลรายชื่อนักเรียนที่ได้คะแนนสูงสุดและต่ำสุดของแต่ละวิชา\nfrom module_exam import Info_Dict, grading\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nfor subject in valid_subjects:\n    max_score = -1\n    min_score = 101\n    top_student = \"\"\n    low_student = \"\"\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        if score > max_score:\n            max_score = score\n            top_student = student_id\n        if score < min_score:\n            min_score = score\n            low_student = student_id\n\n    print(f\"{subject}:\")\n    print(f\"  Top Student: {top_student} with Score = {max_score}\")\n    print(f\"  Lowest Student: {low_student} with Score = {min_score}\")\n    print(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "(V)ตรวจสอบ_string(V)+บันทึกผลลัพธ์ลงไฟล์.py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการคำนวณข้อมูลของสตริง โดยจะรับข้อมูลสตริง 2 ตัวจากผู้ใช้",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการคำนวณข้อมูลของสตริง โดยจะรับข้อมูลสตริง 2 ตัวจากผู้ใช้\n# โค้ดนี้เพิ่มการ บันทึกผลลัพธ์ลงไฟล์ (ในไฟล์ .txt) นอกจากการแสดงผลบนหน้าจอ \n# โดยผลลัพธ์ทั้งหมดจะถูกบันทึกลงในไฟล์ชื่อ result.txt ซึ่งสามารถเปิดดูในภายหลังได้\n# รับข้อมูลจากผู้ใช้\nuser_a = input('Enter string A: ')\nuser_b = input('Enter string B: ')\n\n# แปลง String เป็นเซ็ต\nset_a = set(user_a)\nset_b = set(user_b)\n\n# คำนวณผลลัพธ์\noutput = {\n    \"Unique characters in A\": len(set_a),\n    \"Unique characters in B\": len(set_b),\n    \"Characters in both\": set_a & set_b,\n    \"Characters in A not in B\": set_a - set_b,\n    \"Characters in B not in A\": set_b - set_a,\n    \"Symmetric difference\": set_a ^ set_b,\n    \"Union\": set_a | set_b\n}\n\n# แสดงผลและบันทึกลงไฟล์\nprint('--------------------------------------------------')\nwith open(\"result.txt\", \"w\", encoding=\"utf-8\") as file:\n    for key, value in output.items():\n        file.write(f'{key}: {value}\\n')\n        print(f'{key}: {value}')\nprint(\"Results saved to result.txt\")"
    },
    {
        "filename": "โรงเรียนของเด็กชายเอ.py",
        "description": "# โปรแกรมคำนวณเกรด",
        "content_snippet": "# โปรแกรมคำนวณเกรด\nmyInput = int(input())\nGrade = 0\n\nif myInput >= 90:\n  Grade = \"A\"\n  \nelif myInput >= 85:\n  Grade = \"B+\"\n\nelif myInput >= 80:\n  Grade = \"B\"\n\nelif myInput >= 75:\n  Grade = \"C+\"\n\nelif myInput >= 70:\n  Grade = \"C\"\n\nelif myInput >= 65:\n  Grade = \"D+\"\n\nelif myInput >= 60:\n  Grade = \"D\"\n\nelse:\n  Grade = \"F\"\n\nprint(Grade)\n"
    },
    {
        "filename": "(XIV)แสดงผลPascalTriangleเฉพาะค่าที่เป็นเลขคู่.py",
        "description": "# โปรแกรมสร้าง Pascal Triangle แต่แสดงเฉพาะเลขคู่เท่านั้น",
        "content_snippet": "# โปรแกรมสร้าง Pascal Triangle แต่แสดงเฉพาะเลขคู่เท่านั้น\ndef pascal_triangle_even_only(n): # ฟังก์ชันสร้าง Pascal Triangle แต่แสดงเฉพาะเลขคู่\n    triangle = []  # เริ่มต้นด้วยลิสต์ว่าง\n    for i in range(n + 1): # วนลูปเพื่อสร้างแถว\n        row = [1] # สร้างแถวใหม่\n        if i > 0: # สร้างตัวเลขใหม่ในแถวที่มากกว่า 0\n            for j in range(1, i): # วนลูปเพื่อสร้างตัวเลขใหม่\n                row.append(triangle[i - 1][j - 1] + triangle[i - 1][j]) # สร้างตัวเลขใหม่จากผลรวม\n            row.append(1) # เพิ่มตัวเลขสุดท้าย\n        # แทนค่าที่ไม่ใช่เลขคู่ด้วย \"-\" เพื่อเน้นเลขคู่\n        row = [\"-\" if x % 2 != 0 else x for x in row] # แทนค่าที่ไม่ใช่เลขคู่ด้วย \"-\"\n        triangle.append(row) # เพิ่มแถวใหม่เข้าไปในรายการ\n    return triangle\n\n# รับค่าระดับ\nn = int(input(\"Enter the number of rows for Pascal Triangle (even numbers only): \"))\nresult = pascal_triangle_even_only(n)\n\n# แสดงผล\nfor row in result:\n    print(\" \".join(map(str, row)))\n"
    },
    {
        "filename": "Vowel.py",
        "description": "# โปรแกรมรับข้อความจากผู้ใช้และลบตัวอักษรที่เป็นสระออกจากข้อความนั้น",
        "content_snippet": "# โปรแกรมรับข้อความจากผู้ใช้และลบตัวอักษรที่เป็นสระออกจากข้อความนั้น\ninput_text = str(input())\n\nvowels = \"aeiouAEIOU\"\n\nremove = ''.join(char for char in input_text if char not in vowels)\n\nprint(remove)"
    },
    {
        "filename": "(4)เพิ่มโหมดการเดา 5 หลัก.py",
        "description": "# เกม MEN and WOMEN ในโหมด 5 หลัก",
        "content_snippet": "# เกม MEN and WOMEN ในโหมด 5 หลัก\nimport random\n\ndef generate_secret_number():\n    \"\"\"Generate a 5-digit secret number with unique digits.\"\"\"\n    return random.sample(range(10), 5)\n\ndef calculate_hint(secret, guess):\n    \"\"\"Calculate MEN and WOMEN based on the guess.\"\"\"\n    men = sum(s == g for s, g in zip(secret, guess))\n    women = sum(g in secret for g in guess) - men\n    return men, women\n\nprint(\"------ Welcome to MEN and WOMEN number guessing game ------\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\nsecret_number = generate_secret_number()\nattempts = 0\n\nwhile True:\n    user_input = input(\"Enter 5-digits number: \")\n\n    if user_input == \"0\":\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        print(\"Exiting the program.\")\n        break\n\n    if len(user_input) != 5 or not user_input.isdigit():\n        print(\"Invalid input. Please enter a 5-digit number.\")\n        continue\n\n    guess = list(map(int, user_input))\n    if len(set(guess)) != 5:\n        print(\"Digits must be unique. Try again.\")\n        continue\n\n    attempts += 1\n    men, women = calculate_hint(secret_number, guess)\n\n    print(f\"Hint: MEN = {men} and WOMEN = {women}\")\n\n    if men == 5:\n        print(f\"*** Congratulations *** Your guess is correct, after {attempts} attempts\")\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        break"
    },
    {
        "filename": "(6)เพิ่มตัวเลือกการสุ่ม secret_key อัตโนมัติ.py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR โดยใช้ secret key ที่สร้างขึ้นเองหรือใช้ secret key ที่ผู้ใช้ป้อนเอง",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR โดยใช้ secret key ที่สร้างขึ้นเองหรือใช้ secret key ที่ผู้ใช้ป้อนเอง\nimport random\nimport string\n\ndef generate_random_key(length):\n    \"\"\"สร้าง Secret Key แบบสุ่ม\"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))\n\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef encrypt(plaintext, secret_key):\n    \"\"\"เข้ารหัสข้อความด้วย XOR\"\"\"\n    ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n    return ciphertext\n\ndef decrypt(ciphertext, secret_key):\n    \"\"\"ถอดรหัสข้อความด้วย XOR\"\"\"\n    plaintext = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, secret_key))\n    return plaintext\n\n# Main Program\nprint(\"------------- Encryption and Decryption Program -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\n\nrandom_key_option = input(\"Do you want to generate a random secret key? (yes/no): \").strip().lower()\nif random_key_option == \"yes\":\n    secret_key = generate_random_key(len(plaintext))\n    print(f\"Generated secret key: {secret_key}\")\nelse:\n    secret_key = input(\"Enter your secret key: \")\n\nadjusted_key = adjust_key_length(plaintext, secret_key)\nciphertext = encrypt(plaintext, adjusted_key)\nprint(f\"The encrypted ciphertext: {ciphertext}\")\n\ndecrypted_text = decrypt(ciphertext, adjusted_key)\nprint(f\"The decryption results: {decrypted_text}\\n\")"
    },
    {
        "filename": "(IX)เพิ่มรูปแบบการสร้างสี่เหลี่ยมเป็นกรอบที่มีความหนา.py",
        "description": "# โค้ดสร้างกรอบสี่เหลี่ยมที่มีความหนา",
        "content_snippet": "# โค้ดสร้างกรอบสี่เหลี่ยมที่มีความหนา\nprint('---------- Drawing the square frame with thickness ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the size (at least 3): \"))\n    thickness = int(input(\"Please enter the frame thickness: \"))\n\n    if size == 0 or thickness == 0:\n        break\n    elif size >= 3 and thickness < size // 2:\n        for i in range(size):\n            if i < thickness or i >= size - thickness:  # แถวที่เป็นส่วนกรอบบน/ล่าง\n                print(\"#\" * size)\n            else:  # แถวที่เป็นกรอบด้านข้าง\n                print(\"#\" * thickness + \" \" * (size - 2 * thickness) + \"#\" * thickness)\n    else:\n        print(\"Invalid input. Please enter valid size and thickness.\")\n"
    },
    {
        "filename": "(8)เพิ่มการคำนวณ Matrix Subtraction.py",
        "description": "# โปรแกรมสำหรับการลบ Matrix ที่มีขนาดไม่เกิน 3x3",
        "content_snippet": "# โปรแกรมสำหรับการลบ Matrix ที่มีขนาดไม่เกิน 3x3\nimport random\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows > 3 or columns > 3:\n    print(\"!!! Error: Maximum supported size is 3x3 !!!\\n\")\nelse:\n    matrix_a = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]\n    matrix_b = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]\n\n    print(f\"Matrix A: {matrix_a}\")\n    print(f\"Matrix B: {matrix_b}\")\n\n    matrix_diff = [[matrix_a[i][j] - matrix_b[i][j] for j in range(columns)] for i in range(rows)]\n    print(f\"Matrix A - Matrix B: {matrix_diff}\")\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(II)หาพื้นที่.py",
        "description": "# โปรแกรมคำนวณพื้นที่ของรูปสามเหลี่ยม สี่เหลี่ยม ความยาวด้านที่ยาวที่สุดของสามเหลี่ยมมุมฉาก สมการกระจาย ระยะห่างระหว่างจุดสองจุด",
        "content_snippet": "# โปรแกรมคำนวณพื้นที่ของรูปสามเหลี่ยม สี่เหลี่ยม ความยาวด้านที่ยาวที่สุดของสามเหลี่ยมมุมฉาก สมการกระจาย ระยะห่างระหว่างจุดสองจุด\nimport math\n\n#ส่งพร้อมโค้ด\ndef Area_Of_Triangle(b, h):\n    aot = 0.5 * b * h\n    return f\"The area is {aot:.2f}\"\n\ndef Area_Of_Rectangle(l, w):\n    aor = l * w\n    return f\"The area is {aor:.2f}\"\n\ndef The_Long_Side_Of_The_Right_Triangle(a1, b1):\n    longside = math.sqrt(a1**2 + b1**2)\n    return f\"The length of the longest size is {longside:.2f}\"\n\ndef The_Solution_Of_Quadratic_Formula(c2, b2, a2):\n    if a2 == 0:\n        return \"ค่า a ต้องไม่เท่ากับ 0\"\n\n    discriminant = b2**2 - 4 * a2 * c2\n\n    if discriminant < 0:\n        # กรณีที่มีค่าติดลบ จะเป็นจำนวนเชิงซ้อน\n        root1 = (-b2 + complex(0, math.sqrt(-discriminant))) / (2 * a2)\n        root2 = (-b2 - complex(0, math.sqrt(-discriminant))) / (2 * a2)\n        return f\"The 1st solution is x = {root1}\\nThe 2nd solution is x = {root2}\"\n    elif discriminant == 0:\n        x1 = -b2 / (2 * a2)\n        x2 = -b2 / (2 * a2)\n        return f\"The 1st solution is x = {x1}\\nThe 2nd solution is x = {x2}\"\n    else:\n        x1 = (-b2 + math.sqrt(discriminant)) / (2 * a2)\n        x2 = (-b2 - math.sqrt(discriminant)) / (2 * a2)\n        return f\"The 1st solution is x = {x1}\\nThe 2nd solution is x = {x2}\"\n\ndef Distance_Of_Two_Points(x1, y1, x2, y2):\n    dtp = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return f\"The distance between the two points is {dtp:.2f}\"\n\nprint(\"##################################################\")\nprint(\"                 Area Of Triangle                 \")\nprint(\"--------------------------------------------------\")\nb = float(input(\"Enter Base: \"))\nh = float(input(\"Enter Height: \"))\nprint(Area_Of_Triangle(b, h))\n\nprint(\"--------------------------------------------------\")\nprint(\"                 Area Of Rectangle                 \")\nprint(\"--------------------------------------------------\")\nl = float(input(\"Enter Length: \"))\nw = float(input(\"Enter Width: \"))\nprint(Area_Of_Rectangle(l, w))\n\nprint(\"--------------------------------------------------\")\nprint(\"       The Long Side Of The Right Triangle        \")\nprint(\"--------------------------------------------------\")\na1 = float(input(\"Enter length of the 1st side: \"))\nb1 = float(input(\"Enter length of the 2nd side: \"))\nprint(The_Long_Side_Of_The_Right_Triangle(a1, b1))\n\nprint(\"--------------------------------------------------\")\nprint(\"        The Solution Of Quadratic Formula         \")\nprint(\"--------------------------------------------------\")\nc2 = float(input(\"Enter Constant(c): \"))\nb2 = float(input(\"Enter Coefficient of Linear Term (b): \"))\na2 = float(input(\"Enter Coefficient of Quadratic Term (a): \"))\nprint(The_Solution_Of_Quadratic_Formula(c2, b2, a2))\n\nprint(\"--------------------------------------------------\")\nprint(\"             Distance Of Two Points               \")\nprint(\"--------------------------------------------------\")\nx1 = float(input(\"Enter x of the 1st point: \"))\ny1 = float(input(\"Enter y of the 1st point: \"))\nx2 = float(input(\"Enter x of the 2nd point: \"))\ny2 = float(input(\"Enter y of the 2nd point: \"))\nprint(Distance_Of_Two_Points(x1, y1, x2, y2))\n"
    },
    {
        "filename": "(X)เพิ่มการตรวจสอบห้ามมีชื่อผู้ใช้ในรหัสผ่าน.py",
        "description": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน\nimport re\n\nusername = input(\"Enter your username:\")\n\nwhile True:\n    password = input(\"Set your password:\")\n\n    if username.lower() in password.lower():  # Check if username is part of the password\n        print(\"!!!ERROR!!! Your password must not contain your username\\n\")\n    elif 8 <= len(password) <= 16:\n        if (re.search(r'[A-Z]', password) and\n              re.search(r'[a-z]', password) and\n              re.search(r'[0-9]', password) and\n              re.search(r'[!@#$%^&*]', password)):\n            print(\":-) Your password is valid and secure (-: \")\n            break\n        else:\n            print(\"!!!ERROR!!! Your password does not meet the complexity requirements\\n\")\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับด้านแบบลายทาง.py",
        "description": "# Drawing a reversed right triangle with alternating striped rows",
        "content_snippet": "# Drawing a reversed right triangle with alternating striped rows\nwhile True:\n    height = int(input(\"Enter the height of the triangle (0 to quit): \"))\n    if height == 0:\n        break\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        if i % 2 == 0:\n            stars = '*' * i\n        else:\n            stars = '#' * i\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "กลับด้าน.py",
        "description": "# โปรแกรมที่รับข้อความมาแล้ว reverse ข้อความนั้น แล้วแสดงผลลัพธ์ออกมา",
        "content_snippet": "# โปรแกรมที่รับข้อความมาแล้ว reverse ข้อความนั้น แล้วแสดงผลลัพธ์ออกมา\ntext = str(input())\n\nrevers_text = text[::-1]\n\nprint(revers_text)"
    },
    {
        "filename": "นับความถี่ของค่าข้อมูล.py",
        "description": "#โปรแกรมนับจำนวนครั้งที่แต่ละค่าปรากฏในชุดข้อมูล",
        "content_snippet": "#โปรแกรมนับจำนวนครั้งที่แต่ละค่าปรากฏในชุดข้อมูล\nfrom collections import Counter\n\ndef count_frequency(data):\n    return Counter(data)\n\n# รับข้อมูลจากผู้ใช้\ndata = list(map(int, input(\"ใส่ข้อมูลตัวเลข (คั่นด้วยช่องว่าง): \").split()))\nfrequency = count_frequency(data)\nprint(\"ความถี่ของค่าข้อมูล:\")\nfor value, count in frequency.items():\n    print(f\"{value}: {count} ครั้ง\")"
    },
    {
        "filename": "การคำนวณเฉลี่ยคะแนนพร้อมจัดกลุ่มตามเพศ.py",
        "description": "# โปรแกรมนี้จะทำการคำนวณคะแนนเฉลี่ยของแต่ละคน และจัดกลุ่มตามเพศ",
        "content_snippet": "# โปรแกรมนี้จะทำการคำนวณคะแนนเฉลี่ยของแต่ละคน และจัดกลุ่มตามเพศ\n# ข้อมูลต้นฉบับ\nid = {'Peter': {'Age': 40, 'Gender': 'Male', 'Test': {'First': 20, 'Second': 18, 'Third': 19}},\n      'Paul': {'Age': 25, 'Gender': 'Male', 'Test': {'First': 19, 'Second': 20, 'Third': 19}},\n      'Mary': {'Age': 18, 'Gender': 'Female', 'Test': {'First': 10, 'Second': 5, 'Third': 4}},\n      'Jenny': {'Age': 60, 'Gender': 'Female', 'Test': {'First': 5, 'Second': 3, 'Third': 1}}}\n\n# เพิ่มการคำนวณคะแนนเฉลี่ยและจัดกลุ่มตามเพศ\ngrouped_data = {'Male': [], 'Female': []}\n\nfor name, data in id.items():\n    # คำนวณคะแนนเฉลี่ยของแต่ละคน\n    avg_score = sum(data['Test'].values()) / len(data['Test'])\n    data['Average'] = avg_score  # เพิ่มข้อมูลคะแนนเฉลี่ยใน dictionary\n    \n    # จัดกลุ่มตามเพศ\n    grouped_data[data['Gender']].append({'Name': name, 'Average': avg_score})\n\n# แสดงผลข้อมูลที่จัดกลุ่มแล้ว\nfor gender, individuals in grouped_data.items():\n    print(f\"--- {gender} ---\")\n    for person in individuals:\n        print(f\"{person['Name']} has an average score of {person['Average']:.2f}\")\n"
    },
    {
        "filename": "(XII)การแปลงแบบListComprehensionและกรองข้อมูล.py",
        "description": "# โปรแกรมแปลงตัวเลขเป็น Roman Numerals และแปลง List ของตัวเลขเป็น Roman Numerals",
        "content_snippet": "# โปรแกรมแปลงตัวเลขเป็น Roman Numerals และแปลง List ของตัวเลขเป็น Roman Numerals\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\ndef convert_list_to_roman(numbers):\n    \"\"\"แปลง List ของตัวเลขเป็น Roman Numerals\"\"\"\n    return [\n        (number, int_to_roman(number)) if 0 < number <= 1000000 else (number, \"Out of range\")\n        for number in numbers\n    ]\n\n# ตัวอย่างการใช้งาน\nnumbers = [1, 4, 10, 1000, 500000, -1, 1000001]\nresults = convert_list_to_roman(numbers)\nfor number, roman in results:\n    print(f\"Number: {number}, Roman Numeral: {roman}\")\n"
    },
    {
        "filename": "ก็แค่เรียงลำดับ.py",
        "description": "# โปรแกรมรับค่าจำนวนเต็ม 5 ค่า และแสดงผลลัพธ์จากมากไปน้อย",
        "content_snippet": "# โปรแกรมรับค่าจำนวนเต็ม 5 ค่า และแสดงผลลัพธ์จากมากไปน้อย\nnum = 5\nnumb = []\n\nfor i in range(num):\n  num = int(input())\n  i += 1\n  numb.append(num)\n  \nnumb.sort(reverse=True)\nfor num in numb:\n  print(num)"
    },
    {
        "filename": "(XV)ใช้CaesarCipherแต่เลื่อนด้วยฟังก์ชันขั้นสูง.py",
        "description": "# โปรแกรมที่ใช้เข้ารหัสและถอดรหัสข้อความโดยใช้วิธีการเลื่อนตัวอักษรโดยใช้ฟังก์ชัน sin",
        "content_snippet": "# โปรแกรมที่ใช้เข้ารหัสและถอดรหัสข้อความโดยใช้วิธีการเลื่อนตัวอักษรโดยใช้ฟังก์ชัน sin\n# โดยใช้ความซับซ้อนในการเลื่อนตัวอักษรโดยใช้ฟังก์ชัน sin ในการเลื่อนตัวอักษร\nimport math\n\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            # เลื่อนตัวอักษรโดยใช้ฟังก์ชัน sin เพื่อเพิ่มความซับซ้อน\n            adjusted_key = math.floor(key + math.sin(ord(char)) * 5)\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + adjusted_key) % 26 + shift_base)\n            result += shifted_char\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    # เข้ารหัสโดยใช้ฟังก์ชัน sin ในการเลื่อนตัวอักษร\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    # ถอดรหัสกลับโดยใช้ key เดิม\n    decrypted_text = secret_password(ciphertext, -key)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(XV)เข้ารหัสโดยเพิ่มฟังก์ชันBase64.py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วยวิธี Caesar Cipher",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วยวิธี Caesar Cipher\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        else:\n            raise ValueError(\"Error!!!! Input non-characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    decrypted_text = secret_password(ciphertext, -key)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(8)โปรแกรมรับค่าจำนวนแถว.py",
        "description": "#โปรแกรมสร้าง Matrix และคำนวณผลคูณ A x A^T",
        "content_snippet": "#โปรแกรมสร้าง Matrix และคำนวณผลคูณ A x A^T\n\nimport random\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows > 3 or columns > 3:\n    print(\"!!!   Error in a number of rows or columns   !!!\\n\")\nelse:\n    print(\"=\" * 80)\n    # สุ่มค่าจำนวนเต็ม 0-9 สำหรับ Matrix A\n    matrix_a = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]\n    \n    print(f\"Matrix A [{rows}x{columns}] with a python LIST structure  : {matrix_a}\")\n    \n    # คำนวณ Transpose ของ Matrix A\n    matrix_a_t = [[matrix_a[j][i] for j in range(rows)] for i in range(columns)]\n    print(f\"Its transpose [{columns}x{rows}]                          : {matrix_a_t}\")\n    print(\"=\" * 80)\n\n    # คำนวณผลคูณ A x A^T\n    result = [[sum(matrix_a[i][k] * matrix_a_t[k][j] for k in range(columns)) for j in range(rows)] for i in range(rows)]\n\n    print(\"Calculation details for a multiplication of a matrix A and its transpose\\n\")\n    for i in range(rows):\n        row_details = []\n        for j in range(rows):\n            # แสดงรายละเอียดการคำนวณ\n            detail = \"+\".join(\n                f\"({matrix_a[i][k]}x{matrix_a_t[k][j]})\" for k in range(columns)\n            )\n            total = sum(matrix_a[i][k] * matrix_a_t[k][j] for k in range(columns))\n            row_details.append(f\"{detail} = {total:<3}\")\n        print(\"    \".join(row_details))  # แยกแต่ละคอลัมน์ด้วยระยะห่างที่เหมาะสม\n    \n    print(\"\\nMultiplication result [{}x{}]                  : {}\".format(rows, rows, result))\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(XIII)GuessingGameพร้อมตัวเลขหลอกล่อ.py",
        "description": "# โปรแกรมที่ใช้ในการเล่นเกมทายตัวเลขที่มีตัวเลขหลอกเพื่อทำให้ผู้เล่นไขว้เขว",
        "content_snippet": "# โปรแกรมที่ใช้ในการเล่นเกมทายตัวเลขที่มีตัวเลขหลอกเพื่อทำให้ผู้เล่นไขว้เขว\n# โดยโปรแกรมจะสุ่มตัวเลขที่ผู้เล่นต้องทาย และสุ่มตัวเลขหลอก 5 ตัวเลข\nimport random\n\ndef decoy_numbers_game():\n    # เกมที่มีตัวเลขหลอกเพื่อทำให้ผู้เล่นไขว้เขว\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    decoy_numbers = random.sample(range(1, 101), 5) # สุ่มตัวเลขหลอก 5 ตัวเลข\n    attempts = 7 # จำนวนรอบที่ให้ทาย\n\n    print(\"\\n***** Decoy Numbers Guessing Game *****\")\n    print(f\"The secret number is one of these: {decoy_numbers + [secret_number]}\")\n\n    for _ in range(attempts):\n        guess = int(input(\"Enter your guess: \"))\n\n        if guess == secret_number:\n            print(f\"Congratulations! You guessed the number {secret_number}.\")\n            return\n        elif guess in decoy_numbers:\n            print(f\"{guess} is a decoy! Keep trying.\")\n        else:\n            print(\"Wrong guess!\")\n\n    print(f\"\\nGame over! The secret number was {secret_number}.\")\n\ndecoy_numbers_game()\n"
    },
    {
        "filename": "(4)เพิ่มโหมดเดาเลข 3 หลัก.py",
        "description": "# เกม MEN and WOMEN แบบ 3 หลัก",
        "content_snippet": "# เกม MEN and WOMEN แบบ 3 หลัก\nimport random\n\ndef generate_secret_number(): # ฟังก์ชันสร้างเลขที่ถูก\n    \"\"\"Generate a 3-digit secret number with unique digits.\"\"\"\n    return random.sample(range(10), 3) # สร้างเลขไม่ซ้ำ 3 ตัว\n\ndef calculate_hint(secret, guess): # ฟังก์ชันคำนวณ hint\n    \"\"\"Calculate MEN and WOMEN based on the guess.\"\"\"\n    men = sum(s == g for s, g in zip(secret, guess)) # นับ MEN โดยเทียบตำแหน่งและค่า\n    women = sum(g in secret for g in guess) - men # WOMEN คือนับเลขที่อยู่ในคำตอบแต่ไม่ตรงตำแหน่ง\n    return men, women # คืนค่า MEN และ WOMEN\n\nprint(\"------ Welcome to MEN and WOMEN number guessing game (3 digits) ------\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\nsecret_number = generate_secret_number() # สร้างเลขที่ถูก\nattempts = 0 # ตัวนับจำนวนครั้งที่ทาย\n\nwhile True:\n    user_input = input(\"Enter 3-digits number: \") # รับค่าจากผู้ใช้\n\n    if user_input == \"0\": # ถ้าผู้ใช้ป้อน 0 ให้ออกจากโปรแกรม\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\") # แสดงเลขที่ถูก\n        print(\"Exiting the program.\") # แสดงข้อความว่าออก\n        break\n\n    if len(user_input) != 3 or not user_input.isdigit(): # ตรวจสอบว่าผู้ใช้ป้อน 3 ตัวและเป็นตัวเลขหรือไม่\n        print(\"Invalid input. Please enter a 3-digit number.\") # แจ้งว่าผู้ใช้ป้อนผิด\n        continue # วนลูปใหม่\n\n    guess = list(map(int, user_input)) # แปลงค่าที่ผู้ใช้ป้อนเป็น list ของตัวเลข\n    if len(set(guess)) != 3: # ตรวจสอบว่าเลขซ้ำหรือไม่\n        print(\"Digits must be unique. Try again.\") # แจ้งว่าต้องไม่ซ้ำ\n        continue # วนลูปใหม่\n\n    attempts += 1 # เพิ่มจำนวนครั้งที่ทาย\n    men, women = calculate_hint(secret_number, guess) # คำนวณค่า MEN และ WOMEN\n\n    print(f\"Hint: MEN = {men} and WOMEN = {women}\") # แสดงค่า MEN และ WOMEN\n\n    if men == 3: # ถ้าทายถูกทั้งหมด\n        print(f\"*** Congratulations *** Your guess is correct, after {attempts} attempts\") # แสดงข้อความแสดงความยินดี\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\") # แสดงเลขที่ถูก\n        break # ออกจากลูป"
    },
    {
        "filename": "(VI)dict.py",
        "description": "# โปรแกรมนี้เป็นการสร้าง dictionary ที่มี key เป็นชื่อของคน และ value เป็น dictionary ที่มี key เป็นข้อมูลของคนนั้นๆ",
        "content_snippet": "# โปรแกรมนี้เป็นการสร้าง dictionary ที่มี key เป็นชื่อของคน และ value เป็น dictionary ที่มี key เป็นข้อมูลของคนนั้นๆ\nid = {'Peter' : {'Age': 40 , 'Gender': 'Male', 'Test': {'First': 20, 'Second': 18, 'Third': 19}},\n      'Paul' : {'Age': 25, 'Gender': 'Male', 'Test': {'First' : 19, 'Second': 20, 'Third': 19}},\n      'Mary' : {'Age': 18, 'Gender': 'Female', 'Test': {'First': 10, 'Second': 5, 'Third': 4}},\n      'Jenny' : {'Age': 60, 'Gender': 'Female', 'Test': {'First': 5, 'Second': 3, 'Third': 1}}}\n\nprint(f'\"Peter\" is {id['Peter']['Gender']}')\nprint(f'The 1st test score of \"Mary\" is {id['Mary']['Test']['First']}')\nprint(f'The 2st test score of \"Jenny\" is {id['Jenny']['Test']['Second']}')\nprint(f'The 3st test score of \"Paul\" is {id['Paul']['Test']['Third']}')\n\nid['Robert'] = {'Age': 35, 'Gender': 'Male', 'Test' : {'First': 10, 'Second': 18, 'Third': 5}}\n\nprint(f'\"Robert\" is {id['Robert']['Age']} years old')\nprint('The dictionary to solve this problem was designed as:')\n\nfor name, data in id.items():\n    print(f'{name} : {data}')"
    },
    {
        "filename": "แก้สมการเชิงเส้น_2_ตัวแปร.py",
        "description": "# โปรแกรมแก้สมการเชิงเส้น 2 ตัวแปร",
        "content_snippet": "# โปรแกรมแก้สมการเชิงเส้น 2 ตัวแปร\n# การแก้สมการเชิงเส้น 2 ตัวแปร\ndef solve_linear_equations(a1, b1, c1, a2, b2, c2):\n    # ใช้สูตรการแก้สมการเชิงเส้น\n    determinant = a1 * b2 - a2 * b1\n    if determinant == 0:\n        return None, None  # ไม่มีคำตอบหรือคำตอบไม่ชัดเจน\n    x = (c1 * b2 - c2 * b1) / determinant\n    y = (a1 * c2 - a2 * c1) / determinant\n    return x, y\n\n# รับค่าจากผู้ใช้\nprint(\"แก้สมการเชิงเส้น 2 ตัวแปร:\")\na1, b1, c1 = map(float, input(\"สมการที่ 1 (ใส่ค่า a1 b1 c1): \").split())\na2, b2, c2 = map(float, input(\"สมการที่ 2 (ใส่ค่า a2 b2 c2): \").split())\n\nx, y = solve_linear_equations(a1, b1, c1, a2, b2, c2)\nif x is None and y is None:\n    print(\"สมการไม่มีคำตอบหรือคำตอบไม่ชัดเจน\")\nelse:\n    print(f\"คำตอบคือ x = {x:.2f}, y = {y:.2f}\")"
    },
    {
        "filename": "(8)เพิ่มการคำนวณ Trace ของ Matrix (ผลรวมของ Diagonal Elements).py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้สำหรับหา Trace ของ Matrix ขนาด n x n โดยที่ n คือขนาดของ Matrix และ Trace คือผลรวมของ Elements ที่อยู่บน Diagonal ของ Matrix",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้สำหรับหา Trace ของ Matrix ขนาด n x n โดยที่ n คือขนาดของ Matrix และ Trace คือผลรวมของ Elements ที่อยู่บน Diagonal ของ Matrix\nimport random\n\nprint(\"=\" * 80)\nsize = int(input(\"Enter the size of the square matrix: \"))\n\nif size > 3:\n    print(\"!!! Error: Maximum supported size is 3x3 !!!\\n\")\nelse:\n    matrix = [[random.randint(0, 9) for _ in range(size)] for _ in range(size)]\n    print(f\"Matrix: {matrix}\")\n\n    trace = sum(matrix[i][i] for i in range(size))\n    print(f\"Trace of the Matrix: {trace}\")\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(8)เพิ่มการตรวจสอบ Symmetric Matrix.py",
        "description": "# โปรแกรมที่รับขนาดของเมทริกซ์จากผู้ใช้และสร้างเมทริกซ์ขนาดนั้น ๆ โดยใช้เลขสุ่มจาก 0 ถึง 9 และตรวจสอบว่าเมทริกซ์ที่สร้างขึ้นนั้นเป็นเมทริกซ์สมมาตรหรือไม่",
        "content_snippet": "# โปรแกรมที่รับขนาดของเมทริกซ์จากผู้ใช้และสร้างเมทริกซ์ขนาดนั้น ๆ โดยใช้เลขสุ่มจาก 0 ถึง 9 และตรวจสอบว่าเมทริกซ์ที่สร้างขึ้นนั้นเป็นเมทริกซ์สมมาตรหรือไม่\nimport random\n\nprint(\"=\" * 80)\nsize = int(input(\"Enter the size of the square matrix: \"))\n\nif size > 3:\n    print(\"!!! Error: Maximum supported size is 3x3 !!!\\n\")\nelse:\n    matrix = [[random.randint(0, 9) for _ in range(size)] for _ in range(size)]\n    print(f\"Matrix: {matrix}\")\n\n    is_symmetric = all(matrix[i][j] == matrix[j][i] for i in range(size) for j in range(size))\n    print(\"Matrix is symmetric.\" if is_symmetric else \"Matrix is not symmetric.\")\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับด้านแบบมีขอบและช่องว่างตรงกลาง.py",
        "description": "# Drawing a reversed right triangle with background colors",
        "content_snippet": "# Drawing a reversed right triangle with background colors\nwhile True:\n    height = int(input(\"Enter the height of the triangle (0 to quit): \"))\n    if height == 0:\n        break\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        stars = '\\033[44m' + '*' * i + '\\033[0m'\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "เกมทายเลขคู่อันดับ.py",
        "description": "# โปรแกรมทายตัวเลข",
        "content_snippet": "# โปรแกรมทายตัวเลข\n# เกมให้ผู้เล่นทายตัวเลขตั้งแต่ 1 ถึง 100 โดยระบบจะบอกว่าคู่หรือคี่และให้คำใบ้\"\nimport random\n\n# สุ่มตัวเลขเป้าหมาย\nnumber = random.randint(1, 100)\nattempts = 0\n\n# เริ่มเกม\nprint(\"เกมทายตัวเลข (1-100): ระบบจะบอกว่าคู่หรือคี่และให้คำใบ้\")\nwhile True:\n    guess = int(input(\"ทายตัวเลขของคุณ: \"))\n    attempts += 1\n    if guess < number:\n        print(\"ตัวเลขต่ำเกินไป! และเป็น\", \"คู่\" if guess % 2 == 0 else \"คี่\")\n    elif guess > number:\n        print(\"ตัวเลขสูงเกินไป! และเป็น\", \"คู่\" if guess % 2 == 0 else \"คี่\")\n    else:\n        print(f\"คุณทายถูกต้อง! ตัวเลขคือ {number} ใช้เวลา {attempts} ครั้ง\")\n        break\n"
    },
    {
        "filename": "วิเคราะห์คะแนนเฉลี่ย.py",
        "description": "# โปรแกรมคำนวณค่าเฉลี่ยคะแนน และหาคะแนนสูงสุดและต่ำสุดจากคะแนนที่ผู้ใช้ใส่เข้ามา",
        "content_snippet": "# โปรแกรมคำนวณค่าเฉลี่ยคะแนน และหาคะแนนสูงสุดและต่ำสุดจากคะแนนที่ผู้ใช้ใส่เข้ามา\ndef calculate_average(scores):\n    # คำนวณค่าเฉลี่ย\n    return sum(scores) / len(scores)\n\n\ndef find_highest_and_lowest(scores):\n    # หาค่าคะแนนสูงสุดและต่ำสุด\n    return max(scores), min(scores)\n\n\n# รับข้อมูลคะแนนจากผู้ใช้\nscores = list(map(float, input(\"ใส่คะแนนที่ได้รับ (คั่นด้วยช่องว่าง): \").split()))\n\n\n# คำนวณและแสดงผล\naverage = calculate_average(scores)\nhighest, lowest = find_highest_and_lowest(scores)\nprint(f\"ค่าเฉลี่ย: {average:.2f}, สูงสุด: {highest}, ต่ำสุด: {lowest}\")\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมด้านเท่าแบบกลวง (Hollow Equilateral Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of hollow equilateral triangle: \"))\n\n    if height == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n\n    # วาดสามเหลี่ยมด้านเท่าแบบกลวง\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)  # ช่องว่างด้านซ้าย\n        if i == 1:  # แถวแรกมีแค่ *\n            stars = '*'\n        elif i == height:  # แถวสุดท้ายเต็มแถว\n            stars = '*' * (2 * i - 1)\n        else:  # แถวอื่นๆ จะเป็นแบบกลวง\n            stars = '*' + ' ' * (2 * i - 3) + '*'\n        print(spaces + stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับด้านโดยมีตัวเลขเพิ่มขึ้นในแต่ละแถว.py",
        "description": "# Drawing a reversed right triangle with increasing numbers in each row",
        "content_snippet": "# Drawing a reversed right triangle with increasing numbers in each row\nwhile True:\n    height = int(input(\"Enter the height of the triangle (0 to quit): \"))\n    if height == 0:\n        break\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        stars = ''.join(str(j % 10) for j in range(1, i + 1))\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "(XII)เพิ่มโหมดระบุช่วงตัวเลข.py",
        "description": "# โปรแกรมแปลงตัวเลขเป็น Roman Numerals และแปลง Roman Numerals เป็นตัวเลข",
        "content_snippet": "# โปรแกรมแปลงตัวเลขเป็น Roman Numerals และแปลง Roman Numerals เป็นตัวเลข\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\ndef convert_range_to_roman(start, end):\n    \"\"\"แปลงช่วงตัวเลขเป็น Roman Numerals\"\"\"\n    if start > end:\n        return \"Invalid range. Start number must be less than or equal to end number.\"\n    roman_list = {i: int_to_roman(i) for i in range(start, end + 1)}\n    return roman_list\n\n\n# เพิ่มโหมดการแปลงช่วงตัวเลข\nwhile True:\n    print(\"\\nRoman Numeral Converter (With Range Conversion)\")\n    print(\"1. Convert single number to Roman numeral\")\n    print(\"2. Convert Roman numeral to number\")\n    print(\"3. Convert range of numbers to Roman numerals\")\n    print(\"4. Exit\")\n    \n    choice = input(\"Choose an option (1/2/3/4): \")\n    \n    if choice == \"1\":\n        try:\n            number = int(input(\"Enter a number (1 - 1,000,000): \"))\n            print(f\"The Roman numeral of {number} is: {int_to_roman(number)}\")\n        except ValueError:\n            print(\"Please enter a valid number.\")\n    \n    elif choice == \"2\":\n        roman = input(\"Enter a Roman numeral: \").upper()\n        result = roman_to_int(roman)\n        print(f\"The number of Roman numeral '{roman}' is: {result}\")\n    \n    elif choice == \"3\":\n        try:\n            start = int(input(\"Enter the start number: \"))\n            end = int(input(\"Enter the end number: \"))\n            roman_range = convert_range_to_roman(start, end)\n            print(\"Roman numerals in the range:\")\n            for num, roman in roman_range.items():\n                print(f\"{num}: {roman}\")\n        except ValueError:\n            print(\"Please enter valid numbers.\")\n    \n    elif choice == \"4\":\n        print(\"Exiting the converter. Goodbye!\")\n        break\n    \n    else:\n        print(\"Invalid option. Please choose again.\")\n"
    },
    {
        "filename": "เกมควิซคณิตศาสตร์.py",
        "description": "# โปรแกรมสุ่มโจทย์คณิตศาสตร์ให้ผู้เล่นตอบ",
        "content_snippet": "# โปรแกรมสุ่มโจทย์คณิตศาสตร์ให้ผู้เล่นตอบ\n#เกมสุ่มโจทย์คณิตศาสตร์ให้ผู้เล่นตอบ\nimport random\n\ndef generate_question():\n    num1 = random.randint(1, 10)\n    num2 = random.randint(1, 10)\n    operation = random.choice(['+', '-', '*'])\n    question = f\"{num1} {operation} {num2}\"\n    answer = eval(question)\n    return question, answer\n\ndef play_math_quiz(rounds=5):\n    print(\"เริ่มเกมควิซคณิตศาสตร์!\")\n    score = 0\n    for _ in range(rounds):\n        question, correct_answer = generate_question()\n        print(f\"โจทย์: {question}\")\n        user_answer = int(input(\"คำตอบของคุณ: \"))\n        if user_answer == correct_answer:\n            print(\"ถูกต้อง!\")\n            score += 1\n        else:\n            print(f\"ผิด! คำตอบที่ถูกต้องคือ {correct_answer}\")\n    print(f\"คะแนนรวมของคุณคือ: {score}/{rounds}\")\n\n# ตัวอย่างการใช้งาน\nplay_math_quiz()"
    },
    {
        "filename": "สร้างกราฟแท่ง.py",
        "description": "# โปรแกรมสร้างกราฟแท่งยอดขายสินค้า",
        "content_snippet": "# โปรแกรมสร้างกราฟแท่งยอดขายสินค้า\nimport matplotlib.pyplot as plt\n\ndef plot_bar_chart(categories, values):\n    # สร้างกราฟแท่ง\n    plt.bar(categories, values)\n    plt.title(\"กราฟแท่งยอดขายสินค้า\")\n    plt.xlabel(\"ประเภทสินค้า\")\n    plt.ylabel(\"ยอดขาย\")\n    plt.show()\n\n# ตัวอย่างการใช้งาน\ncategories = [\"สินค้า A\", \"สินค้า B\", \"สินค้า C\"]\nvalues = [150, 200, 300]\nplot_bar_chart(categories, values)\n"
    },
    {
        "filename": "(XIII)AlternatingGuessingGame(PlayervsPC).py",
        "description": "# โปรแกรมเกมทายตัวเลขที่ผู้เล่นและ PC สลับกันทาย ใครทายถูกก่อนชนะ",
        "content_snippet": "# โปรแกรมเกมทายตัวเลขที่ผู้เล่นและ PC สลับกันทาย ใครทายถูกก่อนชนะ\nimport random\n\ndef alternating_guessing_game():\n    # เกมที่ผู้เล่นและ PC สลับกันทาย ใครทายถูกก่อนชนะ\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    attempts = 10 # จำนวนรอบที่ให้ทาย\n\n    print(\"\\n***** Alternating Guessing Game (Player vs PC) *****\")\n    print(\"Take turns with the PC to guess the number.\\n\")\n    \n    player_low, player_high = 1, 100 # ช่วงของตัวเลขที่ผู้เล่นสามารถทายได้\n    pc_low, pc_high = 1, 100 # ช่วงของตัวเลขที่ PC สามารถทายได้\n\n    for round_num in range(attempts): # วนลูปจนครบจำนวนรอบ\n        print(f\"\\nRound {round_num + 1}\") # แสดงรอบที่ทาย\n        \n        # Player's turn\n        print(\"Your turn:\")\n        player_guess = int(input(f\"Guess a number ({player_low}-{player_high}): \")) # ผู้เล่นทาย\n        if player_guess == secret_number: # ถ้าทายถูก\n            print(f\"Congratulations! You guessed the secret number {secret_number}. You win!\")\n            return\n        elif player_guess < secret_number: # ตรวจสอบว่าเดาน้อยเกินไปหรือมากเกินไป\n            print(\"Too low!\")\n            player_low = max(player_low, player_guess + 1) # ปรับช่วงของตัวเลขที่ผู้เล่นสามารถทายได้\n        else:\n            print(\"Too high!\")\n            player_high = min(player_high, player_guess - 1) # ปรับช่วงของตัวเลขที่ผู้เล่นสามารถทายได้\n        \n        # PC's turn\n        print(\"\\nPC's turn:\")\n        pc_guess = random.randint(pc_low, pc_high) # PC ทาย\n        print(f\"PC guesses: {pc_guess}\") # แสดงการทายของ PC\n        if pc_guess == secret_number:   # ถ้าทายถูก\n            print(f\"The PC guessed the secret number {secret_number}. PC wins!\")\n            return\n        elif pc_guess < secret_number: # ตรวจสอบว่าเดาน้อยเกินไปหรือมากเกินไป\n            print(\"PC's guess is too low!\")\n            pc_low = max(pc_low, pc_guess + 1)\n        else: # ตรวจสอบว่าเดาน้อยเกินไปหรือมากเกินไป \n            print(\"PC's guess is too high!\")\n            pc_high = min(pc_high, pc_guess - 1)\n\n    print(f\"\\nNo one guessed the secret number. The number was {secret_number}. It's a draw!\")\n\nalternating_guessing_game()\n"
    },
    {
        "filename": "สร้างกราฟเส้นหลายเส้น.py",
        "description": "#โปรแกรมสร้างกราฟเส้นหลายเส้นในกราฟเดียว",
        "content_snippet": "#โปรแกรมสร้างกราฟเส้นหลายเส้นในกราฟเดียว\nimport matplotlib.pyplot as plt\n\ndef plot_multiple_lines(data_sets, labels, x_label, y_label, title):\n    for data, label in zip(data_sets, labels):\n        plt.plot(data, label=label, marker='o')\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.title(title)\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n# ตัวอย่างการใช้งาน\ndata_sets = [\n    [10, 20, 30, 40, 50],\n    [15, 25, 35, 45, 55],\n    [12, 22, 32, 42, 52]\n]\nlabels = [\"ชุดที่ 1\", \"ชุดที่ 2\", \"ชุดที่ 3\"]\nplot_multiple_lines(data_sets, labels, \"เวลา\", \"ค่า\", \"กราฟเปรียบเทียบหลายชุด\")"
    },
    {
        "filename": "เพิ่มของลดของ_lv3(III).py",
        "description": "# โปรแกรมจัดการธุรกิจ",
        "content_snippet": "# โปรแกรมจัดการธุรกิจ\nimport sqlite3\nfrom datetime import datetime\n\n# ========================= Database Setup ========================= #\ndef setup_database():\n    #ตั้งค่าฐานข้อมูล SQLite\n    conn = sqlite3.connect('business.db')\n    cursor = conn.cursor()\n\n    # ตารางสินค้า\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS products (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL UNIQUE,\n            price REAL NOT NULL,\n            quantity INTEGER NOT NULL\n        )\n    ''')\n\n    # ตารางคำสั่งซื้อ\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS orders (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            customer_name TEXT NOT NULL,\n            total REAL NOT NULL,\n            date TEXT NOT NULL\n        )\n    ''')\n\n    # รายละเอียดคำสั่งซื้อ\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS order_details (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            order_id INTEGER,\n            product_name TEXT,\n            quantity INTEGER,\n            price REAL,\n            FOREIGN KEY (order_id) REFERENCES orders(id)\n        )\n    ''')\n\n    conn.commit()\n    conn.close()\n\n# ========================= CRUD Functions ========================= #\ndef add_product(name, price, quantity):\n    #เพิ่มสินค้าใหม่\n    conn = sqlite3.connect('business.db')\n    cursor = conn.cursor()\n    try:\n        cursor.execute(\"INSERT INTO products (name, price, quantity) VALUES (?, ?, ?)\", (name, price, quantity))\n        conn.commit()\n        print(f\"Product '{name}' added successfully.\")\n    except sqlite3.IntegrityError:\n        print(f\"Product '{name}' already exists.\")\n    finally:\n        conn.close()\n\ndef view_products():\n    #แสดงรายการสินค้า\n    conn = sqlite3.connect('business.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT * FROM products\")\n    products = cursor.fetchall()\n    conn.close()\n\n    if products:\n        print(f\"{'ID':<5}{'Name':<20}{'Price':<10}{'Quantity':<10}\")\n        print('-' * 45)\n        for product in products:\n            print(f\"{product[0]:<5}{product[1]:<20}{product[2]:<10.2f}{product[3]:<10}\")\n    else:\n        print(\"No products available.\")\n\ndef update_stock(product_name, quantity_sold):\n    #ลดจำนวนสต็อกสินค้าหลังการขาย\n    conn = sqlite3.connect('business.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT quantity FROM products WHERE name = ?\", (product_name,))\n    result = cursor.fetchone()\n\n    if result and result[0] >= quantity_sold:\n        cursor.execute(\"UPDATE products SET quantity = quantity - ? WHERE name = ?\", (quantity_sold, product_name))\n        conn.commit()\n        print(f\"Stock updated for '{product_name}'.\")\n    else:\n        print(f\"Not enough stock for '{product_name}'.\")\n    conn.close()\n\n# ========================= Order Management ========================= #\ndef create_order(customer_name, items):\n    #สร้างคำสั่งซื้อใหม่\n    #param customer_name: ชื่อลูกค้า\n    #param items: รายการสินค้า {ชื่อสินค้า: จำนวน}\n    conn = sqlite3.connect('business.db')\n    cursor = conn.cursor()\n\n    total = 0\n    for product_name, quantity in items.items():\n        cursor.execute(\"SELECT price, quantity FROM products WHERE name = ?\", (product_name,))\n        product = cursor.fetchone()\n        if not product:\n            print(f\"Product '{product_name}' does not exist.\")\n            conn.close()\n            return\n        elif product[1] < quantity:\n            print(f\"Not enough stock for '{product_name}'.\")\n            conn.close()\n            return\n        total += product[0] * quantity\n\n    # สร้างคำสั่งซื้อใหม่\n    order_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    cursor.execute(\"INSERT INTO orders (customer_name, total, date) VALUES (?, ?, ?)\", (customer_name, total, order_date))\n    order_id = cursor.lastrowid\n\n    # เพิ่มรายละเอียดคำสั่งซื้อ\n    for product_name, quantity in items.items():\n        cursor.execute(\"SELECT price FROM products WHERE name = ?\", (product_name,))\n        price = cursor.fetchone()[0]\n        cursor.execute(\"INSERT INTO order_details (order_id, product_name, quantity, price) VALUES (?, ?, ?, ?)\",\n                       (order_id, product_name, quantity, price))\n        # ลดจำนวนสต็อกสินค้า\n        update_stock(product_name, quantity)\n\n    conn.commit()\n    print(f\"Order created successfully for {customer_name}. Total: {total:.2f}\")\n    conn.close()\n\ndef view_orders():\n    #ดูคำสั่งซื้อทั้งหมด\n    conn = sqlite3.connect('business.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT * FROM orders\")\n    orders = cursor.fetchall()\n    conn.close()\n\n    if orders:\n        print(f\"{'ID':<5}{'Customer':<20}{'Total':<10}{'Date':<20}\")\n        print('-' * 55)\n        for order in orders:\n            print(f\"{order[0]:<5}{order[1]:<20}{order[2]:<10.2f}{order[3]:<20}\")\n    else:\n        print(\"No orders available.\")\n\n# ========================= Main Menu ========================= #\ndef main():\n    setup_database()\n    print(\"Welcome to the Business Management System!\")\n\n    while True:\n        print(\"\\nMenu:\")\n        print(\"1. Add Product\")\n        print(\"2. View Products\")\n        print(\"3. Create Order\")\n        print(\"4. View Orders\")\n        print(\"5. Quit\")\n\n        choice = input(\"Choose an option: \")\n        if choice == '1':\n            name = input(\"Enter product name: \")\n            price = float(input(\"Enter product price: \"))\n            quantity = int(input(\"Enter product quantity: \"))\n            add_product(name, price, quantity)\n        elif choice == '2':\n            view_products()\n        elif choice == '3':\n            customer_name = input(\"Enter customer name: \")\n            items = {}\n            while True:\n                product_name = input(\"Enter product name (or 'done' to finish): \")\n                if product_name.lower() == 'done':\n                    break\n                quantity = int(input(f\"Enter quantity for '{product_name}': \"))\n                items[product_name] = quantity\n            create_order(customer_name, items)\n        elif choice == '4':\n            view_orders()\n        elif choice == '5':\n            print(\"Exiting the program. Goodbye!\")\n            break\n        else:\n            print(\"Invalid choice. Please try again.\")\n\n# ========================= Start the Program ========================= #\nmain()\n"
    },
    {
        "filename": "คำนวณค่าเบี่ยงเบนมาตรฐาน.py",
        "description": "#โปรแกรมคำนวณค่าเบี่ยงเบนมาตรฐานจากข้อมูลที่ป้อน",
        "content_snippet": "#โปรแกรมคำนวณค่าเบี่ยงเบนมาตรฐานจากข้อมูลที่ป้อน\nimport math\n\ndef calculate_standard_deviation(data):\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / len(data)\n    return math.sqrt(variance)\n\n# รับข้อมูลจากผู้ใช้\ndata = list(map(float, input(\"ใส่ข้อมูลตัวเลข (คั่นด้วยช่องว่าง): \").split()))\nstd_dev = calculate_standard_deviation(data)\nprint(f\"ค่าเบี่ยงเบนมาตรฐานคือ: {std_dev:.2f}\")"
    },
    {
        "filename": "(XV)เพิ่มฟังก์ชันตรวจสอบข้อความที่เข้ารหัส.py",
        "description": "# โปรแกรมเข้ารหัสข้อความด้วยวิธี Caesar Cipher โดยใช้ key เป็นจำนวนเต็มบวกหรือลบ",
        "content_snippet": "# โปรแกรมเข้ารหัสข้อความด้วยวิธี Caesar Cipher โดยใช้ key เป็นจำนวนเต็มบวกหรือลบ\ndef is_valid_encrypted(text, key): # ฟังก์ชันตรวจสอบว่าข้อความที่ถูกเข้ารหัสสามารถถอดรหัสกลับได้หรือไม่\n    try:\n        # พยายามถอดรหัสข้อความ หากไม่เกิด Error แปลว่าเป็นข้อความที่ถูกต้อง\n        decrypted = secret_password(text, -key) # ถอดรหัสข้อความ\n        return True # ถ้าถอดรหัสได้สำเร็จแสดงว่าเป็นข้อความที่ถูกต้อง\n    except:\n        return False # ถ้าเกิด Error แสดงว่าเป็นข้อความที่ไม่ถูกต้อง\n\ndef secret_password(text, key): # ฟังก์ชันเข้ารหัสข้อความด้วยวิธี Caesar Cipher\n    result = \"\"\n    for char in text:\n        if char.isalpha(): # ตรวจสอบว่าเป็นตัวอักษรหรือไม่\n            shift_base = ord('A') if char.isupper() else ord('a') # ตรวจสอบว่าเป็นตัวพิมพ์ใหญ่หรือเล็ก\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base) # คำนวณตำแหน่งของตัวอักษรที่ถูกเข้ารหัส\n            result += shifted_char # ต่อค่าที่ถูกเข้ารหัสเข้ากับตัวแปร\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    # เข้ารหัสข้อความ\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    # ตรวจสอบว่าข้อความที่เข้ารหัสสามารถถอดกลับได้หรือไม่\n    if is_valid_encrypted(ciphertext, key):\n        print(\"The ciphertext is valid and can be decrypted!\")\n    else:\n        print(\"The ciphertext is invalid.\")\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(1)เพิ่มการตรวจสอบค่าที่ป้อนและการสร้างเมนูเลือกการดำเนินการ.py",
        "description": "# โปรแกรมสร้างเมทริกซ์และสามารถเลือกดำเนินการได้ 2 แบบ:",
        "content_snippet": "# โปรแกรมสร้างเมทริกซ์และสามารถเลือกดำเนินการได้ 2 แบบ: \n# 1. สร้างเมทริกซ์และหา Transpose \n# 2. สร้างเมทริกซ์และคำนวณ Determinant (เฉพาะกรณีเมทริกซ์สี่เหลี่ยมจัตุรัส)\nimport random\n\nprint(\"=\" * 80)\ntry:\n    rows = int(input(\"Enter a number of rows: \")) # รับขนาดของ Matrix\n    columns = int(input(\"Enter a number of columns: \")) # รับขนาดของ Matrix\nexcept ValueError: # กรณีป้อนข้อมูลผิดพลาด\n    print(\"Invalid input! Please enter integers only.\") # แสดงข้อความแจ้งเตือน\n    exit()\n\n# ตรวจสอบว่าขนาดอยู่ในขอบเขตที่กำหนด\nif rows < 1 or columns < 1:\n    print(\"!!! Number of rows and columns must be at least 1 !!!\") # แสดงข้อความแจ้งเตือน\n    exit()\n\n# เมนูการดำเนินการ\nprint(\"Choose an operation:\") \nprint(\"1. Generate matrix and transpose\")\nprint(\"2. Generate matrix and compute determinant (if square matrix)\")\nchoice = input(\"Enter your choice (1 or 2): \")\n\nif choice == \"1\": # กรณีเลือก 1\n    # สุ่มค่าจำนวนเต็มสำหรับ Matrix A\n    matrix_a = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)] # สร้าง Matrix แบบสุ่ม\n    print(f\"Matrix A [{rows}x{columns}]  : {matrix_a}\") # แสดง Matrix A\n\n    # คำนวณ Transpose\n    matrix_a_t = [[matrix_a[j][i] for j in range(rows)] for i in range(columns)]\n    print(f\"Transpose [{columns}x{rows}]: {matrix_a_t}\")\n\nelif choice == \"2\" and rows == columns:\n    # สุ่มค่าจำนวนเต็มสำหรับ Matrix A (ต้องเป็น Matrix สี่เหลี่ยมจัตุรัส)\n    matrix_a = [[random.randint(1, 9) for _ in range(rows)] for _ in range(rows)] # สร้าง Matrix แบบสุ่ม\n    print(f\"Matrix A [{rows}x{rows}]: {matrix_a}\") # แสดง Matrix A\n\n    # คำนวณ Determinant (เฉพาะกรณี 2x2 หรือ 3x3)\n    if rows == 2: # กรณี Matrix 2x2\n        det = matrix_a[0][0] * matrix_a[1][1] - matrix_a[0][1] * matrix_a[1][0] # คำนวณ Determinant ของ Matrix 2x2\n    elif rows == 3: # กรณี Matrix 3x3\n        det = (\n            matrix_a[0][0] * (matrix_a[1][1] * matrix_a[2][2] - matrix_a[1][2] * matrix_a[2][1])\n            - matrix_a[0][1] * (matrix_a[1][0] * matrix_a[2][2] - matrix_a[1][2] * matrix_a[2][0])\n            + matrix_a[0][2] * (matrix_a[1][0] * matrix_a[2][1] - matrix_a[1][1] * matrix_a[2][0])\n        )\n    else:\n        print(\"Determinant calculation for matrices larger than 3x3 is not implemented.\")\n        det = None # กำหนดค่า Determinant เป็น None\n\n    print(f\"Determinant of Matrix A: {det if det is not None else 'Unavailable'}\") # แสดงค่า Determinant หรือข้อความแจ้งเตือน\nelse:\n    print(\"Invalid choice or incompatible matrix size for determinant.\")"
    },
    {
        "filename": "(3)โปรแกรมรับค่าความสูง.py",
        "description": "# Drawing a reversed right triangle using '*'",
        "content_snippet": "# Drawing a reversed right triangle using '*'\nwhile True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of right triangle: \"))\n\n    # หากใส่ 0 จะออกจากโปรแกรม\n    if height == 0: # ถ้าความสูงเป็น 0\n        break\n\n    # วาดสามเหลี่ยมกลับด้านตามความสูงที่กำหนด\n    for i in range(1, height + 1): # วนลูปตามความสูง\n        spaces = ' ' * (height - i)  # ช่องว่างด้านซ้าย\n        if i == 1:  # แถวแรกมีแค่ *\n            stars = '*' # สร้างดาว\n        elif i == height:  # แถวสุดท้ายเต็มแถว\n            stars = '*' * i # สร้างดาวตามความสูง\n        else:  # แถวอื่นๆ มี * เว้นช่องว่างตรงกลาง\n            stars = '*' + ' ' * (i - 2) + '*' # สร้างดาวและช่องว่างตรงกลาง\n        print(spaces + stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมด้านเท่าแบบเพชรกลวง (Hollow Diamond).py",
        "description": "while True:",
        "content_snippet": "while True:\n    height = int(input(\"Enter the height of hollow diamond (must be odd): \"))\n\n    if height == 0:\n        break\n    if height % 2 == 0:\n        print(\"Height must be an odd number!\")\n        continue\n\n    for i in range(1, height + 1, 2):\n        spaces = ' ' * ((height - i) // 2)\n        if i == 1:\n            stars = '*'\n        else:\n            stars = '*' + ' ' * (i - 2) + '*'\n        print(spaces + stars)\n\n    for i in range(height - 2, 0, -2):\n        spaces = ' ' * ((height - i) // 2)\n        if i == 1:\n            stars = '*'\n        else:\n            stars = '*' + ' ' * (i - 2) + '*'\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "(XIII)โหมดคะแนน(เก็บคะแนนสำหรับการเดาที่ใกล้ที่สุด).py",
        "description": "# โปรแกรมเกมทายเลขที่มีการคิดคะแนน",
        "content_snippet": "# โปรแกรมเกมทายเลขที่มีการคิดคะแนน\nimport random\n\ndef scoring_guessing_game():\n    random_number = random.randint(1, 99) # สุ่มตัวเลข\n    attempts = 5 # จำนวนรอบที่ให้ทาย\n    low, high = 1, 99 # ช่วงของตัวเลขที่ให้ทาย\n    score = 100  # เริ่มต้นด้วยคะแนนเต็ม 100\n\n    print(\"***** Welcome to the Scoring Guessing Game *****\")\n\n    for attempt in range(attempts): # วนลูปจนครบจำนวนรอบ\n        print(f\"{'-'*21} round{attempt + 1} {'-'*21}\") # แสดงรอบที่เล่น\n        print(f\"Enter an integer from {low} to {high} : \", end=\"\") # แสดงช่วงของตัวเลขที่ให้ทาย\n        input_number = int(input()) # รับค่าที่ผู้เล่นทาย\n        \n        if input_number == random_number: # ถ้าทายถูก\n            print(\"#\" * 50)\n            print(\"   *** CONGRATURATION *** Your guess is correct  \")\n            print(f\"Your final score is {score}\")\n            print(\"#\" * 50)\n            return\n        else:\n            diff = abs(input_number - random_number) # คำนวณความต่างระหว่างตัวเลขที่ทายกับตัวเลขลับ\n            if diff <= 10: # ถ้าเดาใกล้\n                score -= 5  # หัก 5 คะแนนถ้าเดาใกล้\n                print(\"Close! But not quite.\")\n            else: # ถ้าเดาห่าง\n                score -= 10  # หัก 10 คะแนนถ้าเดาห่าง\n                print(\"Not even close!\")\n\n            if input_number < random_number: # ตรวจสอบว่าเดาน้อยเกินไปหรือมากเกินไป\n                print(\"Hint: Your guess is low\")\n                low = max(low, input_number + 1) \n            else:\n                print(\"Hint: Your guess is high\")\n                high = min(high, input_number - 1)\n\n    print(\"#\" * 50)\n    print(f\"!!!SORRY!!! The secret number is {random_number}\".center(50))\n    print(f\"Your final score is {score}\".center(50))\n    print(\"#\" * 50)\n\nscoring_guessing_game()\n"
    },
    {
        "filename": "(IX)เพิ่มลวดลายภายในสี่เหลี่ยม.py",
        "description": "# โค้ดสร้างสี่เหลี่ยมที่มีลวดลายเป็นจุดไขว้ด้านใน",
        "content_snippet": "# โค้ดสร้างสี่เหลี่ยมที่มีลวดลายเป็นจุดไขว้ด้านใน\nprint('---------- Drawing patterned squares ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the size (at least 5): \"))\n\n    if size == 0:\n        break\n    elif size >= 5:\n        for i in range(size):\n            if i == 0 or i == size - 1:  # ขอบบน/ล่าง\n                print(\"#\" * size)\n            else:\n                row = [\" \"] * size\n                row[0] = \"#\"\n                row[size - 1] = \"#\"\n                row[i] = \"#\"\n                row[size - i - 1] = \"#\"\n                print(\"\".join(row))\n    else:\n        print(\"Invalid input. Please enter a size >= 5.\")\n"
    },
    {
        "filename": "(XIII)Letter-RangeGuessingGame.py",
        "description": "# โปรแกรมเกมทายช่วงตัวเลขที่ซ่อนอยู่",
        "content_snippet": "# โปรแกรมเกมทายช่วงตัวเลขที่ซ่อนอยู่\n# ผู้เล่นต้องเดาช่วงของตัวเลขที่ซ่อนอยู่ โดยมีช่วงทั้งหมด 4 ช่วง (A, B, C, D)\nimport random\n\ndef letter_range_game():\n    # เกมที่ผู้เล่นต้องเดาช่วงของตัวเลขที่ซ่อนอยู่\n    secret_number = random.randint(1, 100)\n    attempts = 7 # จำนวนรอบที่ให้ทาย\n    ranges = {'A': (1, 25), 'B': (26, 50), 'C': (51, 75), 'D': (76, 100)} # ช่วงที่เป็นไปได้\n\n    print(\"\\n***** Letter-Range Guessing Game *****\")\n    print(\"Guess the range where the secret number belongs (A/B/C/D).\")\n\n    for _ in range(attempts):\n        guess = input(\"Enter your range guess (A/B/C/D): \").upper()\n\n        if guess in ranges: # ตรวจสอบว่าช่วงที่เลือกถูกต้องหรือไม่\n            low, high = ranges[guess] # กำหนดช่วงที่เลือก\n            if low <= secret_number <= high: # ตรวจสอบว่าตัวเลขอยู่ในช่วงที่เลือกหรือไม่\n                print(f\"Correct! The secret number {secret_number} is in range {guess}.\")\n                return\n            else:\n                print(f\"Wrong! The secret number is not in range {guess}.\")\n        else:\n            print(\"Invalid range. Choose A, B, C, or D.\")\n\n    print(f\"\\nGame over! The secret number was {secret_number}.\")\n\nletter_range_game()\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับด้านโดยใช้ตัวเลขแต่ลดขนาดลงในแต่ละแถว.py",
        "description": "# Drawing a reversed right triangle with decreasing numbers in each row",
        "content_snippet": "# Drawing a reversed right triangle with decreasing numbers in each row\nwhile True:\n    height = int(input(\"Enter the height of the triangle (0 to quit): \"))\n    if height == 0:\n        break\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        stars = ''.join(str(j % 10) for j in range(height - i + 1, height + 1))\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "(XI)Factorialแบบลดลง(Reverse).py",
        "description": "# โปรแกรมคำนวณ Factorial แบบเรียงลำดับจาก n ลงมาถึง 1 และย้อนกลับ",
        "content_snippet": "# โปรแกรมคำนวณ Factorial แบบเรียงลำดับจาก n ลงมาถึง 1 และย้อนกลับ\n# คำนวณ Factorial แบบเรียงลำดับจาก n ลงมาถึง 1\nprint('Generating Reverse Factorial series')\nn = int(input(\"Enter 'n' for Reverse Factorial series: \"))\nresult = 1\nreverse_factorial_list = []\n\n# คำนวณ Factorial ทั้งหมดก่อนแล้วค่อยย้อนกลับ\nfor i in range(1, n+1):\n    result *= i\n\n# Loop ย้อนกลับ\nfor i in range(n, 0, -1):\n    reverse_factorial_list.append(result)\n    result //= i  # หารกลับเพื่อลด Factorial\n\n# แสดงผล\nprint(f\"Reverse Factorial series: {reverse_factorial_list}\\n\")\n"
    },
    {
        "filename": "สร้างกราฟแท่งและกราฟเส้นในกราฟเดียว.py",
        "description": "#โปรแกรมสร้างกราฟแท่งและกราฟเส้นในกราฟเดียวเพื่อเปรียบเทียบข้อมูล",
        "content_snippet": "#โปรแกรมสร้างกราฟแท่งและกราฟเส้นในกราฟเดียวเพื่อเปรียบเทียบข้อมูล\nimport matplotlib.pyplot as plt\n\ndef plot_bar_and_line(categories, bar_values, line_values, bar_label, line_label):\n    fig, ax1 = plt.subplots()\n\n    # กราฟแท่ง\n    ax1.bar(categories, bar_values, color='b', alpha=0.6, label=bar_label)\n    ax1.set_xlabel('หมวดหมู่')\n    ax1.set_ylabel('ค่ากราฟแท่ง', color='b')\n\n    # กราฟเส้น\n    ax2 = ax1.twinx()\n    ax2.plot(categories, line_values, color='r', marker='o', label=line_label)\n    ax2.set_ylabel('ค่ากราฟเส้น', color='r')\n\n    # แสดงกราฟ\n    fig.tight_layout()\n    plt.title(\"กราฟแท่งและกราฟเส้นในกราฟเดียว\")\n    plt.show()\n\n# ตัวอย่างการใช้งาน\ncategories = [\"หมวด A\", \"หมวด B\", \"หมวด C\", \"หมวด D\"]\nbar_values = [20, 35, 30, 35]\nline_values = [25, 32, 34, 20]\nplot_bar_and_line(categories, bar_values, line_values, \"ยอดขาย\", \"กำไร\")"
    },
    {
        "filename": "เกมทายคำศัพท์จากคำใบ้.py",
        "description": "# โปรแกรมทายคำศัพท์จากคำใบ้",
        "content_snippet": "# โปรแกรมทายคำศัพท์จากคำใบ้\n# เกมทายคำศัพท์จากคำใบ้\ndef play_word_guessing_game(word, hint):\n    print(\"เริ่มเกม!\")\n    print(f\"คำใบ้: {hint}\")\n    attempts = 3  # จำนวนครั้งที่ผู้เล่นสามารถเดาได้\n\n    while attempts > 0:\n        guess = input(\"ทายคำศัพท์: \").lower()\n        if guess == word:\n            print(\"ยินดีด้วย! คุณตอบถูกต้อง\")\n            return\n        else:\n            attempts -= 1\n            print(f\"ผิด! เหลือโอกาส {attempts} ครั้ง\")\n    \n    print(f\"เสียใจด้วย! คำที่ถูกต้องคือ '{word}'\")\n\n# ตัวอย่างการใช้งาน\nword_to_guess = \"python\"\nhint_for_word = \"ภาษาโปรแกรมยอดนิยม\"\nplay_word_guessing_game(word_to_guess, hint_for_word)"
    },
    {
        "filename": "เกมทดสอบความจำ.py",
        "description": "# โปรแกรมทดสอบความจำ",
        "content_snippet": "# โปรแกรมทดสอบความจำ\n#เกมให้ผู้เล่นจดจำและเรียงลำดับตัวเลขที่แสดงในเวลาจำกัด\nimport random\nimport time\n\ndef memory_test_game():\n    print(\"เกมทดสอบความจำ!\")\n    sequence = [random.randint(1, 9) for _ in range(5)]\n    print(\"ตัวเลขที่จะต้องจำ:\")\n    print(sequence)\n    time.sleep(3)\n    print(\"\\033[H\\033[J\")  # เคลียร์หน้าจอ\n    user_input = input(\"ใส่ตัวเลขที่คุณจำได้ (คั่นด้วยช่องว่าง): \")\n    user_sequence = list(map(int, user_input.split()))\n    if user_sequence == sequence:\n        print(\"ยินดีด้วย! คุณจำได้ถูกต้อง\")\n    else:\n        print(f\"ผิด! ลำดับที่ถูกต้องคือ {sequence}\")\n\n# ตัวอย่างการใช้งาน\nmemory_test_game()"
    },
    {
        "filename": "(8)เพิ่มการคำนวณ Determinant (เฉพาะสำหรับ Matrix 2x2).py",
        "description": "# โปรแกรมคำนวณ Determinant ของ Matrix ขนาด 2x2",
        "content_snippet": "# โปรแกรมคำนวณ Determinant ของ Matrix ขนาด 2x2\nimport random\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows != 2 or columns != 2:\n    print(\"!!! Error: Determinant calculation only supports 2x2 matrices !!!\\n\")\nelse:\n    print(\"=\" * 80)\n    # สุ่มค่าจำนวนเต็ม 0-9 สำหรับ Matrix A\n    matrix_a = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]\n    print(f\"Matrix A [{rows}x{columns}]: {matrix_a}\")\n\n    # คำนวณ Determinant\n    determinant = matrix_a[0][0] * matrix_a[1][1] - matrix_a[0][1] * matrix_a[1][0]\n    print(f\"Determinant of Matrix A: {determinant}\")\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(VIII)ใช้collectionsCounterเพื่อวิเคราะห์ความถี่.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการใช้งาน collections.Counter ในการนับความถี่ของข้อมูลที่เป็น list",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการใช้งาน collections.Counter ในการนับความถี่ของข้อมูลที่เป็น list\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n            'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n            'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n            'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n            'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n            'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n            'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\nfrom collections import Counter\n\n# แบ่งข้อมูลออกเป็น sublists (เหมือนเดิม)\nsublists = [data_game[i:i+4] for i in range(0, len(data_game), 4)]\n\n# ดึงตัวอักษรทั้งหมด\nletters = [sublist[0] for sublist in sublists]\n\n# นับความถี่\nletter_counts = Counter(letters)\n\n# แสดงผลลัพธ์\nprint(\"Letter Frequency:\")\nfor letter, count in letter_counts.items():\n    print(f\"    {letter}: {count} times\")\n"
    },
    {
        "filename": "(4)โปรแกรมการทาย (Guessing)+secret_number.py",
        "description": "# โปรแกรมที่เขียนขึ้นมาเพื่อทดสอบการเขียนโปรแกรมเกี่ยวกับการทายตัวเลข",
        "content_snippet": "# โปรแกรมที่เขียนขึ้นมาเพื่อทดสอบการเขียนโปรแกรมเกี่ยวกับการทายตัวเลข\n#Bull Cow Game Clone\nimport random\n\ndef generate_secret_number(): #Generate a 4-digit secret number with unique digits.\n    \n    return random.sample(range(10), 4) \n\ndef calculate_hint(secret, guess): #Calculate MEN and WOMEN based on the guess.\n    men = sum(s == g for s, g in zip(secret, guess))\n    women = sum(g in secret for g in guess) - men\n    return men, women\n\n# Main program\nprint(\"------ Welcome to MEN and WOMEN number guessing game ------\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\n# Generate the secret number and display it\nsecret_number = generate_secret_number()\nprint(f\"Secret Number (for debugging): {''.join(map(str, secret_number))}\")\n\nattempts = 0\n\nwhile True:\n    user_input = input(\"Enter 4-digits number: \")\n\n    if user_input == \"0\":\n        print(\"Exiting the program.\")\n        break\n\n    if len(user_input) != 4 or not user_input.isdigit():\n        print(\"Invalid input. Please enter a 4-digit number.\")\n        continue\n\n    guess = list(map(int, user_input))\n    if len(set(guess)) != 4:\n        print(\"Digits must be unique. Try again.\")\n        continue\n\n    attempts += 1\n    men, women = calculate_hint(secret_number, guess)\n\n    print(f\"Hint: MEN = {men} and WOMEN = {women}\")\n\n    if men == 4:\n        print(f\"*** Congratulations *** Your guess is correct, after {attempts} times\")\n        break"
    },
    {
        "filename": "(XV)ใช้การเข้ารหัสร่วมกับเวลาปัจจุบัน.py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย key ที่ผสมกับเวลาปัจจุบัน",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย key ที่ผสมกับเวลาปัจจุบัน\n# โดยใช้ฟังก์ชัน secret_password(text, key) ที่รับข้อความและคีย์เป็นอาร์กิวเมนต์\nfrom datetime import datetime\n\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    time_based_key = datetime.now().second % 26  # ใช้วินาทีเป็น key เสริม\n    print(f\"Time-based key is: {time_based_key}\")\n    \n    key = int(input(\"Enter secret key (Number Only): \"))\n    combined_key = key + time_based_key\n\n    # เข้ารหัสด้วย key ผสม\n    ciphertext = secret_password(plaintext, combined_key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    # ถอดรหัสด้วยการใช้ key ผสมกลับ\n    decrypted_text = secret_password(ciphertext, -(combined_key))\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(8)เพิ่มการคำนวณ Scalar Multiplication.py",
        "description": "# โปรแกรมคูณเมทริกซ์ด้วยสคาลาร์",
        "content_snippet": "# โปรแกรมคูณเมทริกซ์ด้วยสคาลาร์\nimport random\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows > 3 or columns > 3:\n    print(\"!!! Error: Maximum supported size is 3x3 !!!\\n\")\nelse:\n    scalar = int(input(\"Enter a scalar value: \"))\n    matrix_a = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]\n    print(f\"Matrix A: {matrix_a}\")\n\n    scaled_matrix = [[scalar * matrix_a[i][j] for j in range(columns)] for i in range(rows)]\n    print(f\"Scalar Multiplication Result: {scaled_matrix}\")\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมมุมฉาก (Right Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of right triangle: \"))\n\n    if height == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n\n    # วาดสามเหลี่ยมมุมฉาก\n    for i in range(1, height + 1):\n        stars = '*' * i  # จำนวน * เพิ่มขึ้นทีละ 1 ในแต่ละแถว\n        print(stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "ประมวลผลข้อมูลเชิงตัวเลข.py",
        "description": "# โปรแกรมคำนวณคะแนนข้อความด้วย ASCII",
        "content_snippet": "# โปรแกรมคำนวณคะแนนข้อความด้วย ASCII\n# คำนวณคะแนนของข้อความแต่ละตัวโดยใช้ค่า ASCII ของตัวอักษร\n# ฟังก์ชันคำนวณคะแนนข้อความ\ns1 = \"madam and her racecar were at the radar station.\"\ns2 = \"They found a civic parked next to a kayak.\"\ns3 = \"Wow, what a day!\"\n    \ndef calculate_ascii_score(text):\n    #คำนวณคะแนนจาก ASCII\n    #- text: ข้อความที่ต้องการคำนวณ\n    return sum(ord(char) for char in text if char.isalpha())\n\n# คำนวณคะแนนสำหรับ s1, s2, s3\nscore_s1 = calculate_ascii_score(s1)\nscore_s2 = calculate_ascii_score(s2)\nscore_s3 = calculate_ascii_score(s3)\n\nprint(f\"ASCII Score for s1: {score_s1}\")\nprint(f\"ASCII Score for s2: {score_s2}\")\nprint(f\"ASCII Score for s3: {score_s3}\")\nprint(f\"Total ASCII Score: {score_s1 + score_s2 + score_s3}\")"
    },
    {
        "filename": "(6)เพิ่มระบบแปลง ciphertext เป็น Base64.py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้เข้ารหัสและถอดรหัสข้อความด้วย XOR และใช้ Base64 เข้ารหัส ciphertext",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้เข้ารหัสและถอดรหัสข้อความด้วย XOR และใช้ Base64 เข้ารหัส ciphertext\nimport base64\n\ndef encode_base64(data):\n    \"\"\"เข้ารหัส Base64\"\"\"\n    return base64.b64encode(data.encode()).decode()\n\ndef decode_base64(data):\n    \"\"\"ถอดรหัส Base64\"\"\"\n    return base64.b64decode(data.encode()).decode()\n\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef encrypt(plaintext, secret_key):\n    \"\"\"เข้ารหัสข้อความด้วย XOR\"\"\"\n    ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n    return ciphertext\n\ndef decrypt(ciphertext, secret_key):\n    \"\"\"ถอดรหัสข้อความด้วย XOR\"\"\"\n    plaintext = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, secret_key))\n    return plaintext\n\n# Main Program\nprint(\"------------- Encryption and Decryption Program -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\nsecret_key = input(\"Enter your secret key: \")\n\nadjusted_key = adjust_key_length(plaintext, secret_key)\nciphertext = encrypt(plaintext, adjusted_key)\n\nencoded_ciphertext = encode_base64(ciphertext)  # เข้ารหัส Base64\nprint(f\"Ciphertext (Base64): {encoded_ciphertext}\")\n\ndecoded_ciphertext = decode_base64(encoded_ciphertext)  # ถอดรหัส Base64\ndecrypted_text = decrypt(decoded_ciphertext, adjusted_key)\nprint(f\"The decryption results: {decrypted_text}\\n\")"
    },
    {
        "filename": "(XIII)Time-LimitedGuessingGame.py",
        "description": "# โปรแกรมเกมทายตัวเลขที่จำกัดเวลา",
        "content_snippet": "# โปรแกรมเกมทายตัวเลขที่จำกัดเวลา\n# โดยให้ผู้เล่นทายตัวเลขภายในเวลาที่กำหนด\nimport random\nimport time\n\ndef time_limited_game():\n    # เกมทายตัวเลขที่จำกัดเวลา\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    time_limit = 30  # 30 วินาที\n\n    print(\"\\n***** Time-Limited Guessing Game *****\") \n    print(f\"You have {time_limit} seconds to guess the number.\\n\")\n    start_time = time.time()\n\n    while time.time() - start_time < time_limit: # วนลูปจนก\n        guess = int(input(\"Enter your guess: \"))\n\n        if guess == secret_number:\n            print(f\"Congratulations! You guessed the number {secret_number}.\") \n            return\n        elif guess < secret_number:\n            print(\"Your guess is too low.\")\n        else:\n            print(\"Your guess is too high.\")\n\n    print(f\"\\nTime's up! The secret number was {secret_number}.\")\n\ntime_limited_game() # เรียกใช้ฟังก์ชัน\n"
    },
    {
        "filename": "แปลงข้อมูล_JSON_เป็น_Python_Object.py",
        "description": "# โปรแกรมตัวอย่างการใช้งาน JSON ใน Python",
        "content_snippet": "# โปรแกรมตัวอย่างการใช้งาน JSON ใน Python\nimport json\n\ndef read_json_file(filename):\n    # อ่านข้อมูลจากไฟล์ JSON\n    try:\n        with open(filename, 'r', encoding='utf-8') as file:\n            data = json.load(file)\n            return data\n    except FileNotFoundError:\n        print(f\"ไม่พบไฟล์ {filename}\")\n        return None\n\n# ตัวอย่างการใช้งาน\nfilename = \"example.json\"\ndata = {\n    \"ชื่อ\": \"เอิร์ธ\",\n    \"อายุ\": 25,\n    \"อาชีพ\": \"ผีบ้า\"\n}\n\n# บันทึกข้อมูลตัวอย่างลงไฟล์ JSON\nwith open(filename, 'w', encoding='utf-8') as file:\n    json.dump(data, file, indent=4)\n\n# อ่านข้อมูลจากไฟล์ JSON\nloaded_data = read_json_file(filename)\nif loaded_data:\n    print(\"ข้อมูลในไฟล์ JSON:\")\n    print(loaded_data)\n"
    },
    {
        "filename": "(XII)เพิ่มการแปลงโดยใช้ระบบไฟล์อ่านเขียนข้อมูล.py",
        "description": "# โปรแกรมแปลงตัวเลขเป็น Roman Numeral และกลับกัน",
        "content_snippet": "# โปรแกรมแปลงตัวเลขเป็น Roman Numeral และกลับกัน\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\ndef write_roman_to_file(number, filename=\"roman_output.txt\"):\n    \"\"\"แปลงตัวเลขเป็น Roman Numeral และบันทึกในไฟล์\"\"\"\n    roman = int_to_roman(number)\n    with open(filename, \"w\") as file:\n        file.write(f\"Number: {number}\\nRoman Numeral: {roman}\")\n    return f\"Result written to {filename}\"\n\n\ndef read_roman_from_file(filename=\"roman_input.txt\"):\n    \"\"\"อ่านไฟล์ที่มี Roman Numeral และแปลงกลับเป็นตัวเลข\"\"\"\n    try:\n        with open(filename, \"r\") as file:\n            roman = file.read().strip()\n            result = roman_to_int(roman)\n            return f\"Roman: {roman}\\nNumber: {result}\"\n    except FileNotFoundError:\n        return f\"File {filename} not found.\"\n    except Exception as e:\n        return f\"An error occurred: {e}\"\n\n\n# โหมดไฟล์\nwhile True:\n    print(\"\\nRoman Numeral Converter (File Mode)\")\n    print(\"1. Convert number to Roman numeral and save to file\")\n    print(\"2. Read Roman numeral from file and convert to number\")\n    print(\"3. Exit\")\n    \n    choice = input(\"Choose an option (1/2/3): \")\n    \n    if choice == \"1\":\n        try:\n            number = int(input(\"Enter a number (1 - 1,000,000): \"))\n            print(write_roman_to_file(number))\n        except ValueError:\n            print(\"Please enter a valid number.\")\n    \n    elif choice == \"2\":\n        filename = input(\"Enter the filename to read Roman numeral from: \")\n        print(read_roman_from_file(filename))\n    \n    elif choice == \"3\":\n        print(\"Exiting the converter. Goodbye!\")\n        break\n    \n    else:\n        print(\"Invalid option. Please choose again.\")\n"
    },
    {
        "filename": "(X)เพิ่มระบบตรวจสอบห้ามมีช่องว่าง.py",
        "description": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน\n# โดยรหัสผ่านจะต้องมีความยาวระหว่าง 8-16 ตัวอักษร\nimport re\n\nwhile True:\n    password = input(\"Set your password:\")\n\n    if \" \" in password:  # Check for spaces\n        print(\"!!!ERROR!!! The password must not contain spaces\\n\")\n        continue\n\n    if 8 <= len(password) <= 16:\n        if (re.search(r'[A-Z]', password) and\n            re.search(r'[a-z]', password) and\n            re.search(r'[0-9]', password) and\n            re.search(r'[!@#$%^&*]', password)):\n            print(\":-) Your password is valid and secure (-: \")\n            break\n        else:\n            print(\"!!!ERROR!!! Your password does not meet the complexity requirements\\n\")\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "สร้างกราฟพื้นผิว_3_มิติ.py",
        "description": "#โปรแกรมสร้างกราฟพื้นผิว 3 มิติด้วย Matplotlib",
        "content_snippet": "#โปรแกรมสร้างกราฟพื้นผิว 3 มิติด้วย Matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef plot_3d_surface():\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    # สร้างข้อมูลพื้นผิว\n    X = np.linspace(-5, 5, 100)\n    Y = np.linspace(-5, 5, 100)\n    X, Y = np.meshgrid(X, Y)\n    Z = np.sin(np.sqrt(X**2 + Y**2))\n\n    # พล็อตกราฟ 3 มิติ\n    ax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')\n    ax.set_title(\"กราฟพื้นผิว 3 มิติ\")\n    plt.show()\n\n# ตัวอย่างการใช้งาน\nplot_3d_surface()"
    },
    {
        "filename": "(XIV)แสดงผลPascalTriangleเป็นรูปแบบพีระมิด.py",
        "description": "# โปรแกรมสร้างพีระมิด Pascal Triangle โดยใช้ Python",
        "content_snippet": "# โปรแกรมสร้างพีระมิด Pascal Triangle โดยใช้ Python\ndef pascal_triangle_pyramid(n):\n    def generate_row(row):\n        current = [1] # สร้างแถวใหม่\n        for i in range(1, len(row)): # วนลูปเพื่อสร้างตัวเลขใหม่\n            current.append(row[i - 1] + row[i]) # สร้างตัวเลขใหม่จากผลรวม\n        current.append(1) # เพิ่มตัวเลขสุดท้าย\n        return current\n\n    triangle = [[1]] # สร้างแถวแรก\n    for _ in range(1, n + 1): # วนลูปเพื่อสร้างแถว\n        triangle.append(generate_row(triangle[-1])) # เพิ่มแถวใหม่เข้าไปในรายการ\n\n    return triangle\n\n# รับค่าระดับ\nn = int(input(\"Enter number of rows for Pascal Triangle Pyramid: \"))\ntriangle = pascal_triangle_pyramid(n)\n\n# แสดงผลในรูปแบบพีระมิด\nfor i, row in enumerate(triangle): # วนลูปเพื่อแสดงผล\n    print(\" \" * (n - i), \" \".join(map(str, row))) # แสดงผลลัพธ์\n"
    },
    {
        "filename": "(IX)สร้างสี่เหลี่ยมลายขวาง.py",
        "description": "# โปรแกรมสร้างสี่เหลี่ยมลายขวาง",
        "content_snippet": "# โปรแกรมสร้างสี่เหลี่ยมลายขวาง\n# โค้ดสร้างสี่เหลี่ยมลายขวาง\nprint('---------- Drawing striped squares ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the size (at least 3): \"))\n\n    if size == 0:\n        break\n    elif size >= 3:\n        for i in range(size):\n            if i % 2 == 0:\n                print(\"#\" * size)\n            else:\n                print(\" \" * size)\n    else:\n        print(\"Invalid input. Please enter a size >= 3.\")\n"
    },
    {
        "filename": "แสดงข้อมูลเชิงภาพ.py",
        "description": "# โปรแกรม",
        "content_snippet": "# โปรแกรม\n#วิเคราะห์ความถี่ของตัวอักษรที่ปรากฏใน s1, s2, s3 และสร้างกราฟแท่ง (Bar Chart)\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n# รวมข้อความทั้งหมด\ncombined_text = s1 + s2 + s3\n\n# นับความถี่ของตัวอักษร (เฉพาะ a-z หรือ A-Z)\nletter_frequency = Counter(char.lower() for char in combined_text if char.isalpha())\n\n# แสดงผลความถี่ตัวอักษร\nprint(\"Letter Frequency:\")\nfor letter, freq in letter_frequency.items():\n    print(f\"{letter}: {freq}\")\n\n# วาดกราฟแท่งแสดงความถี่ตัวอักษร\nplt.bar(letter_frequency.keys(), letter_frequency.values(), color='skyblue')\nplt.title(\"Letter Frequency in Text\")\nplt.xlabel(\"Letters\")\nplt.ylabel(\"Frequency\")\nplt.show()\n"
    },
    {
        "filename": "(1)เพิ่มการหมุน_Matrix_90_องศา.py",
        "description": "# โปรแกรมสร้างเมทริกซ์และหมุนเมทริกซ์ 90 องศา",
        "content_snippet": "# โปรแกรมสร้างเมทริกซ์และหมุนเมทริกซ์ 90 องศา\n\nimport random\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nmatrix_a = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]\nprint(f\"Original Matrix: {matrix_a}\")\n\n# หมุน 90 องศา\nrotated = [[matrix_a[rows-1-j][i] for j in range(rows)] for i in range(columns)]\nprint(f\"Matrix rotated 90 degrees: {rotated}\")"
    },
    {
        "filename": "(X)เพิ่มการตรวจสอบว่าห้ามใช้คำเดาง่ายเช่นpasswordหรือ123456.py",
        "description": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน\nimport re\n\nweak_passwords = {\"password\", \"123456\", \"12345678\", \"qwerty\", \"abcdefg\"}  # Weak passwords list\n\nwhile True:\n    password = input(\"Set your password:\")\n\n    if 8 <= len(password) <= 16:\n        if password.lower() in weak_passwords:\n            print(\"!!!ERROR!!! Your password is too common and easily guessed\\n\")\n        elif (re.search(r'[A-Z]', password) and\n              re.search(r'[a-z]', password) and\n              re.search(r'[0-9]', password) and\n              re.search(r'[!@#$%^&*]', password)):\n            print(\":-) Your password is valid and secure (-: \")\n            break\n        else:\n            print(\"!!!ERROR!!! Your password does not meet the complexity requirements\\n\")\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "(II)หาพื้นที่_lv1.py",
        "description": "# โปรแกรมคำนวณพื้นที่และเส้นรอบรูปของรูปสามเหลี่ยม พื้นที่ เส้นรอบรูป และเส้นทแยงมุมของรูปสี่เหลี่ยมผืนผ้า ระยะทางและจุดกึ่งกลางระหว่างสองจุด และแก้สมการกำลังสอง",
        "content_snippet": "# โปรแกรมคำนวณพื้นที่และเส้นรอบรูปของรูปสามเหลี่ยม พื้นที่ เส้นรอบรูป และเส้นทแยงมุมของรูปสี่เหลี่ยมผืนผ้า ระยะทางและจุดกึ่งกลางระหว่างสองจุด และแก้สมการกำลังสอง\nimport math\n\n# ฟังก์ชันคำนวณพื้นที่และเส้นรอบรูปของรูปสามเหลี่ยม\ndef triangle_area_and_perimeter(base, height, side1, side2):\n    # คำนวณพื้นที่สามเหลี่ยม\n    area = 0.5 * base * height\n    # คำนวณเส้นรอบรูปสามเหลี่ยม\n    perimeter = base + side1 + side2\n    return f\"Area = {area:.2f}, Perimeter = {perimeter:.2f}\"\n\n# ฟังก์ชันคำนวณพื้นที่ เส้นรอบรูป และเส้นทแยงมุมของรูปสี่เหลี่ยมผืนผ้า\ndef rectangle_calculations(length, width):\n    # พื้นที่\n    area = length * width\n    # เส้นรอบรูป\n    perimeter = 2 * (length + width)\n    # เส้นทแยงมุม (ใช้ทฤษฎีปีทาโกรัส)\n    diagonal = math.sqrt(length**2 + width**2)\n    return f\"Area = {area:.2f}, Perimeter = {perimeter:.2f}, Diagonal = {diagonal:.2f}\"\n\n# ฟังก์ชันคำนวณระยะทางและจุดกึ่งกลางระหว่างสองจุด\ndef distance_and_midpoint(x1, y1, x2, y2):\n    # ระยะทางระหว่างสองจุด\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    # จุดกึ่งกลาง\n    midpoint = ((x1 + x2) / 2, (y1 + y2) / 2)\n    return f\"Distance = {distance:.2f}, Midpoint = {midpoint}\"\n\n# ฟังก์ชันแก้สมการกำลังสอง พร้อมตรวจสอบประเภทของราก\ndef solve_quadratic(a, b, c):\n    if a == 0:\n        return \"Coefficient 'a' must not be zero.\"\n\n    # คำนวณ Discriminant\n    discriminant = b**2 - 4 * a * c\n\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        root_type = \"Real and Distinct\"\n    elif discriminant == 0:\n        root1 = root2 = -b / (2 * a)\n        root_type = \"Real and Equal\"\n    else:\n        root1 = (-b + complex(0, math.sqrt(-discriminant))) / (2 * a)\n        root2 = (-b - complex(0, math.sqrt(-discriminant))) / (2 * a)\n        root_type = \"Complex\"\n    \n    return f\"Roots: {root1}, {root2} (Type: {root_type})\"\n\n# ฟังก์ชันเมนูหลักของโปรแกรม\ndef main():\n    while True:\n        # แสดงเมนูให้ผู้ใช้เลือก\n        print(\"\\n=== Math Calculations Menu ===\")\n        print(\"1. Triangle Area and Perimeter\")\n        print(\"2. Rectangle Area, Perimeter, and Diagonal\")\n        print(\"3. Distance and Midpoint Between Two Points\")\n        print(\"4. Solve Quadratic Equation\")\n        print(\"5. Exit\")\n        \n        choice = input(\"Enter your choice (1-5): \")\n\n        if choice == '1':\n            # รับข้อมูลสำหรับรูปสามเหลี่ยม\n            base = float(input(\"Enter the base of the triangle: \"))\n            height = float(input(\"Enter the height of the triangle: \"))\n            side1 = float(input(\"Enter the first side of the triangle: \"))\n            side2 = float(input(\"Enter the second side of the triangle: \"))\n            print(triangle_area_and_perimeter(base, height, side1, side2))\n\n        elif choice == '2':\n            # รับข้อมูลสำหรับรูปสี่เหลี่ยมผืนผ้า\n            length = float(input(\"Enter the length of the rectangle: \"))\n            width = float(input(\"Enter the width of the rectangle: \"))\n            print(rectangle_calculations(length, width))\n\n        elif choice == '3':\n            # รับข้อมูลจุดสองจุด\n            x1 = float(input(\"Enter x1: \"))\n            y1 = float(input(\"Enter y1: \"))\n            x2 = float(input(\"Enter x2: \"))\n            y2 = float(input(\"Enter y2: \"))\n            print(distance_and_midpoint(x1, y1, x2, y2))\n\n        elif choice == '4':\n            # รับข้อมูลสำหรับสมการกำลังสอง\n            a = float(input(\"Enter coefficient a: \"))\n            b = float(input(\"Enter coefficient b: \"))\n            c = float(input(\"Enter constant c: \"))\n            print(solve_quadratic(a, b, c))\n\n        elif choice == '5':\n            print(\"Exiting the program. Goodbye!\")\n            break\n\n        else:\n            print(\"Invalid choice. Please try again.\")\n\n# เรียกใช้โปรแกรมหลัก\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "filename": "ตำแหน่งสินค้า.py",
        "description": "# โปรแกรมค้นหารหัสสินค้า",
        "content_snippet": "# โปรแกรมค้นหารหัสสินค้า\nn = int(input())\n\ncode_pkg = []\n\nfor i in range(n):\n  code = input()\n  code_pkg.append(code)\n  i += 1\n\nsearch_pkg = input()\n\nfound_pkg = [i+1 for i, pkg in enumerate(code_pkg) if pkg == search_pkg]\n\nif found_pkg:\n  print(f\"Position: {','.join(map(str, found_pkg))}\")\nelse:\n  print(\"2\")\n\n#บรรทัดแรก n เป็นจำนวนของสินค้าทั้งหมด\n#บรรทัด n ต่อไป เป็นรหัสสินค้าเป็นเลขจำนวนเต็ม\n#บรรทัดสุดท้ายเป็นรหัสสินค้าที่ต้องการหา เป็นเลขจำนวนเต็ม"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมมุมฉากกลับด้านแบบกลวง (Hollow Reversed Right Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    height = int(input(\"Enter the height of hollow reversed right triangle: \"))\n\n    if height == 0:\n        break\n\n    for i in range(height, 0, -1):\n        spaces = ' ' * (height - i)\n        if i == 1:\n            stars = '*'\n        elif i == height:\n            stars = '*' * i\n        else:\n            stars = '*' + ' ' * (i - 2) + '*'\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "สร้างกราฟเส้นเปรียบเทียบ.py",
        "description": "#โปรแกรมสร้างกราฟเส้นเปรียบเทียบข้อมูลสองชุด",
        "content_snippet": "#โปรแกรมสร้างกราฟเส้นเปรียบเทียบข้อมูลสองชุด\nimport matplotlib.pyplot as plt\n\ndef plot_comparison(x, y1, y2, labels):\n    plt.plot(x, y1, label=labels[0], marker='o')\n    plt.plot(x, y2, label=labels[1], marker='s')\n    plt.title(\"กราฟเปรียบเทียบข้อมูลสองชุด\")\n    plt.xlabel(\"แกน X\")\n    plt.ylabel(\"แกน Y\")\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n# ตัวอย่างการใช้งาน\nx = [1, 2, 3, 4, 5]\ny1 = [10, 20, 30, 40, 50]\ny2 = [15, 25, 35, 45, 55]\nlabels = [\"ข้อมูลชุดที่ 1\", \"ข้อมูลชุดที่ 2\"]\nplot_comparison(x, y1, y2, labels)"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมแบบ Diamond (เพชร).py",
        "description": "while True:",
        "content_snippet": "while True:\n    # รับค่าความสูงของเพชรจากผู้ใช้\n    height = int(input(\"Enter the height of the diamond (must be odd): \"))\n\n    if height == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n    if height % 2 == 0:\n        print(\"Height must be an odd number!\")\n        continue\n\n    # วาดส่วนบนของเพชร\n    for i in range(1, height + 1, 2):\n        spaces = ' ' * ((height - i) // 2)\n        stars = '*' * i\n        print(spaces + stars)\n\n    # วาดส่วนล่างของเพชร\n    for i in range(height - 2, 0, -2):\n        spaces = ' ' * ((height - i) // 2)\n        stars = '*' * i\n        print(spaces + stars)\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "(VIII)ใช้pandasสำหรับการจัดการข้อมูล.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการใช้งาน pandas ในการจัดการข้อมูลแบบตาราง",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการใช้งาน pandas ในการจัดการข้อมูลแบบตาราง\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n            'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n            'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n            'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n            'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n            'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n            'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\nimport pandas as pd\n\n# สร้าง DataFrame\ncolumns = ['Letter', 'Points', 'Amount', 'Ratio']\ndf = pd.DataFrame([data_game[i:i+4] for i in range(0, len(data_game), 4)], columns=columns)\n\n# คำนวณสถิติ\nprint(\"Data Statistics:\")\nprint(df.describe())\n\n# เรียงลำดับข้อมูลตามคะแนน\nsorted_df = df.sort_values(by='Points', ascending=False)\n\n# แสดงข้อมูลที่เรียงแล้ว\nprint(\"\\nTop Letters by Points:\")\nprint(sorted_df.head())\n"
    },
    {
        "filename": "แปลงหน่วยอุณหภูมิ.py",
        "description": "# โปรแกรมแปลงอุณหภูมิ Celsius เป็น Fahrenheit และ Fahrenheit เป็น Celsius",
        "content_snippet": "# โปรแกรมแปลงอุณหภูมิ Celsius เป็น Fahrenheit และ Fahrenheit เป็น Celsius\ndef celsius_to_fahrenheit(celsius):\n    # แปลง Celsius เป็น Fahrenheit\n    return (celsius * 9/5) + 32\n\ndef fahrenheit_to_celsius(fahrenheit):\n    # แปลง Fahrenheit เป็น Celsius\n    return (fahrenheit - 32) * 5/9\n\n# ตัวอย่างการใช้งาน\nchoice = input(\"เลือกการแปลง (1: Celsius -> Fahrenheit, 2: Fahrenheit -> Celsius): \")\nif choice == '1':\n    celsius = float(input(\"ใส่อุณหภูมิใน Celsius: \"))\n    fahrenheit = celsius_to_fahrenheit(celsius)\n    print(f\"{celsius} °C = {fahrenheit:.2f} °F\")\nelif choice == '2':\n    fahrenheit = float(input(\"ใส่อุณหภูมิใน Fahrenheit: \"))\n    celsius = fahrenheit_to_celsius(fahrenheit)\n    print(f\"{fahrenheit} °F = {celsius:.2f} °C\")\nelse:\n    print(\"ตัวเลือกไม่ถูกต้อง\")\n"
    },
    {
        "filename": "(VIII)scrabble game.py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการหาคำตอบของโจทย์ที่ 8 ในการทดสอบความรู้ของนักเรียนในวิชา Python Programming",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการหาคำตอบของโจทย์ที่ 8 ในการทดสอบความรู้ของนักเรียนในวิชา Python Programming\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n            'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n            'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n            'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n            'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n            'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n            'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\nsublists = list(map(lambda i: data_game[i:i + 4], range(0, len(data_game), 4)))\n\ndef get_top_n_elements(lst, index, n=4, reverse=True):\n    return sorted(lst, key=lambda x: x[index], reverse=reverse)[:n]\n\ntop_points = get_top_n_elements(sublists, 1)\nprint(\"The highest points in the scrabble game:\")\nprint(\"\\n\".join(map(lambda i_ch: f\"    {i_ch[0] + 1}) '{top_points[i_ch[0]][0]}' with {top_points[i_ch[0]][1]} points.\", enumerate(top_points))))\n\ntop_amounts = get_top_n_elements(sublists, 2)\nprint(\"\\nThe highest amount in the scrabble game:\")\nprint(\"\\n\".join(map(lambda i_ch: f\"    {i_ch[0] + 1}) '{top_amounts[i_ch[0]][0]}' with {top_amounts[i_ch[0]][2]} pieces.\", enumerate(top_amounts))))\n\nlowest_ratios = get_top_n_elements(sublists, 3, reverse=False)\nprint(\"\\nThe lowest ratio in the scrabble game:\")\nprint(\"\\n\".join(map(lambda i_ch: f\"    {i_ch[0] + 1}) '{lowest_ratios[i_ch[0]][0]}' with {lowest_ratios[i_ch[0]][3]} percent.\", enumerate(lowest_ratios))))\n"
    },
    {
        "filename": "สร้างกราฟวงกลม.py",
        "description": "# โปรแกรมสำหรับสร้างกราฟวงกลมแสดงสัดส่วนยอดขายสินค้า",
        "content_snippet": "# โปรแกรมสำหรับสร้างกราฟวงกลมแสดงสัดส่วนยอดขายสินค้า\nimport matplotlib.pyplot as plt\n\ndef plot_pie_chart(categories, values):\n    # สร้างกราฟวงกลม\n    plt.pie(values, labels=categories, autopct='%1.1f%%', startangle=90)\n    plt.title(\"กราฟวงกลมแสดงสัดส่วนยอดขายสินค้า\")\n    plt.axis('equal')  # เพื่อให้กราฟเป็นวงกลมสมบูรณ์\n    plt.show()\n\n# ตัวอย่างการใช้งาน\ncategories = [\"สินค้า A\", \"สินค้า B\", \"สินค้า C\", \"สินค้า D\"]\nvalues = [1500, 2500, 2000, 1000]\nplot_pie_chart(categories, values)"
    },
    {
        "filename": "(XIII)AdaptiveGuessingGame.py",
        "description": "# โปรแกรมเกมทายตัวเลขที่จำนวนรอบจะเพิ่มขึ้นหรือลดลงตามความใกล้เคียง",
        "content_snippet": "# โปรแกรมเกมทายตัวเลขที่จำนวนรอบจะเพิ่มขึ้นหรือลดลงตามความใกล้เคียง\nimport random\n\ndef adaptive_guessing_game():\n    # เกมที่จำนวนรอบจะเพิ่มขึ้นหรือลดลงตามความใกล้เคียง\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    attempts = 5 # จำนวนรอบที่ให้ทาย\n\n    print(\"\\n***** Adaptive Guessing Game *****\")\n    print(\"Guess the number. Close guesses will give you more attempts!\\n\")\n\n    while attempts > 0:\n        print(f\"Remaining attempts: {attempts}\")\n        guess = int(input(\"Enter your guess: \"))\n        diff = abs(secret_number - guess)\n\n        if guess == secret_number:\n            print(f\"Congratulations! You guessed the number {secret_number}.\")\n            return\n        elif diff <= 5:\n            print(\"You're very close! You earned an extra attempt.\")\n            attempts += 1\n        else:\n            print(\"Keep trying!\")\n        attempts -= 1\n\n    print(f\"\\nGame over! The secret number was {secret_number}.\")\n\nadaptive_guessing_game()\n"
    },
    {
        "filename": "(6)เพิ่มโหมดการเข้ารหัสแบบหลายอัลกอริทึม (XOR และ Caesar).py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR และ Caesar Cipher",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR และ Caesar Cipher\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef xor_encrypt(plaintext, secret_key):\n    \"\"\"เข้ารหัสข้อความด้วย XOR\"\"\"\n    return ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n\ndef caesar_cipher_encrypt(text, shift):\n    \"\"\"เข้ารหัสข้อความด้วย Caesar Cipher\"\"\"\n    return ''.join(chr((ord(c) + shift) % 256) for c in text)\n\ndef caesar_cipher_decrypt(text, shift):\n    \"\"\"ถอดรหัสข้อความด้วย Caesar Cipher\"\"\"\n    return ''.join(chr((ord(c) - shift) % 256) for c in text)\n\ndef encrypt(plaintext, secret_key, shift):\n    \"\"\"เข้ารหัสด้วย XOR และ Caesar\"\"\"\n    xor_cipher = xor_encrypt(plaintext, secret_key)\n    return caesar_cipher_encrypt(xor_cipher, shift)\n\ndef decrypt(ciphertext, secret_key, shift):\n    \"\"\"ถอดรหัสด้วย Caesar และ XOR\"\"\"\n    shifted_text = caesar_cipher_decrypt(ciphertext, shift)\n    return xor_encrypt(shifted_text, secret_key)\n\n# Main Program\nprint(\"------------- Multi-Algorithm Encryption and Decryption Program -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\nsecret_key = input(\"Enter your secret key: \")\nshift = int(input(\"Enter Caesar Cipher shift value: \"))\n\nadjusted_key = adjust_key_length(plaintext, secret_key)\nciphertext = encrypt(plaintext, adjusted_key, shift)\nprint(f\"The encrypted ciphertext: {ciphertext}\")\n\ndecrypted_text = decrypt(ciphertext, adjusted_key, shift)\nprint(f\"The decryption results: {decrypted_text}\\n\")"
    },
    {
        "filename": "ต้นคริสมาสต์.py",
        "description": "# โปรแกรมวาดต้นคริสมาสต์",
        "content_snippet": "# โปรแกรมวาดต้นคริสมาสต์\nh = int(input())\n\nfor height in range(h):\n  for i in range(height + 2):\n    space = ' ' * (h - i)\n    star = '*' * (2 * i + 1)\n    i += 1\n    print(space + star)\n    \ntree_space = ' ' * h\nprint(f\"{tree_space}|\")\n\nsomthing = '=' * h\nprint(f\"{somthing}V{somthing}\")"
    },
    {
        "filename": "(XIII)GuessingGameแบบสุ่มลดจำนวนรอบ.py",
        "description": "# โปรแกรมที่ใช้ในการเล่นเกมทายตัวเลข โดยมีจำนวนรอบที่ถูกกำหนดไว้ล่วงหน้า",
        "content_snippet": "# โปรแกรมที่ใช้ในการเล่นเกมทายตัวเลข โดยมีจำนวนรอบที่ถูกกำหนดไว้ล่วงหน้า\nimport random\n\ndef random_attempts_game():\n    # เกมที่จำนวนรอบจะถูกสุ่ม\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    attempts = random.randint(3, 10) # สุ่มจำนวนรอบที่ให้ทาย\n\n    print(f\"\\n***** Random Attempts Guessing Game *****\")\n    print(f\"You have {attempts} attempts to guess the number.\\n\")\n\n    for attempt in range(1, attempts + 1): # วนลูปจนครบจำนวนรอบ\n        guess = int(input(f\"Attempt {attempt}: Enter your guess: \"))\n\n        if guess == secret_number: # ถ้าทายถูก\n            print(f\"Congratulations! You guessed the number {secret_number}.\")\n            return\n        elif guess < secret_number: # ตรวจสอบว่าเดาน้อยเกินไปหรือมากเกินไป\n            print(\"Your guess is too low.\")\n        else:\n            print(\"Your guess is too high.\")\n\n    print(f\"\\nGame over! The secret number was {secret_number}.\")\n\nrandom_attempts_game()\n"
    },
    {
        "filename": "บันทึกข้อมูลเป็นไฟล์ JSON.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการบันทึกข้อมูลลงไฟล์ JSON โดยใช้ฟังก์ชัน json.dump() และ indent=4 ในการจัดรูปแบบข้อมูลให้สวยงาม",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการบันทึกข้อมูลลงไฟล์ JSON โดยใช้ฟังก์ชัน json.dump() และ indent=4 ในการจัดรูปแบบข้อมูลให้สวยงาม\nid = {'Peter' : {'Age': 40 , 'Gender': 'Male', 'Test': {'First': 20, 'Second': 18, 'Third': 19}},\n      'Paul' : {'Age': 25, 'Gender': 'Male', 'Test': {'First' : 19, 'Second': 20, 'Third': 19}},\n      'Mary' : {'Age': 18, 'Gender': 'Female', 'Test': {'First': 10, 'Second': 5, 'Third': 4}},\n      'Jenny' : {'Age': 60, 'Gender': 'Female', 'Test': {'First': 5, 'Second': 3, 'Third': 1}}}\n\nimport json\n\n# เพิ่มข้อมูลคะแนนเฉลี่ยใน dictionary\nfor name, data in id.items():\n    data['Average'] = sum(data['Test'].values()) / len(data['Test'])\n\n# บันทึกข้อมูลลงไฟล์ JSON\nwith open('output.json', 'w') as file:\n    json.dump(id, file, indent=4)\n\nprint(\"Data has been saved to 'output.json'\")\n"
    },
    {
        "filename": "(XV)เปลี่ยนอักขระพิเศษให้เป็นUnicode.py",
        "description": "# โปรแกรมเข้ารหัสข้อความด้วยวิธีการเข้ารหัส Caesar Cipher โดยใช้ Unicode",
        "content_snippet": "# โปรแกรมเข้ารหัสข้อความด้วยวิธีการเข้ารหัส Caesar Cipher โดยใช้ Unicode\n# โปรแกรมเข้ารหัสข้อความด้วยวิธี Caesar Cipher โดยให้ผู้ใช้ป้อนข้อความและคีย์เป็นจำนวนเต็มบวกหรือลบ\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        elif char.isspace():  # Allow spaces between words\n            result += ' '\n        else:  # Convert special characters to Unicode\n            result += f\"\\\\u{ord(char):04x}\"\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabets, Spaces, or Special Characters): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    decrypted_text = secret_password(ciphertext, -key)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n\n#Unicode คือระบบการเข้ารหัส (encoding system) ที่ใช้เพื่อแทนข้อมูลตัวอักษรหรือสัญลักษณ์ต่างๆ ที่สามารถใช้ได้ในทุกภาษาและทุกสัญลักษณ์ทั่วโลก เช่น ตัวอักษรในภาษาอังกฤษ, ภาษาไทย, ภาษาจีน, อีโมจิ หรือแม้กระทั่งสัญลักษณ์พิเศษต่างๆ\n#เป้าหมายของ Unicode: การพัฒนา Unicode มีจุดมุ่งหมายเพื่อให้สามารถแทนข้อมูลข้อความจากทุกภาษาในโลกได้ในมาตรฐานเดียวกัน โดยไม่ต้องใช้ระบบการเข้ารหัสหลายแบบที่แตกต่างกัน ซึ่งอาจทำให้เกิดปัญหาการไม่สามารถแสดงผลตัวอักษรที่ต้องการได้ (เช่น ปัญหาการแสดงผลภาษาไทยในระบบที่ใช้การเข้ารหัสเป็น ASCII)\n#รหัสของ Unicode: Unicode แทนตัวอักษรแต่ละตัว (หรือสัญลักษณ์) ด้วยรหัสที่เรียกว่า code point ซึ่งเป็นตัวเลขที่ไม่ซ้ำกัน ซึ่งสามารถเป็นตัวเลขที่ใหญ่และสามารถแทนข้อมูลได้หลากหลายประเภทของตัวอักษร เช่น:\n#รหัสตัวอักษรภาษาอังกฤษ: เช่น U+0041 (A), U+0042 (B) เป็นต้น\n#รหัสตัวอักษรภาษาไทย: เช่น U+0E01 (ก), U+0E02 (ข) เป็นต้น\n#สัญลักษณ์พิเศษ: เช่น U+1F600 (😀), U+1F602 (😂) เป็นต้น"
    },
    {
        "filename": "เปลี่ยนชื่อไฟล์เป็นกลุ่ม.py",
        "description": "#โปรแกรมเปลี่ยนชื่อไฟล์ในโฟลเดอร์ทั้งหมดด้วยชื่อที่กำหนด",
        "content_snippet": "#โปรแกรมเปลี่ยนชื่อไฟล์ในโฟลเดอร์ทั้งหมดด้วยชื่อที่กำหนด\nimport os\n\ndef batch_rename_files(folder, new_name, extension):\n    try:\n        files = os.listdir(folder)\n        for i, file in enumerate(files):\n            old_path = os.path.join(folder, file)\n            new_path = os.path.join(folder, f\"{new_name}_{i + 1}.{extension}\")\n            os.rename(old_path, new_path)\n        print(\"เปลี่ยนชื่อไฟล์สำเร็จ\")\n    except FileNotFoundError:\n        print(f\"ไม่พบโฟลเดอร์ {folder}\")\n\n# ตัวอย่างการใช้งาน\nfolder = \"example_folder\"\nnew_name = \"renamed_file\"\nextension = \"txt\"\nbatch_rename_files(folder, new_name, extension)"
    },
    {
        "filename": "(4)เพิ่มโหมดการสุ่มตัวเลขซ้ำได้.py",
        "description": "# เกม MEN and WOMEN โดยเพิ่มตัวเลือกให้สุ่มตัวเลขซ้ำกันได้",
        "content_snippet": "# เกม MEN and WOMEN โดยเพิ่มตัวเลือกให้สุ่มตัวเลขซ้ำกันได้\nimport random\n\ndef generate_secret_number(unique=True):\n    \"\"\"Generate a 4-digit secret number, optionally allowing duplicate digits.\"\"\"\n    if unique:\n        return random.sample(range(10), 4)\n    else:\n        return [random.randint(0, 9) for _ in range(4)]\n\ndef calculate_hint(secret, guess):\n    \"\"\"Calculate MEN and WOMEN based on the guess.\"\"\"\n    men = sum(s == g for s, g in zip(secret, guess))\n    women = sum(g in secret for g in guess) - men\n    return men, women\n\nprint(\"------ Welcome to MEN and WOMEN number guessing game ------\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\n# ให้ผู้ใช้เลือกโหมด\nallow_duplicates = input(\"Allow duplicate digits? (yes/no): \").strip().lower() == \"yes\"\nsecret_number = generate_secret_number(unique=not allow_duplicates)\nattempts = 0\n\nwhile True:\n    user_input = input(\"Enter 4-digits number: \")\n\n    if user_input == \"0\":\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        print(\"Exiting the program.\")\n        break\n\n    if len(user_input) != 4 or not user_input.isdigit():\n        print(\"Invalid input. Please enter a 4-digit number.\")\n        continue\n\n    guess = list(map(int, user_input))\n    if not allow_duplicates and len(set(guess)) != 4:\n        print(\"Digits must be unique. Try again.\")\n        continue\n\n    attempts += 1\n    men, women = calculate_hint(secret_number, guess)\n\n    print(f\"Hint: MEN = {men} and WOMEN = {women}\")\n\n    if men == 4:\n        print(f\"*** Congratulations *** Your guess is correct, after {attempts} attempts\")\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        break"
    },
    {
        "filename": "(4)เพิ่มระบบคำใบ้พิเศษเมื่อทายผิดเกิน 5 ครั้ง.py",
        "description": "# เกม MEN and WOMEN พร้อมคำใบ้พิเศษเมื่อทายผิดเกิน 5 ครั้ง",
        "content_snippet": "# เกม MEN and WOMEN พร้อมคำใบ้พิเศษเมื่อทายผิดเกิน 5 ครั้ง\nimport random\n\ndef generate_secret_number():\n    \"\"\"Generate a 4-digit secret number with unique digits.\"\"\"\n    return random.sample(range(10), 4)\n\ndef calculate_hint(secret, guess):\n    \"\"\"Calculate MEN and WOMEN based on the guess.\"\"\"\n    men = sum(s == g for s, g in zip(secret, guess))\n    women = sum(g in secret for g in guess) - men\n    return men, women\n\ndef special_hint(secret):\n    \"\"\"Generate a special hint showing one digit of the secret.\"\"\"\n    return random.choice(secret)\n\nprint(\"------ Welcome to MEN and WOMEN number guessing game ------\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\nsecret_number = generate_secret_number()\nattempts = 0\n\nwhile True:\n    user_input = input(\"Enter 4-digits number: \")\n\n    if user_input == \"0\":\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        print(\"Exiting the program.\")\n        break\n\n    if len(user_input) != 4 or not user_input.isdigit():\n        print(\"Invalid input. Please enter a 4-digit number.\")\n        continue\n\n    guess = list(map(int, user_input))\n    if len(set(guess)) != 4:\n        print(\"Digits must be unique. Try again.\")\n        continue\n\n    attempts += 1\n    men, women = calculate_hint(secret_number, guess)\n\n    print(f\"Hint: MEN = {men} and WOMEN = {women}\")\n\n    if attempts > 5:  # ให้คำใบ้พิเศษเมื่อทายผิดเกิน 5 ครั้ง\n        special_digit = special_hint(secret_number)\n        print(f\"Special Hint: One of the digits is {special_digit}\")\n\n    if men == 4:\n        print(f\"*** Congratulations *** Your guess is correct, after {attempts} attempts\")\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        break"
    },
    {
        "filename": "(VIII)ประมวลผลด้วยคำสั่งเงื่อนไข.py",
        "description": "# โปรแกรม: กรองข้อมูลเกมส์",
        "content_snippet": "# โปรแกรม: กรองข้อมูลเกมส์\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n            'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n            'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n            'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n            'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n            'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n            'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\n# แบ่งข้อมูลออกเป็น sublists (เหมือนเดิม)\nsublists = [data_game[i:i+4] for i in range(0, len(data_game), 4)]\n\n# ฟังก์ชัน: ตรวจสอบว่าคะแนนหรืออัตราส่วนถึงเกณฑ์หรือไม่\ndef filter_by_threshold(lst, point_threshold, ratio_threshold):\n    filtered = [] # สร้าง list เพื่อเก็บข้อมูลที่ผ่านเกณฑ์\n    for sublist in lst: # วนลูปเพื่อตรวจสอบข้อมูลใน sublists\n        if sublist[1] >= point_threshold and sublist[3] <= ratio_threshold: # ตรวจสอบเกณฑ์\n            filtered.append(sublist) # เพิ่มข้อมูลที่ผ่านเกณฑ์เข้าไปใน filtered\n    return filtered\n\n# กำหนดเกณฑ์\npoint_threshold = 5 # คะแนนต่ำสุด\nratio_threshold = 4.5 # อัตราส่วนสูงสุด\n\n# กรองข้อมูล\nfiltered_data = filter_by_threshold(sublists, point_threshold, ratio_threshold) # กรองข้อมูล\n\n# แสดงข้อมูลที่กรอง\nprint(f\"Filtered Data (Points >= {point_threshold} and Ratios <= {ratio_threshold}):\") # แสดงข้อความ\nfor sublist in filtered_data:\n    print(sublist)\n"
    },
    {
        "filename": "(XI)Factorialร่วมกับเลขฐานต่าง.py",
        "description": "# โปรแกรมคำนวณ Factorial และแปลงเป็นเลขฐาน 2, 8, 16",
        "content_snippet": "# โปรแกรมคำนวณ Factorial และแปลงเป็นเลขฐาน 2, 8, 16\n# แปลง Factorial เป็นเลขฐาน 2, 8, 16\nprint('Converting Factorials to different bases')\nn = int(input(\"Enter 'n' for Factorial series: \"))\nresult = 1\nfactorial_list = []\n\n# คำนวณ Factorial และแปลง\nfor i in range(1, n+1):\n    result *= i\n    factorial_list.append((result, bin(result), oct(result), hex(result)))  # Factorial, ฐาน 2, 8, 16\n\n# แสดงผล\nfor i, values in enumerate(factorial_list, start=1):\n    print(f\"{i}! = {values[0]} | Binary: {values[1]} | Octal: {values[2]} | Hex: {values[3]}\")\n"
    },
    {
        "filename": "ลืมปุ่มCapslock.py",
        "description": "# โปรแกรมที่ใช้สลับตัวอักษรให้เป็นตัวใหญ่หรือตัวเล็ก",
        "content_snippet": "# โปรแกรมที่ใช้สลับตัวอักษรให้เป็นตัวใหญ่หรือตัวเล็ก\ntext = str(input())\n\nswip_text = text.swapcase()\n\nprint(swip_text)"
    },
    {
        "filename": "(VIII)ใช้itertoolsและเพิ่มฟังก์ชันประมวลผลข้อมูลใหม่.py",
        "description": "# โปรแกรม: การใช้ itertools ในการจัดการข้อมูลแบบกลุ่ม",
        "content_snippet": "# โปรแกรม: การใช้ itertools ในการจัดการข้อมูลแบบกลุ่ม\nimport itertools\n\n# ข้อมูลเกม (เหมือนเดิม)\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n             'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n             'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n             'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n             'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n             'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n             'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\n# แบ่งข้อมูลออกเป็น sublists โดยใช้ itertools.islice\nsublists = list(itertools.islice(itertools.zip_longest(*[iter(data_game)]*4), 0, len(data_game)//4))\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n            'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n            'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n            'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n            'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n            'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n            'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\n# ฟังก์ชัน: จัดอันดับตัวอักษรที่ปรากฏบ่อยที่สุด\ndef get_top_frequencies(data, n=5):\n    # สร้าง dict เพื่อเก็บจำนวนตัวอักษร\n    frequency = {}\n    for sublist in data:\n        letter = sublist[0]\n        frequency[letter] = frequency.get(letter, 0) + 1\n    \n    # เรียงลำดับข้อมูลตามค่าที่สูงสุด\n    return sorted(frequency.items(), key=lambda x: x[1], reverse=True)[:n]\n\n# ฟังก์ชัน: เพิ่มค่าคะแนนให้ทุก sublist โดยการคำนวณแต้มสะสม\ndef add_accumulated_score(data):\n    total_score = 0\n    for sublist in data:\n        total_score += sublist[1]  # เพิ่มคะแนนในตำแหน่งที่ 1\n        sublist.append(total_score)  # เพิ่มคะแนนสะสมลงใน sublist\n    return data\n\n# เพิ่มคะแนนสะสมใน sublists\nsublists = add_accumulated_score(sublists)\n\n# แสดงข้อมูล\nprint(\"Sublists with accumulated scores:\")\nfor sublist in sublists:\n    print(sublist)\n\n# ค้นหาตัวอักษรที่ปรากฏบ่อยที่สุด\ntop_frequencies = get_top_frequencies(sublists)\nprint(\"\\nTop frequent letters:\")\nfor i, (letter, freq) in enumerate(top_frequencies):\n    print(f\"    {i+1}) '{letter}' appears {freq} times.\")\n"
    },
    {
        "filename": "(1)เพิ่มการรวม_Matrix_หลายตัว.py",
        "description": "# โปรแกรมสร้างเมทริกซ์ 2 ตัว และคำนวณผลรวมของเมทริกซ์ A และ B",
        "content_snippet": "# โปรแกรมสร้างเมทริกซ์ 2 ตัว และคำนวณผลรวมของเมทริกซ์ A และ B\n\nimport random\n\nprint(\"=\" * 80)\nrows, columns = 3, 3 # กำหนดขนาดของเมทริกซ์\n\n# สร้าง Matrix A และ B\nmatrix_a = [[random.randint(0, 5) for _ in range(columns)] for _ in range(rows)]\nmatrix_b = [[random.randint(0, 5) for _ in range(columns)] for _ in range(rows)]\nprint(f\"Matrix A: {matrix_a}\")\nprint(f\"Matrix B: {matrix_b}\")\n\n# รวม Matrix\ncombined = [[matrix_a[i][j] + matrix_b[i][j] for j in range(columns)] for i in range(rows)] # คำนวณผลรวมของเมทริกซ์ A และ B\nprint(f\"Combined Matrix A+B: {combined}\")"
    },
    {
        "filename": "ตัวแปลงอุณหภูมิ.py",
        "description": "#โปรแกรมแปลงอุณหภูมิระหว่างเซลเซียส ฟาเรนไฮต์ และเคลวิน",
        "content_snippet": "#โปรแกรมแปลงอุณหภูมิระหว่างเซลเซียส ฟาเรนไฮต์ และเคลวิน\ndef convert_temperature(value, from_unit, to_unit):\n    if from_unit == \"C\":\n        if to_unit == \"F\":\n            return (value * 9/5) + 32\n        elif to_unit == \"K\":\n            return value + 273.15\n    elif from_unit == \"F\":\n        if to_unit == \"C\":\n            return (value - 32) * 5/9\n        elif to_unit == \"K\":\n            return (value - 32) * 5/9 + 273.15\n    elif from_unit == \"K\":\n        if to_unit == \"C\":\n            return value - 273.15\n        elif to_unit == \"F\":\n            return (value - 273.15) * 9/5 + 32\n    return value\n\n# รับข้อมูลจากผู้ใช้\nvalue = float(input(\"กรุณาใส่อุณหภูมิ: \"))\nfrom_unit = input(\"หน่วยต้นทาง (C/F/K): \").upper()\nto_unit = input(\"หน่วยเป้าหมาย (C/F/K): \").upper()\n\nconverted = convert_temperature(value, from_unit, to_unit)\nprint(f\"{value} {from_unit} = {converted:.2f} {to_unit}\")"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับด้านแบบใช้สัญลักษณ์แทนตามแถว.py",
        "description": "# Drawing a reversed right triangle with different symbols per row",
        "content_snippet": "# Drawing a reversed right triangle with different symbols per row\nwhile True:\n    height = int(input(\"Enter the height of the triangle (0 to quit): \"))\n    if height == 0:\n        break\n    symbols = ['*', '#', '@', '%', '+']\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        stars = symbols[i % len(symbols)] * i\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "เกมเดาตัวเลขแบบหลายระดับความยาก.py",
        "description": "# โปรแกรมเกมทายตัวเลข",
        "content_snippet": "# โปรแกรมเกมทายตัวเลข\n# เกมให้ผู้เล่นเดาตัวเลขโดยเลือกระดับความยากที่ส่งผลต่อช่วงตัวเลขและจำนวนครั้งในการทาย\"\nimport random\n\ndef number_guessing_game(level):\n    if level == 'ง่าย':\n        range_start, range_end, attempts = 1, 10, 5\n    elif level == 'ปานกลาง':\n        range_start, range_end, attempts = 1, 50, 7\n    elif level == 'ยาก':\n        range_start, range_end, attempts = 1, 100, 10\n    else:\n        print(\"เลือกระดับความยากไม่ถูกต้อง\")\n        return\n\n    target_number = random.randint(range_start, range_end)\n    print(f\"เริ่มเกม! ตัวเลขอยู่ในช่วง {range_start} ถึง {range_end} คุณมีโอกาส {attempts} ครั้ง\")\n\n    for _ in range(attempts):\n        guess = int(input(\"ทายตัวเลขของคุณ: \"))\n        if guess == target_number:\n            print(f\"ยินดีด้วย! คุณทายถูกต้อง ตัวเลขคือ {target_number}\")\n            return\n        elif guess < target_number:\n            print(\"ตัวเลขต่ำเกินไป!\")\n        else:\n            print(\"ตัวเลขสูงเกินไป!\")\n    \n    print(f\"เสียใจด้วย! คุณใช้โอกาสหมดแล้ว ตัวเลขคือ {target_number}\")\n\n# ตัวอย่างการใช้งาน\nlevel = input(\"เลือกระดับความยาก (ง่าย/ปานกลาง/ยาก): \")\nnumber_guessing_game(level)"
    },
    {
        "filename": "tempCodeRunnerFile.py",
        "description": "# โปรแกรมวาดสามเหลี่ยมกลับด้านตามความสูงที่กำหนด",
        "content_snippet": "# โปรแกรมวาดสามเหลี่ยมกลับด้านตามความสูงที่กำหนด\n# Drawing a reversed right triangle using '*'\nwhile True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of right triangle: \"))\n\n    # หากใส่ 0 จะออกจากโปรแกรม\n    if height == 0: # ถ้าความสูงเป็น 0\n        break\n\n    # วาดสามเหลี่ยมกลับด้านตามความสูงที่กำหนด\n    for i in range(1, height + 1): # วนลูปตามความสูง\n        spaces = ' ' * (height - i)  # ช่องว่างด้านซ้าย\n        if i == 1:  # แถวแรกมีแค่ *\n            stars = '*' # สร้างดาว\n        elif i == height:  # แถวสุดท้ายเต็มแถว\n            stars = '*' * i # สร้างดาวตามความสูง\n        else:  # แถวอื่นๆ มี * เว้นช่องว่างตรงกลาง\n            stars = '*' + ' ' * (i - 2) + '*' # สร้างดาวและช่องว่างตรงกลาง\n        print(spaces + stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "(4)เพิ่มการคำนวณคะแนน.py",
        "description": "# เกม MEN and WOMEN โดยเพิ่มระบบคะแนน",
        "content_snippet": "# เกม MEN and WOMEN โดยเพิ่มระบบคะแนน\nimport random\n\ndef generate_secret_number():\n    \"\"\"Generate a 4-digit secret number with unique digits.\"\"\"\n    return random.sample(range(10), 4)\n\ndef calculate_hint(secret, guess):\n    \"\"\"Calculate MEN and WOMEN based on the guess.\"\"\"\n    men = sum(s == g for s, g in zip(secret, guess))\n    women = sum(g in secret for g in guess) - men\n    return men, women\n\ndef calculate_score(attempts):\n    \"\"\"Calculate score based on the number of attempts.\"\"\"\n    return max(100 - 10 * (attempts - 1), 0)\n\nprint(\"------ Welcome to MEN and WOMEN number guessing game ------\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\nsecret_number = generate_secret_number()\nattempts = 0\n\nwhile True:\n    user_input = input(\"Enter 4-digits number: \")\n\n    if user_input == \"0\":\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        print(\"Exiting the program.\")\n        break\n\n    if len(user_input) != 4 or not user_input.isdigit():\n        print(\"Invalid input. Please enter a 4-digit number.\")\n        continue\n\n    guess = list(map(int, user_input))\n    if len(set(guess)) != 4:\n        print(\"Digits must be unique. Try again.\")\n        continue\n\n    attempts += 1\n    men, women = calculate_hint(secret_number, guess)\n\n    print(f\"Hint: MEN = {men} and WOMEN = {women}\")\n\n    if men == 4:\n        score = calculate_score(attempts)\n        print(f\"*** Congratulations *** Your guess is correct, after {attempts} attempts\")\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        print(f\"Your Score: {score}\")\n        break"
    },
    {
        "filename": "(1)เพิ่มการหาInverse_Matrix(เฉพาะกรณี2x2).py",
        "description": "# โปรแกรมสร้างเมทริกซ์ขนาด 2x2 และคำนวณ Inverse Matrix หากมี Determinant ไม่เท่ากับ 0",
        "content_snippet": "# โปรแกรมสร้างเมทริกซ์ขนาด 2x2 และคำนวณ Inverse Matrix หากมี Determinant ไม่เท่ากับ 0\nimport random\n\nprint(\"=\" * 80)\nrows = 2\ncolumns = 2\n\nmatrix_a = [[random.randint(1, 5) for _ in range(columns)] for _ in range(rows)]\nprint(f\"Matrix A [{rows}x{columns}]: {matrix_a}\")\n\n# คำนวณ Determinant\ndet = matrix_a[0][0] * matrix_a[1][1] - matrix_a[0][1] * matrix_a[1][0]\nif det == 0:\n    print(\"Matrix A is not invertible!\")\nelse:\n    inverse = [[matrix_a[1][1] / det, -matrix_a[0][1] / det],\n               [-matrix_a[1][0] / det, matrix_a[0][0] / det]]\n    print(f\"Inverse of Matrix A: {inverse}\")"
    },
    {
        "filename": "(5)เพิ่มการแสดงผลเงินทอนในรูปแบบกราฟิก (ใช้ ‘_’ แทนจำนวนเงิน)6.py",
        "description": "# โปรแกรมแสดงการทอนเงินด้วยกราฟิกแสดงผล",
        "content_snippet": "# โปรแกรมแสดงการทอนเงินด้วยกราฟิกแสดงผล\n# Program to display change with a graphical representation\ndef calculate_change(total_price, payment):\n    denominations = {\n        \"The 500-$Baht Banknote\": 500,\n        \"The 100-$Baht Banknote\": 100,\n        \"The 50-$Baht Banknote\": 50,\n        \"The 20-$Baht Banknote\": 20,\n        \"The 10-$Baht Coin\": 10,\n        \"The 5-$Baht Coin\": 5,\n        \"The 2-$Baht Coin\": 2,\n        \"The 1-$Baht Coin\": 1,\n    }\n\n    change = payment - total_price\n\n    if change < 0:\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in denominations.items():\n            count = change // value\n            if count > 0:\n                graphic = '*' * count\n                result.append(f\"{denom} = {count} Piece(s): {graphic}\")\n            change %= value\n        return \"\\n\".join(result)\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    total_price = int(input(\"The total price of products: \"))\n    payment = int(input(\"Customer payment: \"))\n    print(\"----------------------------------------------------------\")\n\n    if payment == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change(total_price, payment)\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "(2)เพิ่มการแสดงค่าตัวเลขสูงสุดในแถวที่เลือก.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการแสดงค่าตัวเลขสูงสุดในแถวที่เลือก",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการแสดงค่าตัวเลขสูงสุดในแถวที่เลือก\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]\n        new_row = [previous_row[-1]]\n        for j in range(len(previous_row)):\n            new_row.append(new_row[-1] + previous_row[j])\n        rows.append(new_row)\n    return rows\n\ndef main():\n    rows = []\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            max_val = max(rows[user_row])\n            print(f\"Row {user_row}: {rows[user_row]} (Max Value: {max_val})\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "เปลี่ยนเป็นตัวเล็ก.py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการคำนวณข้อความที่ผู้ใช้ป้อนเข้ามา",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการคำนวณข้อความที่ผู้ใช้ป้อนเข้ามา\n# ค้ดนี้แปลงข้อความที่ผู้ใช้ป้อนให้เป็น ตัวพิมพ์เล็กทั้งหมด (lowercase) \n# เพื่อหลีกเลี่ยงการเปรียบเทียบที่แตกต่างจากตัวพิมพ์ใหญ่และตัวพิมพ์เล็ก (case-sensitive) เช่น \"A\" กับ \"a\" จะถือเป็นตัวอักษรเดียวกัน\n# รับข้อมูลจากผู้ใช้ พร้อมแปลงเป็น lower case เพื่อจัดการกรณี sensitivity\nuser_a = input('Please enter the string A: ').lower()\nuser_b = input('Please enter the string B: ').lower()\n\n# แปลง String เป็นเซ็ตเพื่อคำนวณ\nset_a = set(user_a)\nset_b = set(user_b)\n\nprint('--------------------------------------------------')\n# คำนวณและแสดงผลลัพธ์\nprint(f'Number of unique characters in A: {len(set_a)}')\nprint(f'Number of unique characters in B: {len(set_b)}')\nprint(f'Number of common characters in both A and B: {len(set_a & set_b)}')\nprint(f'Characters in A but not in B: {set_a - set_b}')\nprint(f'Characters in B but not in A: {set_b - set_a}')\nprint(f'Characters in A or B but not both: {set_a ^ set_b}')\nprint(f'All unique characters in A or B: {set_a | set_b}')\n"
    },
    {
        "filename": "จัดการ_To-Do_List.py",
        "description": "#โปรแกรมเพิ่ม, ลบ และแสดงรายการ To-Do List",
        "content_snippet": "#โปรแกรมเพิ่ม, ลบ และแสดงรายการ To-Do List\ndef add_task(todo_list, task):\n    todo_list.append(task)\n    print(f\"เพิ่มงาน: {task}\")\n\ndef remove_task(todo_list, task_index):\n    if 0 <= task_index < len(todo_list):\n        removed_task = todo_list.pop(task_index)\n        print(f\"ลบงาน: {removed_task}\")\n    else:\n        print(\"หมายเลขงานไม่ถูกต้อง\")\n\ndef display_tasks(todo_list):\n    print(\"รายการ To-Do List:\")\n    if not todo_list:\n        print(\"ไม่มีงานในรายการ\")\n    for i, task in enumerate(todo_list):\n        print(f\"{i}. {task}\")\n\n# ตัวอย่างการใช้งาน\ntodo_list = []\nwhile True:\n    print(\"\\n1. เพิ่มงาน\")\n    print(\"2. ลบงาน\")\n    print(\"3. แสดงรายการ\")\n    print(\"4. ออกจากโปรแกรม\")\n    choice = input(\"เลือกเมนู: \")\n    \n    if choice == '1':\n        task = input(\"ใส่ชื่องาน: \")\n        add_task(todo_list, task)\n    elif choice == '2':\n        task_index = int(input(\"ใส่หมายเลขงานที่ต้องการลบ: \"))\n        remove_task(todo_list, task_index)\n    elif choice == '3':\n        display_tasks(todo_list)\n    elif choice == '4':\n        print(\"ออกจากโปรแกรม\")\n        break\n    else:\n        print(\"เลือกเมนูไม่ถูกต้อง\")"
    },
    {
        "filename": "(XIII)ProgressiveRangeShrinkingGame.py",
        "description": "# โปรแกรมเกมทายตัวเลขที่ขอบเขตการทายจะแคบลงตามรอบ",
        "content_snippet": "# โปรแกรมเกมทายตัวเลขที่ขอบเขตการทายจะแคบลงตามรอบ\n# โดยเริ่มต้นจาก 1-100 และลดลงเรื่อยๆ จนถึง 7 รอบ\nimport random\n\ndef shrinking_range_game():\n    # เกมที่ขอบเขตการทายจะแคบลงตามรอบ\n    secret_number = random.randint(1, 100)\n    low, high = 1, 100 # ช่วงเริ่มต้น\n    attempts = 7 # จำนวนรอบ\n\n    print(\"\\n***** Progressive Range Shrinking Game *****\")\n    print(f\"The secret number is between {low} and {high}.\\n\")\n\n    for _ in range(attempts):\n        guess = int(input(f\"Enter your guess ({low}-{high}): \"))\n\n        if guess == secret_number:\n            print(f\"Correct! The secret number is {secret_number}.\")\n            return\n        elif guess < secret_number:\n            print(\"Your guess is too low.\")\n            low = max(low, guess + 1)\n        else:\n            print(\"Your guess is too high.\")\n            high = min(high, guess - 1)\n\n        print(f\"New range: {low} to {high}\")\n\n    print(f\"\\nGame over! The secret number was {secret_number}.\")\n\nshrinking_range_game()\n"
    },
    {
        "filename": "คำนวณค่าสหสัมพันธ์.py",
        "description": "#โปรแกรมคำนวณค่าสหสัมพันธ์ระหว่างข้อมูล 2 ชุด",
        "content_snippet": "#โปรแกรมคำนวณค่าสหสัมพันธ์ระหว่างข้อมูล 2 ชุด\nimport numpy as np\n\ndef calculate_correlation(x, y):\n    # คำนวณค่าสหสัมพันธ์\n    if len(x) != len(y):\n        raise ValueError(\"ข้อมูลทั้งสองชุดต้องมีความยาวเท่ากัน\")\n    return np.corrcoef(x, y)[0, 1]\n\n# รับข้อมูลจากผู้ใช้\nx = list(map(float, input(\"ใส่ข้อมูลชุดที่ 1 (คั่นด้วยช่องว่าง): \").split()))\ny = list(map(float, input(\"ใส่ข้อมูลชุดที่ 2 (คั่นด้วยช่องว่าง): \").split()))\n\ntry:\n    correlation = calculate_correlation(x, y)\n    print(f\"ค่าสหสัมพันธ์ระหว่างข้อมูลสองชุดคือ: {correlation:.2f}\")\nexcept ValueError as e:\n    print(e)"
    },
    {
        "filename": "(2)สามเหลี่ยม.py",
        "description": "#โปรแกรมรับค่า Degree ของสามเหลี่ยมนี้ แล้วแสดงรายการ (List) สัมประสิทธิ์ของ Degree นั้น",
        "content_snippet": "#โปรแกรมรับค่า Degree ของสามเหลี่ยมนี้ แล้วแสดงรายการ (List) สัมประสิทธิ์ของ Degree นั้น\n\ndef generate_rows(num_rows): # สร้างแถวของสามเหลี่ยมพาสกาล\n    rows = [[1]]  # เริ่มต้นด้วยแถวที่ 0\n\n    for i in range(1, num_rows + 1): # สร้างแถวตามจำนวนที่ระบุ\n        previous_row = rows[-1]  # แถวก่อนหน้า\n        new_row = [previous_row[-1]]  # ตัวแรก: เลขสุดท้ายของแถวก่อนหน้า\n\n        for j in range(len(previous_row)): # สร้างตัวเลขใหม่จากผลรวม\n            new_row.append(new_row[-1] + previous_row[j])  # สร้างตัวเลขใหม่จากผลรวม\n\n        rows.append(new_row)  # เพิ่มแถวใหม่เข้าไปในรายการ\n\n    return rows\n\ndef main():\n    rows = []  # เก็บผลลัพธ์ของแถว\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            \n            # ออกจากโปรแกรมเมื่อป้อน -1\n            if user_row == -1: # ออกจากโปรแกรม\n                print(\"ออกจากโปรแกรม\")\n                break\n\n            # ตรวจสอบว่าเป็นค่าไม่ลบ (ยกเว้น -1 เพื่อออก)\n            if user_row < 0: # ตรวจสอบว่าเป็นค่าไม่ลบ (ยกเว้น -1 เพื่อออก)\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n\n            # สร้างแถวที่จำเป็นหากยังไม่เคยคำนวณ\n            if len(rows) <= user_row: # สร้างแถวที่จำเป็นหากยังไม่เคยคำนวณ\n                rows = generate_rows(user_row)\n\n            # แสดงผลแถวที่เลือก\n            print(f\"{rows[user_row]}\\n\") \n\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "(1)เพิ่มการหาค่าเฉลี่ยของ_Matrix.py",
        "description": "# โปรแกรมสร้างเมทริกซ์และคำนวณค่าเฉลี่ยของทุกค่าภายในเมทริกซ์",
        "content_snippet": "# โปรแกรมสร้างเมทริกซ์และคำนวณค่าเฉลี่ยของทุกค่าภายในเมทริกซ์\nimport random\n\nrows, columns = 3, 3\n\nmatrix_a = [[random.randint(1, 10) for _ in range(columns)] for _ in range(rows)]\nprint(f\"Matrix A: {matrix_a}\")\n\n# คำนวณค่าเฉลี่ย\naverage = sum(sum(row) for row in matrix_a) / (rows * columns)\nprint(f\"Average value of Matrix A: {average}\")"
    },
    {
        "filename": "(X)ตรวจสอบการใช้ซ้ำของตัวอักษร (ไม่มีตัวอักษรซ้ำกันเกิน2ตัวติดกัน).py",
        "description": "# โปรแกรมตรวจสอบความซับซ้อนของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความซับซ้อนของรหัสผ่าน\nimport re\n\nwhile True:\n    password = input(\"Set your password:\")\n\n    if 8 <= len(password) <= 16:\n        if (re.search(r'[A-Z]', password) and\n            re.search(r'[a-z]', password) and\n            re.search(r'[0-9]', password) and\n            not re.search(r'(.)\\1{2,}', password)):  # Check for repeated characters\n            print(\":-) Your password is valid (-: \")\n            break\n\n        elif re.search(r'(.)\\1{2,}', password):  # Error for repeated characters\n            print(\"!!!ERROR!!! The password must not contain three consecutive identical characters\\n\")\n        else:\n            print(\"!!!ERROR!!! Your password does not meet the complexity requirements\\n\")\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "วิเคราะห์ข้อมูลยอดขายสินค้า.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการวิเคราะห์ข้อมูลยอดขายสินค้า",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการวิเคราะห์ข้อมูลยอดขายสินค้า\n# การวิเคราะห์ข้อมูลยอดขายสินค้า\ndef analyze_sales(sales_data):\n    total_sales = sum(sales_data.values())\n    percent_sales = {product: (sales / total_sales) * 100 for product, sales in sales_data.items()}\n    return total_sales, percent_sales\n\n# ข้อมูลยอดขายตัวอย่าง\nsales_data = {\n    \"สินค้า A\": 1500,\n    \"สินค้า B\": 2000,\n    \"สินค้า C\": 500,\n    \"สินค้า D\": 2500\n}\n\ntotal, percentages = analyze_sales(sales_data)\nprint(f\"ยอดขายรวม: {total} บาท\")\nprint(\"เปอร์เซ็นต์ยอดขายของแต่ละสินค้า:\")\nfor product, percent in percentages.items():\n    print(f\"{product}: {percent:.2f}%\")"
    },
    {
        "filename": "วิเคราะห์ข้อความ.py",
        "description": "#โปรแกรมนับจำนวนคำ ตัวอักษร และวิเคราะห์ข้อความอื่น ๆ",
        "content_snippet": "#โปรแกรมนับจำนวนคำ ตัวอักษร และวิเคราะห์ข้อความอื่น ๆ\ndef analyze_text(text):\n    num_characters = len(text)\n    num_words = len(text.split())\n    num_lines = len(text.splitlines())\n    return num_characters, num_words, num_lines\n\n# รับข้อมูลจากผู้ใช้\ntext = input(\"กรุณาใส่ข้อความที่ต้องการวิเคราะห์: \")\n\n# วิเคราะห์ข้อความ\ncharacters, words, lines = analyze_text(text)\nprint(f\"จำนวนตัวอักษร: {characters}\")\nprint(f\"จำนวนคำ: {words}\")\nprint(f\"จำนวนบรรทัด: {lines}\")"
    },
    {
        "filename": "(XIV)ใช้ฟังก์ชันLambdaและMap.py",
        "description": "# สร้าง Pascal Triangle โดยใช้ Lambda และ Map",
        "content_snippet": "# สร้าง Pascal Triangle โดยใช้ Lambda และ Map\ndef pascal_triangle_lambda(n): # ฟังก์ชันสร้าง Pascal Triangle\n    triangle = [[1]]  # เริ่มต้นด้วยแถวแรก\n\n    for _ in range(n): # วนลูปเพื่อสร้างแถว\n        # ใช้ map เพื่อคำนวณค่าของแถวใหม่\n        next_row = list(map(lambda x, y: x + y, [0] + triangle[-1], triangle[-1] + [0])) # คำนวณค่าของแถวใหม่\n        triangle.append(next_row) # เพิ่มแถวใหม่เข้าไปในรายการ\n\n    return triangle\n\n# รับค่าระดับ\nn = int(input(\"Enter the number of rows for Pascal Triangle: \"))\nresult = pascal_triangle_lambda(n)\n\n# แสดงผล Pascal Triangle\nfor row in result:\n    print(row)\n"
    },
    {
        "filename": "พีระมิด.py",
        "description": "# โปรแกรมสำหรับการวาดรูปแบบต่างๆ ด้วยการใช้เครื่องหมาย *",
        "content_snippet": "# โปรแกรมสำหรับการวาดรูปแบบต่างๆ ด้วยการใช้เครื่องหมาย *\n# Input Example\nmyInput = int(input())\ni = 1\n\n# Output of Input Example\nwhile i-1 < myInput:\n    print(\"*\" * i)\n    i += 1"
    },
    {
        "filename": "ค้นหาไฟล์ในโฟลเดอร์.py",
        "description": "#โปรแกรมค้นหาไฟล์ที่มีคำสำคัญในชื่อไฟล์ภายในโฟลเดอร์",
        "content_snippet": "#โปรแกรมค้นหาไฟล์ที่มีคำสำคัญในชื่อไฟล์ภายในโฟลเดอร์\nimport os\n\ndef search_files(folder, keyword):\n    matched_files = []\n    for root, dirs, files in os.walk(folder):\n        for file in files:\n            if keyword in file:\n                matched_files.append(os.path.join(root, file))\n    return matched_files\n\n# ตัวอย่างการใช้งาน\nfolder = input(\"กรุณาใส่ชื่อโฟลเดอร์ที่ต้องการค้นหา: \")\nkeyword = input(\"ใส่คำสำคัญในชื่อไฟล์ที่ต้องการค้นหา: \")\nresults = search_files(folder, keyword)\nif results:\n    print(\"พบไฟล์ที่ตรงกับคำค้นหา:\")\n    for file in results:\n        print(file)\nelse:\n    print(\"ไม่พบไฟล์ที่ตรงกับคำค้นหา\")"
    },
    {
        "filename": "(XIII)GuessingGameแบบMultiplayer.py",
        "description": "# โปรแกรมทายตัวเลขแบบเล่นหลายคน",
        "content_snippet": "# โปรแกรมทายตัวเลขแบบเล่นหลายคน\nimport random\n\ndef multiplayer_guessing_game():\n    # เกมทายตัวเลขแบบเล่นหลายคน\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    max_attempts = 10 # จำนวนรอบที่ให้ทาย\n    players = int(input(\"Enter number of players: \")) # จำนวนผู้เล่น\n    attempts = {player: 0 for player in range(1, players + 1)} # จำนวนรอบการทายของแต่ละผู้เล่น\n\n    print(\"\\n***** Multiplayer Guessing Game *****\")\n    print(f\"Secret number is between 1 and 100. Each player has {max_attempts} attempts.\\n\")\n\n    for _ in range(max_attempts): # วนลูปจนครบจำนวนรอบ\n        for player in range(1, players + 1):\n            guess = int(input(f\"Player {player}, enter your guess: \"))\n            attempts[player] += 1 # เพิ่มจำนวนรอบการทายของผู้เล่น\n\n            if guess == secret_number: # ถ้าทายถูก\n                print(f\"\\nPlayer {player} wins! The secret number was {secret_number}.\")\n                return\n            elif guess < secret_number: # ตรวจสอบว่าเดาน้อยเกินไปหรือมากเกินไป\n                print(f\"Player {player}, your guess is too low.\")\n            else:\n                print(f\"Player {player}, your guess is too high.\")\n\n    print(f\"\\nGame over! The secret number was {secret_number}.\")\n    for player, attempt in attempts.items(): # แสดงจำนวนรอบการทายของแต่ละผู้เล่น\n        print(f\"Player {player} made {attempt} attempts.\")\n\nmultiplayer_guessing_game()\n"
    },
    {
        "filename": "ยกกำลังกันเข้าไป.py",
        "description": "# โปรแกรมรับค่าจำนวนเต็มสองจำนวน คือ ฐานและเลขยกกำลัง แล้วคำนวณค่าฐานยกกำลังเลขยกกำลัง แล้วแสดงผลลัพธ์ออกทางหน้าจอ",
        "content_snippet": "# โปรแกรมรับค่าจำนวนเต็มสองจำนวน คือ ฐานและเลขยกกำลัง แล้วคำนวณค่าฐานยกกำลังเลขยกกำลัง แล้วแสดงผลลัพธ์ออกทางหน้าจอ\nnumber = int(input())\nexponent = int(input())\nresult = 1\n\nif exponent == 0:\n    result = 1\nelse:\n    while exponent > 0:\n        result *= number\n        exponent -= 1\n\nprint(f\"{result}\")\n"
    },
    {
        "filename": "สมุดรายชื่อผู้ติดต่อ.py",
        "description": "#โปรแกรมเพิ่ม ลบ และค้นหาผู้ติดต่อในสมุดรายชื่อ",
        "content_snippet": "#โปรแกรมเพิ่ม ลบ และค้นหาผู้ติดต่อในสมุดรายชื่อ\ndef add_contact(contacts, name, phone):\n    contacts[name] = phone\n    print(f\"เพิ่มผู้ติดต่อ: {name} - {phone}\")\n\ndef delete_contact(contacts, name):\n    if name in contacts:\n        del contacts[name]\n        print(f\"ลบผู้ติดต่อ: {name}\")\n    else:\n        print(f\"ไม่พบผู้ติดต่อชื่อ {name}\")\n\n\ndef search_contact(contacts, name):\n    if name in contacts:\n        print(f\"{name}: {contacts[name]}\")\n    else:\n        print(f\"ไม่พบผู้ติดต่อชื่อ {name}\")\n\n# ตัวอย่างการใช้งาน\ncontacts = {}\nwhile True:\n    print(\"\\n1. เพิ่มผู้ติดต่อ\")\n    print(\"2. ลบผู้ติดต่อ\")\n    print(\"3. ค้นหาผู้ติดต่อ\")\n    print(\"4. แสดงรายชื่อทั้งหมด\")\n    print(\"5. ออกจากโปรแกรม\")\n    choice = input(\"เลือกเมนู: \")\n    \n    if choice == '1':\n        name = input(\"ใส่ชื่อ: \")\n        phone = input(\"ใส่เบอร์โทร: \")\n        add_contact(contacts, name, phone)\n    elif choice == '2':\n        name = input(\"ใส่ชื่อผู้ติดต่อที่ต้องการลบ: \")\n        delete_contact(contacts, name)\n    elif choice == '3':\n        name = input(\"ใส่ชื่อผู้ติดต่อที่ต้องการค้นหา: \")\n        search_contact(contacts, name)\n    elif choice == '4':\n        print(\"รายชื่อผู้ติดต่อทั้งหมด:\")\n        for name, phone in contacts.items():\n            print(f\"{name}: {phone}\")\n    elif choice == '5':\n        print(\"ออกจากโปรแกรม\")\n        break\n    else:\n        print(\"เลือกเมนูไม่ถูกต้อง\")"
    },
    {
        "filename": "(X)Set_password.py",
        "description": "# โปรแกรมตั้งรหัสผ่านที่มีความปลอดภัย",
        "content_snippet": "# โปรแกรมตั้งรหัสผ่านที่มีความปลอดภัย\nimport re\n\nwhile True:\n    password = input(\"Setting your password:\")\n\n    if 8 <= len(password) <= 16:\n        if (re.search(r'[A-Z]', password)) and (re.search(r'[a-z]', password)) and (re.search(r'[0-9]', password)):\n            print(':-) Your password is correct (-:')\n            break\n        \n        elif (re.search(r'[a-z]', password)) and (re.search(r'[0-9]', password)):\n            print('!!!ERROR!!! The password must contain at least a capital letter\\n')\n\n        elif (re.search(r'[A-Z]', password)) and (re.search(r'[0-9]', password)):\n            print('!!!ERROR!!! The password must contain at least a lowercase letter\\n')\n\n        elif (re.search(r'[A-Z]', password)) and (re.search(r'[a-z]', password)):\n            print('!!!ERROR!!! The password must contain at least a number\\n')\n\n\n\n    elif len(password) < 8:\n        print('!!!ERROR!!! The password must contain at least 8 characters\\n')\n    elif len(password) > 16:\n        print('!!!ERROR!!! The password must not contain more than 16 character\\n')"
    },
    {
        "filename": "(6)โปรแกรมรับค่าการนำข้อมูล(Plaintext).py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        # ทำซ้ำ Secret Key จนกว่าจะมีความยาวเท่ากับ Plaintext\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef encrypt(plaintext, secret_key):\n    \"\"\"เข้ารหัสข้อความด้วย XOR\"\"\"\n    ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n    return ciphertext\n\ndef decrypt(ciphertext, secret_key):\n    \"\"\"ถอดรหัสข้อความด้วย XOR\"\"\"\n    plaintext = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, secret_key))\n    return plaintext\n\n# Main Program\nprint(\"------------- Encryption and Decryption Program -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\nprint(f\"[The length of plaintext is {len(plaintext)} characters]\")\n\nsecret_key = input(\"Enter your secret key: \")\nprint(f\"[The length of secret key is {len(secret_key)} characters]\")\n\n# Adjust secret key length\nadjusted_key = adjust_key_length(plaintext, secret_key)\n\n# Encrypt the plaintext\nciphertext = encrypt(plaintext, adjusted_key)\nprint(f\"The encrypted ciphertext: {ciphertext}\")\nprint(f\"[The length of ciphertext is {len(ciphertext)} characters]\")\n\n# Decrypt the ciphertext\ndecrypted_text = decrypt(ciphertext, adjusted_key)\nprint(f\"The decryption results: {decrypted_text}\\n\")"
    },
    {
        "filename": "เกมHangman.py",
        "description": "# โปรแกรมเกม Hangman ที่ให้ผู้เล่นทายคำศัพท์ทีละตัวอักษรจนกว่าจะครบหรือพลาดเกินจำนวนครั้งที่กำหนด",
        "content_snippet": "# โปรแกรมเกม Hangman ที่ให้ผู้เล่นทายคำศัพท์ทีละตัวอักษรจนกว่าจะครบหรือพลาดเกินจำนวนครั้งที่กำหนด\n#เกมให้ผู้เล่นทายคำศัพท์ทีละตัวอักษรจนกว่าจะครบหรือพลาดเกินจำนวนครั้งที่กำหนด\ndef play_hangman(word):\n    guessed = set()\n    attempts = len(word) + 3\n    current_state = [\"_\" for _ in word]\n\n    print(\"เริ่มเกม Hangman!\")\n    while attempts > 0:\n        print(\" \".join(current_state))\n        guess = input(\"ใส่ตัวอักษรที่ต้องการทาย: \").lower()\n        \n        if guess in guessed:\n            print(\"คุณทายตัวอักษรนี้ไปแล้ว\")\n        elif guess in word:\n            print(\"ถูกต้อง!\")\n            guessed.add(guess)\n            for i, char in enumerate(word):\n                if char == guess:\n                    current_state[i] = guess\n            if \"_\" not in current_state:\n                print(f\"ยินดีด้วย! คุณทายคำว่า '{word}' สำเร็จ\")\n                return\n        else:\n            print(\"ผิด!\")\n            guessed.add(guess)\n            attempts -= 1\n        \n        print(f\"เหลือโอกาสทายอีก {attempts} ครั้ง\")\n    \n    print(f\"เสียใจด้วย! คำที่ถูกต้องคือ '{word}'\")\n\n# ตัวอย่างการใช้งาน\nplay_hangman(\"python\")"
    },
    {
        "filename": "(XIII)guessing_game.py",
        "description": "# โปรแกรมทายเลข 1-99 โดยมีโอกาสทาย 5 ครั้ง และให้คำแนะนำว่าเลขที่ทายมากไหม หรือน้อยไหม",
        "content_snippet": "# โปรแกรมทายเลข 1-99 โดยมีโอกาสทาย 5 ครั้ง และให้คำแนะนำว่าเลขที่ทายมากไหม หรือน้อยไหม\n# โดยโปรแกรมจะสุ่มเลข 1-99 และให้ผู้เล่นทาย โดยโปรแกรมจะให้คำแนะนำว่าเลขที่ทายมากไหม หรือน้อยไหม\nimport random\n\ndef guessing_game():\n    random_number = random.randint(1, 99) # สุ่มเลข 1-99\n    attempts = 5 # จำนวนรอบที่ให้ทาย\n    low, high = 1, 99 # ช่วงที่เป็นไปได้\n\n    print(\"***** Welcome to the game of guessing number *****\")\n\n    for attempt in range(attempts): # วนลูปจนครบจำนวนรอบ\n        print(f\"{'-'*21} round{attempt + 1} {'-'*21}\") # แสดงรอบที่ทาย\n        print(f\"Enter an integer from {low} to {high} : \", end=\"\") # รับค่าที่ต้องการทาย\n\n        input_number = int(input()) # รับค่าที่ต้องการทาย\n\n        if input_number == random_number: # ถ้าทายถูก\n            print(\"#\" * 50) \n            print(\"   *** CONGRATURATION *** Your guess is correct  \")\n            print(\"#\" * 50)\n            return\n        \n        elif input_number < random_number: # ถ้าทายต่ำกว่าค่าที่สุ่ม\n            print(\"Hint: Your guess is low\")\n            low = max(low, input_number + 1) # กำหนดช่วงที่เลือก\n        else:\n            print(\"Hint: Your guess is high\")\n            high = min(high, input_number - 1) # กำหนดช่วงที่เลือก\n\n    print(\"#\" * 50)\n    print(f\"!!!SORRY!!! The secret number is {random_number}\".center(50))\n    print(\"#\" * 50)\n\nguessing_game()\n"
    },
    {
        "filename": "(VIII)ใช้jsonเพื่อบันทึกและโหลดข้อมูล.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการบันทึกข้อมูลลงไฟล์ JSON และโหลดข้อมูลกลับมาใช้งาน",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการบันทึกข้อมูลลงไฟล์ JSON และโหลดข้อมูลกลับมาใช้งาน\nimport json\n\n# ข้อมูลเกม (เหมือนเดิม)\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n             'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n             'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n             'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n             'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n             'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n             'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\n# แปลงข้อมูลเป็นโครงสร้างที่บันทึกได้\nsublists = [data_game[i:i+4] for i in range(0, len(data_game), 4)]\ndata_dict = [{\"Letter\": s[0], \"Points\": s[1], \"Amount\": s[2], \"Ratio\": s[3]} for s in sublists]\n\n# บันทึกเป็นไฟล์ JSON\nwith open('data_game.json', 'w') as file:\n    json.dump(data_dict, file, indent=4)\n\n# โหลดข้อมูลกลับมา\nwith open('data_game.json', 'r') as file:\n    loaded_data = json.load(file)\n\n# แสดงข้อมูลที่โหลด\nprint(\"Loaded Data from JSON:\")\nfor entry in loaded_data:\n    print(entry)\n"
    },
    {
        "filename": "พีระมิดไม่ได้สร้างได้ในวันเดียว.py",
        "description": "# โปรแกรมสร้างรูปสามเหลี่ยมด้านเท่าที่มีด้านเป็นเลขคู่",
        "content_snippet": "# โปรแกรมสร้างรูปสามเหลี่ยมด้านเท่าที่มีด้านเป็นเลขคู่\nmyInput = int(input())\ni = 5\nj = 1\n\nwhile myInput-1 >= 0:\n  print(f\"{' ' * int(myInput - 1) }{'*' * j}\")\n  i -= 1\n  j += 2\n  myInput -= 1\n  "
    },
    {
        "filename": "(4)เพิ่มการแสดงประวัติการเดา.py",
        "description": "# เกม MEN and WOMEN โดยเพิ่มประวัติการเดา",
        "content_snippet": "# เกม MEN and WOMEN โดยเพิ่มประวัติการเดา\nimport random\n\ndef generate_secret_number():\n    \"\"\"Generate a 4-digit secret number with unique digits.\"\"\"\n    return random.sample(range(10), 4)\n\ndef calculate_hint(secret, guess):\n    \"\"\"Calculate MEN and WOMEN based on the guess.\"\"\"\n    men = sum(s == g for s, g in zip(secret, guess))\n    women = sum(g in secret for g in guess) - men\n    return men, women\n\nprint(\"------ Welcome to MEN and WOMEN number guessing game ------\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\nsecret_number = generate_secret_number()\nattempts = 0\nhistory = []  # เก็บประวัติการเดา\n\nwhile True:\n    user_input = input(\"Enter 4-digits number: \")\n\n    if user_input == \"0\":\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        print(\"Exiting the program.\")\n        break\n\n    if len(user_input) != 4 or not user_input.isdigit():\n        print(\"Invalid input. Please enter a 4-digit number.\")\n        continue\n\n    guess = list(map(int, user_input))\n    if len(set(guess)) != 4:\n        print(\"Digits must be unique. Try again.\")\n        continue\n\n    attempts += 1\n    men, women = calculate_hint(secret_number, guess)\n    history.append((guess, men, women))  # เก็บข้อมูลการเดา\n\n    print(f\"Hint: MEN = {men} and WOMEN = {women}\")\n\n    if men == 4:\n        print(f\"*** Congratulations *** Your guess is correct, after {attempts} attempts\")\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        break\n\n    # แสดงประวัติการเดา\n    print(\"\\nYour Guess History:\")\n    for idx, (g, m, w) in enumerate(history):\n        print(f\"{idx + 1}: {''.join(map(str, g))} -> MEN: {m}, WOMEN: {w}\")\n    print()"
    },
    {
        "filename": "(X)ตรวจสอบว่ารหัสผ่านต้องมีอักขระจากทุกประเภทในส่วนแรกและส่วนสุดท้าย.py",
        "description": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน\nimport re\n\nwhile True:\n    password = input(\"Set your password:\")\n\n    if 8 <= len(password) <= 16:\n        # Check first and last character requirements\n        if not (re.match(r'[A-Za-z0-9!@#$%^&*]', password[0]) and \n                re.match(r'[A-Za-z0-9!@#$%^&*]', password[-1])):\n            print(\"!!!ERROR!!! The password must start and end with a valid character (no spaces or special symbols other than allowed)\\n\")\n        elif (re.search(r'[A-Z]', password) and\n              re.search(r'[a-z]', password) and\n              re.search(r'[0-9]', password) and\n              re.search(r'[!@#$%^&*]', password)):\n            print(\":-) Your password is valid and secure (-: \")\n            break\n        else:\n            print(\"!!!ERROR!!! Your password does not meet the complexity requirements\\n\")\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "(XI)FactorialและFibonacci.py",
        "description": "# โปรแกรมสร้างลิสต์ Factorial และ Fibonacci พร้อมกัน",
        "content_snippet": "# โปรแกรมสร้างลิสต์ Factorial และ Fibonacci พร้อมกัน\n# สร้างลิสต์ Factorial และ Fibonacci พร้อมกัน\nprint('Generating Factorial and Fibonacci series')\nn = int(input(\"Enter 'n' for series: \"))\nresult = 1\nfactorial_list = []\nfibonacci_list = [0, 1]  # เริ่มต้นลิสต์ Fibonacci\n\n# คำนวณ Factorial และ Fibonacci\nfor i in range(1, n+1):\n    result *= i\n    factorial_list.append(result)  # เพิ่ม Factorial\n    if i > 1:\n        fibonacci_list.append(fibonacci_list[-1] + fibonacci_list[-2])  # เพิ่ม Fibonacci\n\n# แสดงผล\nprint(f\"Factorial series: {factorial_list}\")\nprint(f\"Fibonacci series: {fibonacci_list[:n]}\\n\")\n"
    },
    {
        "filename": "(XV)เพิ่มระดับการเข้ารหัสด้วยKeyMapping.py",
        "description": "# โปรแกรมที่ใช้ในการเข้ารหัสข้อความด้วยวิธีการเข้ารหัสแบบ Caesar Cipher โดยมีการกำหนดค่า key ที่ใช้ในการเข้ารหัส",
        "content_snippet": "# โปรแกรมที่ใช้ในการเข้ารหัสข้อความด้วยวิธีการเข้ารหัสแบบ Caesar Cipher โดยมีการกำหนดค่า key ที่ใช้ในการเข้ารหัส\ndef secret_password_with_mapping(text, key_mapping):\n    result = \"\"\n    for char in text:\n        if char.isalpha(): # ตรวจสอบว่าเป็นตัวอักษรหรือไม่\n            result += key_mapping.get(char, char)  # เปลี่ยนตัวอักษรโดยใช้ key_mapping\n        elif char.isspace(): # สงวนช่องว่าง\n            result += char  # สงวนช่องว่าง\n        else:\n            raise ValueError(\"ข้อผิดพลาด!!!! ข้อมูลนำเข้ามีตัวอักษรที่ไม่รองรับ\")\n    return result\n\ntry:\n    plaintext = input(\"ป้อนข้อความที่ต้องการเข้ารหัส (เฉพาะตัวอักษร): \")\n    key = int(input(\"ป้อนคีย์ลับ (เฉพาะตัวเลข): \"))\n\n    # สร้าง key mapping สำหรับตัวอักษรตัวพิมพ์ใหญ่และตัวพิมพ์เล็ก\n    key_mapping = {}\n    for i in range(26):\n        key_mapping[chr(ord('A') + i)] = chr((ord('A') + i - ord('A') + key) % 26 + ord('A')) # ตัวอักษรตัวพิมพ์ใหญ่\n        key_mapping[chr(ord('a') + i)] = chr((ord('a') + i - ord('a') + key) % 26 + ord('a')) # ตัวอักษรตัวพิมพ์เล็ก\n\n    # เข้ารหัสและแสดงผลลัพธ์\n    ciphertext = secret_password_with_mapping(plaintext, key_mapping) # เข้ารหัสข้อความ\n    print(\"ข้อความที่เข้ารหัส:\", ciphertext) # แสดงข้อความที่เข้ารหัส\n\n    # กลับด้าน key mapping เพื่อถอดรหัส\n    reverse_mapping = {v: k for k, v in key_mapping.items()} # กลับด้าน key mapping\n    decrypted_text = secret_password_with_mapping(ciphertext, reverse_mapping) # ถอดรหัสข้อความ\n    print(f'ผลลัพธ์การถอดรหัส: {decrypted_text}') # แสดงข้อความที่ถอดรหัส\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "เครื่องคิดเลขพื้นฐาน.py",
        "description": "#โปรแกรมเครื่องคิดเลขที่สามารถบวก ลบ คูณ และหาร",
        "content_snippet": "#โปรแกรมเครื่องคิดเลขที่สามารถบวก ลบ คูณ และหาร\ndef calculate(a, b, operator):\n    if operator == '+':\n        return a + b\n    elif operator == '-':\n        return a - b\n    elif operator == '*':\n        return a * b\n    elif operator == '/':\n        if b == 0:\n            return \"หารด้วยศูนย์ไม่ได้\"\n        return a / b\n    else:\n        return \"ตัวดำเนินการไม่ถูกต้อง\"\n\n# รับข้อมูลจากผู้ใช้\na = float(input(\"ใส่ตัวเลขที่ 1: \"))\nb = float(input(\"ใส่ตัวเลขที่ 2: \"))\noperator = input(\"ใส่ตัวดำเนินการ (+, -, *, /): \")\n\nresult = calculate(a, b, operator)\nprint(f\"ผลลัพธ์: {result}\")"
    },
    {
        "filename": "(XV)เพิ่มรหัสผ่านสำหรับการอนุมัติการถอดรหัส.py",
        "description": "# โปรแกรมเข้ารหัสข้อความด้วยวิธี Caesar Cipher และถอดรหัสด้วยรหัสผ่าน",
        "content_snippet": "# โปรแกรมเข้ารหัสข้อความด้วยวิธี Caesar Cipher และถอดรหัสด้วยรหัสผ่าน\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha(): # ตรวจสอบว่าเป็นตัวอักษรหรือไม่\n            shift_base = ord('A') if char.isupper() else ord('a') # ตรวจสอบว่าเป็นตัวพิมพ์ใหญ่หรือเล็ก\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base) # คำนวณตำแหน่งของตัวอักษรที่ถูกเข้ารหัส\n            result += shifted_char # ต่อค่าที่ถูกเข้ารหัสเข้ากับตัวแปร\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n    password = input(\"Set a password for decryption: \")\n\n    # เข้ารหัสข้อความ\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    # ตรวจสอบรหัสผ่านก่อนถอดรหัส\n    input_password = input(\"Enter password to decrypt: \")\n    if input_password == password: # ถ้ารหัสผ่านถูกต้อง\n        decrypted_text = secret_password(ciphertext, -key) # ถอดรหัสข้อความ\n        print(f'The decryption result: {decrypted_text}') # แสดงผลลัพธ์\n    else:\n        print(\"Error: Invalid password!\")\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "คำนวณเกรด.py",
        "description": "# โปรแกรมคำนวณเกรดของนักเรียน",
        "content_snippet": "# โปรแกรมคำนวณเกรดของนักเรียน\n#Input Example\nmyInput = int(input())\n\nif myInput >= 80:\n  print(\"A\")\n\nelif myInput >= 70:\n   print(\"B\")\n\nelif myInput >= 60:\n   print(\"C\")\n\nelif myInput >= 50:\n   print(\"D\")\n\nelse:\n   print(\"F\")"
    },
    {
        "filename": "(5)โปรแกรมการทอนเงินของการซื้อสินค้า.py",
        "description": "# โปรแกรมคำนวณเงินทอน",
        "content_snippet": "# โปรแกรมคำนวณเงินทอน\n#Calculate the change and display it in a formatted way.\ndef calculate_change(total_price, payment): # ฟังก์ชันคำนวณเงินทอน\n    denominations = { # ค่าเงินแต่ละหน่วย\n        \"The 500-$Baht Banknote\": 500,\n        \"The 100-$Baht Banknote\": 100,\n        \"The 50-$Baht Banknote\": 50,\n        \"The 20-$Baht Banknote\": 20,\n        \"The 10-$Baht Coin\": 10,\n        \"The 5-$Baht Coin\": 5,\n        \"The 2-$Baht Coin\": 2,\n        \"The 1-$Baht Coin\": 1,\n    }\n    change = payment - total_price # คำนวณเงินทอน\n\n    if change < 0: # กรณีที่เงินทอนน้อยกว่า 0\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0: # กรณีที่เงินทอนเท่ากับ 0\n        return \"Complete payment\"\n    else:\n        result = [] # สร้างรายการเพื่อเก็บข้อมูลการคำนวณเงินทอน\n        for denom, value in denominations.items(): # วนลูปเพื่อคำนวณเงินทอน\n            count = change // value # คำนวณจำนวนเงินทอน\n            if count > 0: # กรณีที่มีเงินทอน\n                unit = \"Piece(s)\" if \"Banknote\" in denom else \"Coin(s)\" # หน่วยเงินทอน\n                result.append(f\"{denom} = {count} {unit}\") # เพิ่มข้อมูลการคำนวณเงินทอน\n            change %= value # คำนวณเงินทอนที่เหลือ\n        return \"\\n\".join(result) # แสดงข้อมูลการคำนวณเงินทอน\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    total_price = int(input(\"The total price of products: \"))\n    payment = int(input(\"Customer payment: \"))\n    print(\"----------------------------------------------------------\")\n    \n    if payment == 0: # กรณีที่ป้อน 0\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change(total_price, payment) # เรียกใช้\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "(X)เพิ่มข้อกำหนดห้ามใช้ตัวอักษรในลำดับต่อเนื่องเช่นabcหรือ123.py",
        "description": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน\nimport re\n\nwhile True:\n    password = input(\"Set your password:\")\n\n    def has_sequential_chars(password):\n        \"\"\"Check if the password contains sequential characters like 'abc' or '123'.\"\"\"\n        for i in range(len(password) - 2):\n            if password[i:i+3].isdigit() or password[i:i+3].isalpha():\n                if ord(password[i]) + 1 == ord(password[i+1]) and ord(password[i+1]) + 1 == ord(password[i+2]):\n                    return True\n        return False\n\n    if 8 <= len(password) <= 16:\n        if has_sequential_chars(password):\n            print(\"!!!ERROR!!! The password must not contain 3 or more sequential characters like 'abc' or '123'\\n\")\n        elif (re.search(r'[A-Z]', password) and\n              re.search(r'[a-z]', password) and\n              re.search(r'[0-9]', password) and\n              re.search(r'[!@#$%^&*]', password)):\n            print(\":-) Your password is valid and secure (-: \")\n            break\n        else:\n            print(\"!!!ERROR!!! Your password does not meet the complexity requirements\\n\")\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "เพิ่มของลดของ_lv1(III).py",
        "description": "# โปรแกรมจัดการข้อมูลสินค้าในคลัง",
        "content_snippet": "# โปรแกรมจัดการข้อมูลสินค้าในคลัง\n#เพื่อเพิ่มความซับซ้อนและประยุกต์โค้ดมากขึ้นสำหรับการฝึกซ้อม ผมจะปรับโค้ดโดยเพิ่มฟังก์ชันที่ช่วยลดการเขียนซ้ำ เพิ่มการคำนวณเพิ่มเติม และเพิ่มคุณสมบัติในการจัดการข้อมูล เช่น การแสดงข้อมูลรวม การคำนวณราคา รวมถึงการจัดการข้อผิดพลาดในการป้อนข้อมูล\ndef get_product_info(index):\n    #รับข้อมูลสินค้าแต่ละชิ้นจากผู้ใช้\n    #- index: ลำดับที่ของสินค้า\n    #- คืนค่า (product, price, quantity)\n\n    while True:  # ใช้ loop เพื่อให้ผู้ใช้กรอกข้อมูลใหม่ในกรณีที่มีข้อผิดพลาด\n        try:\n            product = str(input(f'Enter the name of product {index}: '))  # ชื่อสินค้า\n            price = float(input(f'Enter the price of product {index}: '))  # ราคาสินค้า\n            quantity = int(input(f'Enter the quantity of product {index}: '))  # จำนวนสินค้า\n            if price < 0 or quantity < 0:  # ตรวจสอบว่าราคาและจำนวนต้องไม่ติดลบ\n                raise ValueError(\"Price and quantity must be non-negative.\")\n            return product, price, quantity  # คืนค่าข้อมูลเมื่อไม่มีข้อผิดพลาด\n        except ValueError as e:\n            # แสดงข้อความข้อผิดพลาดและให้กรอกข้อมูลใหม่\n            print(f\"Invalid input: {e}. Please try again.\")\n\ndef display_inventory(products):\n    #แสดงตารางสินค้าในคลัง พร้อมรวมยอดทั้งหมด\n    #- products: รายการสินค้าที่เป็น list ของ (product, price, quantity)\n    # กำหนดความกว้างของคอลัมน์ในตาราง\n    width_product = 25\n    width_price = 10\n    width_quantity = 15\n    width_total = 10\n\n    # พิมพ์หัวตาราง\n    print('-' * 65)\n    print('                     Inventory                     ')\n    print('-' * 65)\n    print(f\"{'Item':<{width_product}}{'Price':>{width_price}}{'Quantity':>{width_quantity}}{'Total':>{width_total}}\")\n    print('-' * 65)\n\n    # ตัวแปรสำหรับเก็บผลรวม\n    grand_total = 0  # ยอดรวมราคาสินค้าทั้งหมด\n    total_quantity = 0  # ยอดรวมจำนวนสินค้าทั้งหมด\n\n    # แสดงข้อมูลสินค้าแต่ละชิ้น\n    for product, price, quantity in products:\n        total = price * quantity  # คำนวณราคาสินค้ารวม (ราคา * จำนวน)\n        grand_total += total  # เพิ่มยอดรวมสินค้าลงใน grand_total\n        total_quantity += quantity  # เพิ่มจำนวนสินค้าใน total_quantity\n        # พิมพ์ข้อมูลสินค้าแต่ละชิ้นในตาราง\n        print(f\"{product:<{width_product}}{price:>{width_price}.2f}{quantity:>{width_quantity}}{total:>{width_total}.2f}\")\n    \n    # แสดงผลรวมทั้งหมด\n    print('-' * 65)\n    print(f\"{'Total Quantity':<{width_product}}{'':>{width_price + width_quantity}}{total_quantity:>{width_total}}\")\n    print(f\"{'Grand Total':<{width_product}}{'':>{width_price + width_quantity}}{grand_total:>{width_total}.2f}\")\n    print('-' * 65)\n\ndef main():\n    #โปรแกรมหลักสำหรับจัดการข้อมูลสินค้าในคลัง\n    print(\"Welcome to the Inventory Management System!\")  # ข้อความต้อนรับ\n    products = []  # รายการเก็บข้อมูลสินค้า\n    for i in range(1, 4):  # ใช้ loop เพื่อขอข้อมูลสินค้า 3 ชิ้น (สามารถเพิ่มจำนวนได้ง่าย)\n        products.append(get_product_info(i))  # เก็บข้อมูลสินค้าใน list\n    \n    display_inventory(products)  # เรียกฟังก์ชันแสดงตารางสินค้า\n\n# เรียกใช้งานโปรแกรมหลัก\nmain()\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับด้านพร้อมแสดงเลขลำดับในแต่ละแถว.py",
        "description": "# Drawing a reversed right triangle with numbers in each row",
        "content_snippet": "# Drawing a reversed right triangle with numbers in each row\nwhile True:\n    height = int(input(\"Enter the height of the triangle (0 to quit): \"))\n    if height == 0:\n        break\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        if i == 1:\n            stars = f\"{i}\"\n        elif i == height:\n            stars = ' '.join(str(j) for j in range(1, i + 1))\n        else:\n            stars = f\"{i}\" + ' ' * (2 * (i - 2)) + f\"{i}\"\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "(4)เพิ่มระดับความยาก(ง่าย_ปานกลาง_ยาก).py",
        "description": "# เกม MEN and WOMEN โดยเพิ่มระดับความยากให้เลือก",
        "content_snippet": "# เกม MEN and WOMEN โดยเพิ่มระดับความยากให้เลือก\nimport random\n\ndef generate_secret_number(length): # สร้างเลขที่ถูก\n    \"\"\"Generate a secret number with unique digits of specified length.\"\"\" # สร้างเลขที่ถูก\n    return random.sample(range(10), length) # สร้างเลขที่ถูก\n\ndef calculate_hint(secret, guess): # คำนวณค่า hint\n    \"\"\"Calculate MEN and WOMEN based on the guess.\"\"\"\n    men = sum(s == g for s, g in zip(secret, guess)) # นับจำนวนที่ทายถูก\n    women = sum(g in secret for g in guess) - men # นับจำนวนที่ทายผิด\n    return men, women # คืนค่า\n\nprint(\"------ Welcome to MEN and WOMEN number guessing game ------\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\n# เลือกระดับความยาก\ndifficulty = input(\"Choose difficulty level: Easy(4 digits), Medium(5 digits), Hard(6 digits): \").lower() # รับค่าจากผู้ใช้\nif difficulty == \"easy\": # ถ้าเป็น easy จะเป็น 4 หลัก\n    num_digits = 4\nelif difficulty == \"medium\": # ถ้าเป็น medium จะเป็น 5 หลัก\n    num_digits = 5\nelse:\n    num_digits = 6 # ถ้าไม่ใช่ easy หรือ medium จะเป็น hard\n\nsecret_number = generate_secret_number(num_digits) # สร้างเลขที่ถูก\nattempts = 0 # จำนวนครั้งที่ทาย\n\nwhile True:\n    user_input = input(f\"Enter {num_digits}-digit number: \") # รับค่าจากผู้ใช้\n\n    if user_input == \"0\": # ถ้าใส่ 0 จะออกจากโปรแกรม\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\") # แสดงเลขที่ถูก\n        print(\"Exiting the program.\") # แสดงข้อความว่าออก\n        break\n\n    if len(user_input) != num_digits or not user_input.isdigit(): # ตรวจสอบว่าเป็นตัวเลขหรือไม่\n        print(f\"Invalid input. Please enter a {num_digits}-digit number.\") # แสดงข้อความว่าใส่ผิด\n        continue\n\n    guess = list(map(int, user_input)) # แปลงข้อมูลให้เป็น list\n    if len(set(guess)) != num_digits: # ตรวจสอบว่าเลขซ้ำกันหรือไม่\n        print(\"Digits must be unique. Try again.\") # แสดงข้อความว่าใส่ซ้ำ\n        continue # วน loop ใหม่\n\n    attempts += 1 # นับจำนวนครั้งที่ทาย\n    men, women = calculate_hint(secret_number, guess) # คำนวณค่า hint\n\n    print(f\"Hint: MEN = {men} and WOMEN = {women}\") # แสดงค่า hint\n\n    if men == num_digits: # ถ้าทายถูกทุกตัว\n        print(f\"*** Congratulations *** Your guess is correct, after {attempts} attempts\") # แสดงข้อความว่าถูก\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\") # แสดงเลขที่ถูก\n        break"
    },
    {
        "filename": "(XV)เพิ่มตัวเลือกโหมดUppercaseหรือLowercase.py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความที่มีตัวอักษรเท่านั้น โดยใช้วิธีการเข้ารหัสแบบ Caesar Cipher โดยมีการเลือกโหมดการทำงาน 3 แบบ คือ",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความที่มีตัวอักษรเท่านั้น โดยใช้วิธีการเข้ารหัสแบบ Caesar Cipher โดยมีการเลือกโหมดการทำงาน 3 แบบ คือ\ndef secret_password(text, key, mode=\"normal\"): # ฟังก์ชันเข้ารหัสข้อความด้วยวิธี Caesar Cipher\n    result = \"\"\n    for char in text: # วนลูปตามตัวอักษรในข้อความ\n        if char.isalpha(): # ตรวจสอบว่าเป็นตัวอักษรหรือไม่\n            shift_base = ord('A') if char.isupper() else ord('a') # ตรวจสอบว่าเป็นตัวพิมพ์ใหญ่หรือเล็ก\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base) # คำนวณตำแหน่งของตัวอักษรที่ถูกเข้ารหัส\n            if mode == \"uppercase\": # ตรวจสอบโหมดการทำงาน\n                shifted_char = shifted_char.upper() # แปลงเป็นตัวพิมพ์ใหญ่\n            elif mode == \"lowercase\": # ตรวจสอบโหมดการทำงาน\n                shifted_char = shifted_char.lower() # แปลงเป็นตัวพิมพ์เล็ก\n            result += shifted_char # ต่อค่าท\n        else:\n            raise ValueError(\"Error!!!! Input non-characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n    mode = input(\"Choose mode (normal/uppercase/lowercase): \").strip().lower() # รับโหมดการทำงาน\n\n    ciphertext = secret_password(plaintext, key, mode) # เข้ารหัสข้อความ\n    print(\"The encrypted ciphertext:\", ciphertext) # แสดงข้อความที่ถูกเข้ารหัส\n\n    decrypted_text = secret_password(ciphertext, -key, mode) # ถอดรหัสข้อความ\n    print(f'The decryption result: {decrypted_text}') # แสดงผลลัพธ์\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(5)เพิ่มระบบให้ผู้ใช้เลือกประเภทธนบัตรหรือเหรียญที่ต้องการใช้ในการทอน.py",
        "description": "# โปรแกรมคำนวณเงินทอน โดยรับค่าราคาสินค้า และจำนวนเงินที่ลูกค้าจ่าย และรายการเหรียญที่ใช้ในการทอนเงิน",
        "content_snippet": "# โปรแกรมคำนวณเงินทอน โดยรับค่าราคาสินค้า และจำนวนเงินที่ลูกค้าจ่าย และรายการเหรียญที่ใช้ในการทอนเงิน\n# Program to calculate change with user-specified denominations\ndef calculate_change_custom(total_price, payment, allowed_denominations):\n    change = payment - total_price\n    if change < 0:\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in allowed_denominations.items():\n            count = change // value\n            if count > 0:\n                result.append(f\"{denom} = {count} Piece(s)\")\n            change %= value\n        return \"\\n\".join(result)\n\ndenominations = {\n    \"The 500-$Baht Banknote\": 500,\n    \"The 100-$Baht Banknote\": 100,\n    \"The 50-$Baht Banknote\": 50,\n    \"The 20-$Baht Banknote\": 20,\n    \"The 10-$Baht Coin\": 10,\n    \"The 5-$Baht Coin\": 5,\n    \"The 2-$Baht Coin\": 2,\n    \"The 1-$Baht Coin\": 1,\n}\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    allowed = input(\"Enter denominations to use (e.g., 500,100,50): \").split(\",\")\n    allowed_denominations = {k: v for k, v in denominations.items() if str(v) in allowed}\n    total_price = int(input(\"The total price of products: \"))\n    payment = int(input(\"Customer payment: \"))\n    print(\"----------------------------------------------------------\")\n\n    if payment == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change_custom(total_price, payment, allowed_denominations)\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมมุมฉากแบบกลับด้านมีช่องว่างตรงกลาง.py",
        "description": "while True:",
        "content_snippet": "while True:\n    height = int(input(\"Enter the height of reversed right triangle with space inside: \"))\n\n    if height == 0:\n        break\n\n    for i in range(height, 0, -1):\n        spaces = ' ' * (height - i)\n        if i == 1:\n            stars = '*'\n        elif i == height:\n            stars = '*' * i\n        else:\n            stars = '*' + ' ' * (i - 2) + '*'\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "(XV)เข้ารหัสแบบแถว(RowEncryption).py",
        "description": "# โปรแกรมที่ใช้ในการเข้ารหัสข้อความโดยใช้วิธีการ Caesar cipher และแบ่งข้อความเป็นแถวๆ",
        "content_snippet": "# โปรแกรมที่ใช้ในการเข้ารหัสข้อความโดยใช้วิธีการ Caesar cipher และแบ่งข้อความเป็นแถวๆ\ndef secret_password_row(text, key, row_count):\n    result = \"\"\n    for char in text:\n        if char.isalpha():  # Check if the character is a letter\n            shift_base = ord('A') if char.isupper() else ord('a')  # Determine ASCII base\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base) # Calculate the shifted character\n            result += shifted_char  # Append the encrypted character\n        elif char.isspace():\n            result += char\n        else:\n            raise ValueError(\"Error!!!! Input contains unsupported characters.\")\n    \n    # Split the result into rows of approximately equal size\n    row_size = len(result) // row_count + (len(result) % row_count > 0) # Calculate the row size\n    return [result[i:i + row_size] for i in range(0, len(result), row_size)] # Split the result into rows\n\ntry:\n    # Input text, key, and desired number of rows\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n    row_count = int(input(\"Enter number of rows for output (Integer Only): \"))\n\n    # Encrypt the plaintext and split it into rows\n    encrypted_rows = secret_password_row(plaintext, key, row_count) # Encrypt and split the text\n    print(\"The encrypted text split into rows:\")\n    for i, row in enumerate(encrypted_rows, 1):\n        print(f\"Row {i}: {row}\")\n\n    # Combine the rows back and decrypt to verify\n    combined_encrypted = ''.join(encrypted_rows) # Combine the rows back\n    decrypted_text = secret_password_row(combined_encrypted, -key, 1)[0]  # Decrypt back to single row\n    print(f\"The decryption result: {decrypted_text}\") # Print the decrypted text\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "ใช้งานLambdaเพื่อสร้างMatrixFunction.py",
        "description": "# โปรแกรมสร้างเมทริกซ์โดยใช้ฟังก์ชันแบบ Lambda",
        "content_snippet": "# โปรแกรมสร้างเมทริกซ์โดยใช้ฟังก์ชันแบบ Lambda\nprint('*' * 70)\nprint('Matrix Function using Lambda'.center(70))\nprint('*' * 70)\n\n# สร้างฟังก์ชันเมทริกซ์แบบยืดหยุ่น\ncreate_matrix = lambda rows, cols: [[i * j for j in range(1, cols+1)] for i in range(1, rows+1)]\n\n# รับขนาดเมทริกซ์จากผู้ใช้\nrows, cols = map(int, input(\"Enter matrix dimensions (rows cols): \").split())\n\n# สร้างเมทริกซ์\nmatrix = create_matrix(rows, cols)\n\nprint(\"\\nGenerated Matrix:\")\nfor row in matrix:\n    print(row)"
    },
    {
        "filename": "(X)จำกัดการใช้ตัวเลขติดกันเกิน3ตัวเช่น1234.py",
        "description": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน\nimport re\n\nwhile True:\n    password = input(\"Set your password:\")\n\n    if 8 <= len(password) <= 16:\n        if re.search(r'\\d{4,}', password):  # Check for sequential digits\n            print(\"!!!ERROR!!! The password must not contain more than 3 consecutive digits\\n\")\n        elif (re.search(r'[A-Z]', password) and\n              re.search(r'[a-z]', password) and\n              re.search(r'[0-9]', password) and\n              re.search(r'[!@#$%^&*]', password)):\n            print(\":-) Your password is valid and secure (-: \")\n            break\n        else:\n            print(\"!!!ERROR!!! Your password does not meet the complexity requirements\\n\")\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "เกมจับคู่ความจำ.py",
        "description": "# โปรแกรมเกมจับคู่ความจำ",
        "content_snippet": "# โปรแกรมเกมจับคู่ความจำ\n# เกมจับคู่ความจำ\nimport random\n\ndef generate_board(size):\n    # สร้างตารางพร้อมคู่ตัวเลข\n    numbers = list(range(1, (size * size) // 2 + 1)) * 2\n    random.shuffle(numbers)\n    return [numbers[i:i + size] for i in range(0, len(numbers), size)]\n\ndef print_board(board, revealed):\n    # แสดงตาราง\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if revealed[i][j]:\n                print(board[i][j], end=\" \")\n            else:\n                print(\"*\", end=\" \")\n        print()\n\ndef play_memory_game(size):\n    board = generate_board(size)\n    revealed = [[False] * size for _ in range(size)]\n    attempts = 0\n    pairs_found = 0\n\n    print(\"เริ่มเกมจับคู่ความจำ!\")\n    while pairs_found < (size * size) // 2:\n        print_board(board, revealed)\n        row1, col1 = map(int, input(\"เลือกตำแหน่งแรก (row col): \").split())\n        row2, col2 = map(int, input(\"เลือกตำแหน่งที่สอง (row col): \").split())\n        attempts += 1\n\n        if board[row1][col1] == board[row2][col2]:\n            revealed[row1][col1] = True\n            revealed[row2][col2] = True\n            pairs_found += 1\n            print(\"จับคู่สำเร็จ!\")\n        else:\n            print(\"จับคู่ไม่สำเร็จ!\")\n    \n    print(f\"คุณชนะเกม! ใช้ความพยายามทั้งหมด {attempts} ครั้ง\")\n\n# ตัวอย่างการใช้งาน\nplay_memory_game(4)  # เล่นเกมในตารางขนาด 4x4"
    },
    {
        "filename": "(2)เพิ่มการคำนวณผลรวมของแถว.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม โดยเริ่มจากแถวแรกด้วยเลข 1",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม โดยเริ่มจากแถวแรกด้วยเลข 1 \n# และคำนวณแต่ละตัวในแถวถัดไปโดยใช้ผลรวมของเลขในแถวก่อนหน้า\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]  # เริ่มต้นด้วยแถวที่ 0\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]  # แถวก่อนหน้า\n        new_row = [previous_row[-1]]  # ตัวแรก: เลขสุดท้ายของแถวก่อนหน้า\n        for j in range(len(previous_row)): # วนลูปเพื่อสร้างตัวเลขใหม่\n            new_row.append(new_row[-1] + previous_row[j])  # สร้างตัวเลขใหม่จากผลรวม\n        rows.append(new_row)  # เพิ่มแถวใหม่เข้าไปในรายการ\n    return rows\n\ndef main():\n    rows = []  # เก็บผลลัพธ์ของแถว\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            print(f\"Row {user_row}: {rows[user_row]}\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "(4)เพิ่มโหมดผู้เล่น 2 คน (แข่งขันกัน).py",
        "description": "# เกม MEN and WOMEN แบบผู้เล่น 2 คน",
        "content_snippet": "# เกม MEN and WOMEN แบบผู้เล่น 2 คน\nimport random\n\ndef generate_secret_number(): # ฟังก์ชันสร้างเลขที่ถูก\n    \"\"\"Generate a 4-digit secret number with unique digits.\"\"\"\n    return random.sample(range(10), 4) # สร้างเลขไม่ซ้ำ 4 ตัว\n\ndef calculate_hint(secret, guess): # ฟังก์ชันคำนวณ hint\n    \"\"\"Calculate MEN and WOMEN based on the guess.\"\"\"\n    men = sum(s == g for s, g in zip(secret, guess)) # นับ MEN โดยเทียบตำแหน่งและค่า\n    women = sum(g in secret for g in guess) - men # WOMEN คือนับเลขที่อยู่ในคำตอบแต่ไม่ตรงตำแหน่ง\n    return men, women # คืนค่า MEN และ WOMEN\n\nprint(\"------ Welcome to MEN and WOMEN number guessing game ------\")\nprint(\"[Player 1 and Player 2 take turns to guess]\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\n# สร้างเลขที่ถูกสำหรับผู้เล่นแต่ละคน\nsecret_number_p1 = generate_secret_number() # เลขของ Player 1\nsecret_number_p2 = generate_secret_number() # เลขของ Player 2\n\nattempts_p1 = 0 # จำนวนครั้งที่ Player 1 ทาย\nattempts_p2 = 0 # จำนวนครั้งที่ Player 2 ทาย\n\nwhile True:\n    # Player 1's turn\n    print(\"\\n--- Player 1's Turn ---\")\n    user_input_p1 = input(\"Player 1, enter 4-digits number: \")\n\n    if user_input_p1 == \"0\": # ตรวจสอบว่าออกจากโปรแกรมหรือไม่\n        print(f\"Player 1's Secret Number was: {''.join(map(str, secret_number_p1))}\")\n        print(f\"Player 2's Secret Number was: {''.join(map(str, secret_number_p2))}\")\n        print(\"Exiting the program.\")\n        break\n\n    if len(user_input_p1) != 4 or not user_input_p1.isdigit(): # ตรวจสอบว่าป้อนตัวเลขถูกต้องหรือไม่\n        print(\"Invalid input. Please enter a 4-digit number.\")\n        continue\n\n    guess_p1 = list(map(int, user_input_p1)) # แปลงตัวเลขเป็น list\n    if len(set(guess_p1)) != 4: # ตรวจสอบว่าเลขซ้ำกันหรือไม่\n        print(\"Digits must be unique. Try again.\")\n        continue\n\n    attempts_p1 += 1 # เพิ่มจำนวนครั้งที่ Player 1 ทาย\n    men_p1, women_p1 = calculate_hint(secret_number_p2, guess_p1) # คำนวณ hint\n\n    print(f\"Hint for Player 1: MEN = {men_p1} and WOMEN = {women_p1}\")\n\n    if men_p1 == 4: # ถ้าทายถูกทั้งหมด\n        print(f\"*** Player 1 Wins *** Guessed correctly after {attempts_p1} attempts!\")\n        print(f\"Player 2's Secret Number was: {''.join(map(str, secret_number_p2))}\")\n        break\n\n    # Player 2's turn\n    print(\"\\n--- Player 2's Turn ---\")\n    user_input_p2 = input(\"Player 2, enter 4-digits number: \")\n\n    if user_input_p2 == \"0\": # ตรวจสอบว่าออกจากโปรแกรมหรือไม่\n        print(f\"Player 1's Secret Number was: {''.join(map(str, secret_number_p1))}\")\n        print(f\"Player 2's Secret Number was: {''.join(map(str, secret_number_p2))}\")\n        print(\"Exiting the program.\")\n        break\n\n    if len(user_input_p2) != 4 or not user_input_p2.isdigit(): # ตรวจสอบว่าป้อนตัวเลขถูกต้องหรือไม่\n        print(\"Invalid input. Please enter a 4-digit number.\")\n        continue\n\n    guess_p2 = list(map(int, user_input_p2)) # แปลงตัวเลขเป็น list\n    if len(set(guess_p2)) != 4: # ตรวจสอบว่าเลขซ้ำกันหรือไม่\n        print(\"Digits must be unique. Try again.\")\n        continue\n\n    attempts_p2 += 1 # เพิ่มจำนวนครั้งที่ Player 2 ทาย\n    men_p2, women_p2 = calculate_hint(secret_number_p1, guess_p2) # คำนวณ hint\n\n    print(f\"Hint for Player 2: MEN = {men_p2} and WOMEN = {women_p2}\")\n\n    if men_p2 == 4: # ถ้าทายถูกทั้งหมด\n        print(f\"*** Player 2 Wins *** Guessed correctly after {attempts_p2} attempts!\")\n        print(f\"Player 1's Secret Number was: {''.join(map(str, secret_number_p1))}\")\n        break"
    },
    {
        "filename": "รรวมข้อมูลสองชุด.py",
        "description": "#โปรแกรมรวมข้อมูลสองชุดตามคีย์ที่กำหนด",
        "content_snippet": "#โปรแกรมรวมข้อมูลสองชุดตามคีย์ที่กำหนด\ndef merge_data(data1, data2, key):\n    merged_data = {}\n    for item in data1:\n        merged_data[item[key]] = item\n    for item in data2:\n        if item[key] in merged_data:\n            merged_data[item[key]].update(item)\n    return list(merged_data.values())\n\n# ตัวอย่างข้อมูล\ndata1 = [\n    {\"id\": 1, \"name\": \"สมชาย\", \"age\": 25},\n    {\"id\": 2, \"name\": \"สมหญิง\", \"age\": 30}\n]\n\ndata2 = [\n    {\"id\": 1, \"city\": \"กรุงเทพ\"},\n    {\"id\": 2, \"city\": \"เชียงใหม่\"}\n]\n\nmerged_data = merge_data(data1, data2, \"id\")\nprint(\"ข้อมูลหลังการรวม:\")\nfor item in merged_data:\n    print(item)"
    },
    {
        "filename": "(IX)สร้างปิรามิด.py",
        "description": "# โค้ดสร้างปิรามิด",
        "content_snippet": "# โค้ดสร้างปิรามิด\nprint('---------- Drawing pyramids ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the height of the pyramid (at least 2): \"))\n\n    if size == 0:\n        break\n    elif size >= 2:\n        for i in range(size):\n            print(\" \" * (size - i - 1) + \"#\" * (2 * i + 1))\n    else:\n        print(\"Invalid input. Please enter a size >= 2.\")\n"
    },
    {
        "filename": "(IV)นับคำ_หารหัสลับ.py",
        "description": "# โปรแกรมหาจำนวนตัวอักษร และจำนวนคำ และหา secret code จาก string ที่กำหนดให้",
        "content_snippet": "# โปรแกรมหาจำนวนตัวอักษร และจำนวนคำ และหา secret code จาก string ที่กำหนดให้\ns1 = \"Python is a powerful high-level, object-oriented programming language created by Guido van Rossum.\"\ns2 = \"It has simple easy-to-use syntax, making it the perfect language for someone trying to learn computer programming for the first time.\"\ns3 = \"Professionally, Python is great for backend web development, data analysis, artificial intelligence, and scientific computing.\"\n\n#characters\ntotal_char = len(s1) + len(s2) + len(s3)\nprint(f\"Total characters in string s1, s2 and s3 are {total_char} characters\")\n\n#words\ntotal_split = s1.split() + s2.split() + s3.split()\ntotal_word = len(total_split)\nprint(f\"Total words in string s1, s2 and s3 are {total_word} words\")\n\n#secret\ns1_secret = s1[::-1][19] + s1[::-1][2] + s1[::-1][80]\n\ns2_no_space = s2.replace(\" \", \"\")\ns2_secret = s2_no_space[43] + s2_no_space[3]\n\ns3_no_space = s3.replace(\" \",\"\")\ns3_secret = s3_no_space[::-1][30] + s3_no_space[::-1][8]\n\nsecret_code = s1_secret + s2_secret + s3_secret\n\nprint(f\"The secret code is {secret_code}\")"
    },
    {
        "filename": "(VIII)เพิ่มระบบการกรองข้อมูลด้วยInputจากผู้ใช้pythonCopycode.py",
        "description": "# โปรแกรมกรองข้อมูลตามเกณฑ์ที่ผู้ใช้กำหนด",
        "content_snippet": "# โปรแกรมกรองข้อมูลตามเกณฑ์ที่ผู้ใช้กำหนด\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n            'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n            'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n            'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n            'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n            'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n            'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\n# ฟังก์ชัน: กรองข้อมูลตามเกณฑ์ที่ผู้ใช้กำหนด\ndef filter_by_user_input(lst):\n    print(\"Enter minimum points:\")\n    min_points = int(input())\n    print(\"Enter maximum ratio:\")\n    max_ratio = float(input())\n    filtered = [sublist for sublist in lst if sublist[1] >= min_points and sublist[3] <= max_ratio]\n    return filtered\n\n# แบ่งข้อมูลออกเป็น sublists (เหมือนเดิม)\nsublists = [data_game[i:i+4] for i in range(0, len(data_game), 4)]\n\n# กรองข้อมูลด้วย Input จากผู้ใช้\nfiltered_sublists = filter_by_user_input(sublists)\n\n# แสดงผลลัพธ์\nprint(\"Filtered Sublists:\")\nfor sublist in filtered_sublists:\n    print(sublist)\n"
    },
    {
        "filename": "สร้างฮิสโตแกรมพร้อมช่วงที่กำหนดเอง.py",
        "description": "#โปรแกรมสร้างฮิสโตแกรมที่สามารถกำหนดช่วงของข้อมูลได้เอง",
        "content_snippet": "#โปรแกรมสร้างฮิสโตแกรมที่สามารถกำหนดช่วงของข้อมูลได้เอง\nimport matplotlib.pyplot as plt\n\ndef plot_histogram_with_bins(data, bins):\n    plt.hist(data, bins=bins, edgecolor='black', alpha=0.7)\n    plt.title(\"ฮิสโตแกรมพร้อมช่วงที่กำหนดเอง\")\n    plt.xlabel(\"ช่วงข้อมูล\")\n    plt.ylabel(\"ความถี่\")\n    plt.show()\n\n# ตัวอย่างการใช้งาน\ndata = [12, 15, 12, 13, 19, 21, 24, 25, 23, 22, 18, 19, 24, 25, 25, 30, 31, 35]\nbins = [10, 15, 20, 25, 30, 35]\nplot_histogram_with_bins(data, bins)"
    },
    {
        "filename": "(7)เพิ่มการคำนวณคะแนนสูงสุด-ต่ำสุดในวิชา.py",
        "description": "# โปรแกรมแสดงผลการสอบของนักเรียนในรายวิชาที่เลือก",
        "content_snippet": "# โปรแกรมแสดงผลการสอบของนักเรียนในรายวิชาที่เลือก\nfrom module_exam import Info_Dict, grading\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nsubject = input(\"Enter your subject [Mathematics, Physics, English, Chemistry, Computer]: \")\n\nif subject not in valid_subjects:\n    print(\"----------------------------------------------------------\")\n    print(\"!!!   Subject Error   !!!\")\n    print(\"----------------------------------------------------------\\n\")\nelse:\n    print(\"----------------------------------------------------------\")\n    grades_count = {'A': 0, 'B+': 0, 'B': 0, 'C+': 0, 'C': 0, 'D+': 0, 'D': 0, 'F': 0}\n    total_score = 0\n    max_score = -1\n    min_score = 101\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        grade = grading(subject, score)\n        grades_count[grade] += 1\n        total_score += score\n        max_score = max(max_score, score)\n        min_score = min(min_score, score)\n\n    total_students = len(Info_Dict)\n    print(f\"{'Grade':<10}{'A number of students (Percentage)':<30}\")\n    for grade, count in grades_count.items():\n        percentage = (count / total_students) * 100\n        print(f\"  {grade:<17}{count:>2} ({percentage:>5.2f})\")\n\n    average_score = total_score / total_students\n    print(\"----------------------------------------------------------\")\n    print(f\"  Average Score = {average_score:.2f}\")\n    print(f\"  Maximum Score = {max_score}\")\n    print(f\"  Minimum Score = {min_score}\")\n    print(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "สร้างกราฟกระจาย.py",
        "description": "#โปรแกรมสร้างกราฟกระจายเพื่อแสดงความสัมพันธ์ระหว่างข้อมูล 2 ชุด",
        "content_snippet": "#โปรแกรมสร้างกราฟกระจายเพื่อแสดงความสัมพันธ์ระหว่างข้อมูล 2 ชุด\nimport matplotlib.pyplot as plt\n\ndef plot_scatter(x, y):\n    plt.scatter(x, y, c='blue', alpha=0.7)\n    plt.title(\"กราฟกระจาย\")\n    plt.xlabel(\"แกน X\")\n    plt.ylabel(\"แกน Y\")\n    plt.grid(True)\n    plt.show()\n\n# ตัวอย่างการใช้งาน\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nplot_scatter(x, y)"
    },
    {
        "filename": "(XII)roman_number.py",
        "description": "# โปรแกรมแปลงเลขเป็นเลขโรมันและเลขโรมันเป็นเลข",
        "content_snippet": "# โปรแกรมแปลงเลขเป็นเลขโรมันและเลขโรมันเป็นเลข\ndef int_to_roman(number): # ฟังก์ชันแปลงเลขเป็นเลขโรมัน\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\" # สร้างตัวแปรสำหรับเก็บเลขโรมัน\n    for roman, value in roman_numerals: # วนลูปเพื่อแปลงเลขเป็นเลขโรมัน\n        while number >= value: # วนลูปเพื่อเพิ่มเลขโรมัน\n            result += roman # เพิ่มเลขโรมัน\n            number -= value # ลบค่าเลขที่เพิ่มไปแล้ว\n\n    return result\n\n\ndef roman_to_int(roman): # ฟังก์ชันแปลงเลขโรมันเป็นเลข\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\n\n# Interactive conversion loop\nwhile True:\n    print(\"\\nRoman Numeral Converter\")\n    print(\"1. Convert number to Roman numeral\")\n    print(\"2. Convert Roman numeral to number\")\n    print(\"3. Exit\")\n    \n    choice = input(\"Choose an option (1/2/3): \")\n    \n    if choice == \"1\":\n        try:\n            number = int(input(\"Enter a number (1 - 1,000,000): \"))\n            print(f\"The Roman numeral of {number} is: {int_to_roman(number)}\")\n        except ValueError:\n            print(\"Please enter a valid number.\")\n    \n    elif choice == \"2\":\n        roman = input(\"Enter a Roman numeral: \").upper()\n        result = roman_to_int(roman)\n        print(f\"The number of Roman numeral '{roman}' is: {result}\")\n    \n    elif choice == \"3\":\n        print(\"Exiting the converter. Goodbye!\")\n        break\n    \n    else:\n        print(\"Invalid option. Please choose again.\")\n"
    },
    {
        "filename": "อ่านและเขียนข้อมูลลงไฟล์_CSV.py",
        "description": "# โปรแกรมสำหรับเขียนข้อมูลลงไฟล์ CSV และอ่านข้อมูลจากไฟล์ CSV",
        "content_snippet": "# โปรแกรมสำหรับเขียนข้อมูลลงไฟล์ CSV และอ่านข้อมูลจากไฟล์ CSV\nimport csv\n\ndef write_to_csv(filename, data):\n    # เขียนข้อมูลลงไฟล์ CSV\n    with open(filename, mode='w', newline='', encoding='utf-8') as file:\n        writer = csv.writer(file)\n        writer.writerow([\"ชื่อ\", \"อายุ\", \"อีเมล\"])\n        writer.writerows(data)\n    print(f\"บันทึกข้อมูลลงไฟล์ {filename} เรียบร้อย\")\n\ndef read_from_csv(filename):\n    # อ่านข้อมูลจากไฟล์ CSV\n    try:\n        with open(filename, mode='r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            for row in reader:\n                print(row)\n    except FileNotFoundError:\n        print(f\"ไม่พบไฟล์ {filename}\")\n\n# ตัวอย่างการใช้งาน\nfilename = \"data.csv\"\ndata = [\n    [\"สมชาย\", 25, \"somchai@example.com\"],\n    [\"สมหญิง\", 30, \"somying@example.com\"]\n]\nwrite_to_csv(filename, data)\nprint(\"ข้อมูลในไฟล์:\")\nread_from_csv(filename)\n"
    },
    {
        "filename": "(VIII)ช้randomสร้างตัวแปรสุ่มสำหรับการจำลอง.py",
        "description": "# โปรแกรมจำลองการเพิ่มแต้มแบบสุ่มในเกม Scrabble",
        "content_snippet": "# โปรแกรมจำลองการเพิ่มแต้มแบบสุ่มในเกม Scrabble\n\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n            'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n            'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n            'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n            'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n            'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n            'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\nimport random\n\n# สร้างฟังก์ชันจำลองการเพิ่มแต้มแบบสุ่ม\ndef simulate_random_scores(lst, min_add=1, max_add=5):\n    for sublist in lst:\n        sublist[1] += random.randint(min_add, max_add)\n    return lst\n\n# แบ่งข้อมูลออกเป็น sublists (เหมือนเดิม)\nsublists = [data_game[i:i+4] for i in range(0, len(data_game), 4)]\n\n# เพิ่มแต้มแบบสุ่ม\nupdated_sublists = simulate_random_scores(sublists)\n\n# แสดงข้อมูลหลังเพิ่มแต้ม\nprint(\"Updated Sublists with Random Scores:\")\nfor sublist in updated_sublists:\n    print(sublist)\n"
    },
    {
        "filename": "จัดการไฟล์บันทึก(Logs).py",
        "description": "#โปรแกรมอ่านและวิเคราะห์ไฟล์บันทึก (Log File) เพื่อหาข้อความสำคัญ",
        "content_snippet": "#โปรแกรมอ่านและวิเคราะห์ไฟล์บันทึก (Log File) เพื่อหาข้อความสำคัญ\ndef search_logs(filename, keyword):\n    # ค้นหาคำสำคัญในไฟล์บันทึก\n    try:\n        with open(filename, 'r', encoding='utf-8') as file:\n            lines = file.readlines()\n            matches = [line.strip() for line in lines if keyword in line]\n            return matches\n    except FileNotFoundError:\n        print(f\"ไม่พบไฟล์: {filename}\")\n        return []\n\n# ตัวอย่างการใช้งาน\nfilename = \"server_logs.txt\"  # เปลี่ยนชื่อไฟล์ตามต้องการ\nkeyword = input(\"กรุณาใส่คำสำคัญที่ต้องการค้นหาใน Log File: \")\nresults = search_logs(filename, keyword)\nif results:\n    print(f\"พบข้อความที่ตรงกับคำสำคัญ '{keyword}':\")\n    for line in results:\n        print(line)\nelse:\n    print(f\"ไม่พบข้อความที่ตรงกับคำสำคัญ '{keyword}'\")"
    },
    {
        "filename": "(XIV)แสดงPascalTriangleพร้อมผลรวมของแต่ละแถว.py",
        "description": "# โปรแกรมสร้าง Pascal Triangle และคำนวณผลรวมของแต่ละแถว",
        "content_snippet": "# โปรแกรมสร้าง Pascal Triangle และคำนวณผลรวมของแต่ละแถว\ndef pascal_triangle_with_sum(n):\n    triangle = [] # สร้างรายการเก็บแถว\n    row_sums = [] # สร้างรายการเก็บผลรวมของแต่ละแถว\n    for i in range(n + 1): # วนลูปเพื่อสร้างแถว\n        row = [1] # สร้างแถวใหม่\n        if i > 0: # สร้างตัวเลขใหม่ในแถวที่มากกว่า 0\n            for j in range(1, i):\n                row.append(triangle[i - 1][j - 1] + triangle[i - 1][j]) # สร้างตัวเลขใหม่จากผลรวม\n            row.append(1) # เพิ่มตัวเลขสุดท้าย\n        triangle.append(row)    # เพิ่มแถวใหม่เข้าไปในรายการ\n        row_sums.append(sum(row))  # คำนวณผลรวมของแต่ละแถว \n    return triangle, row_sums # ส่งค่ากลับ\n\n# รับค่าระดับ\nn = int(input(\"Enter the number of rows for Pascal Triangle: \"))\ntriangle, row_sums = pascal_triangle_with_sum(n) # เรียกใช้ฟังก์ชัน\n\n# แสดงผล\nfor i, row in enumerate(triangle): # วนลูปเพื่อแสดงผล\n    print(f\"Row {i}: {row} (Sum: {row_sums[i]})\") # แสดงผลลัพธ์\n"
    },
    {
        "filename": "บันทึกและอ่านไฟล์ข้อความ.py",
        "description": "# โปรแกรมบันทึกข้อความลงไฟล์และอ่านข้อความจากไฟล์",
        "content_snippet": "# โปรแกรมบันทึกข้อความลงไฟล์และอ่านข้อความจากไฟล์\ndef save_to_file(filename, content):\n    with open(filename, 'w') as file:\n        file.write(content)\n    print(f\"ข้อความถูกบันทึกลงไฟล์ {filename}\")\n\n\ndef read_from_file(filename):\n    try:\n        with open(filename, 'r') as file:\n            print(\"เนื้อหาในไฟล์:\")\n            print(file.read())\n    except FileNotFoundError:\n        print(f\"ไม่พบไฟล์ {filename}\")\n\n# ตัวอย่างการใช้งาน\nfilename = \"example.txt\"\ncontent = input(\"ใส่ข้อความที่ต้องการบันทึก: \")\nsave_to_file(filename, content)\nread_from_file(filename)\n"
    },
    {
        "filename": "เพิ่มของลดของ_lv2(III).py",
        "description": "# โปรแกรมจัดการคลังสินค้าระดับขั้นสูง",
        "content_snippet": "# โปรแกรมจัดการคลังสินค้าระดับขั้นสูง\nimport csv\n\ndef get_product_info():\n    #รับข้อมูลสินค้าแต่ละชิ้นจากผู้ใช้\n    #- คืนค่า dictionary {ชื่อสินค้า: (ราคา, จำนวน)}\n    while True:\n        try:\n            product_name = str(input(\"Enter the product name: \")).strip()\n            if not product_name:\n                raise ValueError(\"Product name cannot be empty.\")\n            \n            price = float(input(\"Enter the price of the product: \"))\n            if price < 0:\n                raise ValueError(\"Price cannot be negative.\")\n            \n            quantity = int(input(\"Enter the quantity of the product: \"))\n            if quantity < 0:\n                raise ValueError(\"Quantity cannot be negative.\")\n            \n            return product_name, price, quantity\n        except ValueError as e:\n            print(f\"Invalid input: {e}. Please try again.\")\n\ndef display_inventory(products):\n    #แสดงตารางสินค้าในคลัง พร้อมคำนวณยอดรวม ราคาหลังส่วนลด และภาษี\n    width_product = 25\n    width_price = 10\n    width_quantity = 10\n    width_total = 15\n    width_discount = 10\n    width_tax = 10\n\n    print('-' * 80)\n    print('                     Inventory Report                    ')\n    print('-' * 80)\n    print(f\"{'Item':<{width_product}}{'Price':>{width_price}}{'Quantity':>{width_quantity}}{'Subtotal':>{width_total}}{'Discount':>{width_discount}}{'Tax':>{width_tax}}\")\n    print('-' * 80)\n\n    grand_total = 0\n    for product, (price, quantity) in products.items():\n        subtotal = price * quantity\n        discount = 0.1 * subtotal if quantity >= 10 else 0  # ส่วนลด 10% หากซื้อเกิน 10 ชิ้น\n        tax = 0.07 * (subtotal - discount)  # ภาษี 7%\n        total = subtotal - discount + tax\n        grand_total += total\n        \n        print(f\"{product:<{width_product}}{price:>{width_price}.2f}{quantity:>{width_quantity}}{subtotal:>{width_total}.2f}{discount:>{width_discount}.2f}{tax:>{width_tax}.2f}\")\n\n    print('-' * 80)\n    print(f\"{'Grand Total':<{width_product}}{'':>{width_price + width_quantity + width_total}}{grand_total:>{width_tax + width_discount + 10}.2f}\")\n    print('-' * 80)\n\ndef save_to_csv(products, filename=\"inventory_report.csv\"):\n    #บันทึกรายงานสินค้าในคลังลงไฟล์ CSV\n    with open(filename, mode='w', newline='', encoding='utf-8') as file:\n        writer = csv.writer(file)\n        writer.writerow([\"Item\", \"Price\", \"Quantity\", \"Subtotal\", \"Discount\", \"Tax\", \"Total\"])\n        \n        for product, (price, quantity) in products.items():\n            subtotal = price * quantity\n            discount = 0.1 * subtotal if quantity >= 10 else 0\n            tax = 0.07 * (subtotal - discount)\n            total = subtotal - discount + tax\n            writer.writerow([product, price, quantity, subtotal, discount, tax, total])\n    print(f\"Inventory report saved to {filename}\")\n\ndef main():\n    #โปรแกรมหลัก\n    print(\"Welcome to the Advanced Inventory Management System!\")\n    products = {}\n\n    while True:\n        action = input(\"Enter 'add' to add a product, 'view' to display inventory, 'save' to save to CSV, or 'quit' to exit: \").lower()\n        if action == 'add':\n            product_name, price, quantity = get_product_info()\n            if product_name in products:\n                # หากสินค้ามีอยู่แล้ว จะอัปเดตจำนวนสินค้า\n                existing_price, existing_quantity = products[product_name]\n                if price != existing_price:\n                    print(f\"Warning: Price for {product_name} is updated from {existing_price:.2f} to {price:.2f}.\")\n                products[product_name] = (price, existing_quantity + quantity)\n            else:\n                products[product_name] = (price, quantity)\n        elif action == 'view':\n            if products:\n                display_inventory(products)\n            else:\n                print(\"No products in inventory yet.\")\n        elif action == 'save':\n            if products:\n                save_to_csv(products)\n            else:\n                print(\"No products to save.\")\n        elif action == 'quit':\n            print(\"Exiting the program. Goodbye!\")\n            break\n        else:\n            print(\"Invalid command. Please try again.\")\n\n# เรียกใช้งานโปรแกรม\nmain()\n"
    },
    {
        "filename": "คัดลอกไฟล์ทั้งหมดจากโฟลเดอร์ต้นทางไปยังปลายทาง.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการคัดลอกไฟล์จากโฟลเดอร์ต้นทางไปยังโฟลเดอร์ปลายทางทั้งหมด",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการคัดลอกไฟล์จากโฟลเดอร์ต้นทางไปยังโฟลเดอร์ปลายทางทั้งหมด\nimport os\nimport shutil\n\ndef batch_copy_files(source_folder, destination_folder):\n    # ตรวจสอบว่าโฟลเดอร์ต้นทางมีอยู่\n    if not os.path.exists(source_folder):\n        print(f\"ไม่พบโฟลเดอร์ต้นทาง: {source_folder}\")\n        return\n\n    # สร้างโฟลเดอร์ปลายทางถ้าไม่มี\n    if not os.path.exists(destination_folder):\n        os.makedirs(destination_folder)\n\n    # คัดลอกไฟล์ทั้งหมด\n    for filename in os.listdir(source_folder):\n        source_path = os.path.join(source_folder, filename)\n        destination_path = os.path.join(destination_folder, filename)\n        if os.path.isfile(source_path):\n            shutil.copy(source_path, destination_path)\n            print(f\"คัดลอก {filename} ไปยัง {destination_folder}\")\n\n# ตัวอย่างการใช้งาน\nsource = \"source_folder\"  # เปลี่ยนชื่อโฟลเดอร์ต้นทาง\ndestination = \"destination_folder\"  # เปลี่ยนชื่อโฟลเดอร์ปลายทาง\nbatch_copy_files(source, destination)\n"
    },
    {
        "filename": "(VIII)เพิ่มฟังก์ชันInverseและDeterminantของMatrix.py",
        "description": "# โปรแกรมคำนวณ Inverse และ Determinant ของเมทริกซ์",
        "content_snippet": "# โปรแกรมคำนวณ Inverse และ Determinant ของเมทริกซ์\nimport numpy as np  # ใช้ numpy เพื่อช่วยในงานคำนวณที่ซับซ้อน\n\nprint('*' * 70)\nprint('Matrix Operations with NumPy'.center(70))\nprint('*' * 70)\n\n# นิยามเมทริกซ์ A (สามารถเปลี่ยนค่าได้ตามต้องการ)\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\n\n# ฟังก์ชันคำนวณ Determinant\ndef determinant(matrix):\n    det = np.linalg.det(matrix)\n    return round(det, 2)  # ปัดค่าทศนิยมเหลือ 2 ตำแหน่ง\n\n# ฟังก์ชันคำนวณ Inverse\ndef inverse(matrix):\n    det = determinant(matrix)\n    if det == 0:\n        return \"Matrix is singular (no inverse)\"  # กรณีที่ determinant เป็น 0\n    return np.linalg.inv(matrix)\n\n# แสดงผล\nprint(\"Matrix A:\")\nprint(A)\nprint(\"\\nDeterminant of A:\", determinant(A))\nprint(\"\\nInverse of A:\")\nprint(inverse(A))\n"
    },
    {
        "filename": "(VIII)ใช้ฟังก์ชันLambdaและListComprehensionขั้นสูง.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการใช้ฟังก์ชันแบบ lambda และ List Comprehension ในการปรับปรุงข้อมูลในลิสต์",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการใช้ฟังก์ชันแบบ lambda และ List Comprehension ในการปรับปรุงข้อมูลในลิสต์\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n            'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n            'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n            'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n            'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n            'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n            'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\n# สร้างฟังก์ชันแบบ lambda สำหรับคำนวณแต้มรวม (Points * Amount)\ncalculate_total = lambda sublist: sublist[1] * sublist[2]\n\n# เพิ่มแต้มรวมในแต่ละ sublist\nsublists = [data_game[i:i+4] for i in range(0, len(data_game), 4)]\nupdated_sublists = [sublist + [calculate_total(sublist)] for sublist in sublists]\n\n# แสดงข้อมูลที่ปรับปรุง\nprint(\"Sublists with Total Points (Points * Amount):\")\nfor sublist in updated_sublists:\n    print(sublist)\n"
    },
    {
        "filename": "(4)โปรแกรมการทาย (Guessing).py",
        "description": "# โปรแกรมทายเลข 4 หลัก โดยมีเงื่อนไขดังนี้",
        "content_snippet": "# โปรแกรมทายเลข 4 หลัก โดยมีเงื่อนไขดังนี้\n# 1. หากผู้เล่นทายเลขถูกต้อง โปรแกรมจะแสดงข้อความ \"Congratulations\" พร้อมกับจำนวนครั้งที่ทายถูกต้อง\n# 2. หากผู้เล่นต้องการออกจากโปรแกรม สามารถกด 0 เพื่อออกจากโปรแกรมได้\n# 3. หากผู้เล่นป้อนตัวเลขที่ไม่ใช่ 4 หลัก หรือป้อนตัวเลขที่มีตัวเลขซ้ำกัน โปรแกรมจะแสดงข้อความ \"Invalid input\"\n# 4. หากผู้เล่นทายเลขไม่ถูกต้อง โปรแกรมจะแสดงจำนวน\nimport random\n\ndef generate_secret_number():\n    \"\"\"Generate a 4-digit secret number with unique digits.\"\"\"\n    return random.sample(range(10), 4)\n\ndef calculate_hint(secret, guess):\n    \"\"\"Calculate MEN and WOMEN based on the guess.\"\"\"\n    men = sum(s == g for s, g in zip(secret, guess))\n    women = sum(g in secret for g in guess) - men\n    return men, women\n\n# Main program\nprint(\"------ Welcome to MEN and WOMEN number guessing game ------\")\nprint(\"[To exit the program, press 0]\")\nprint(\"----------------------------------------------------------\")\n\n# Generate the secret number\nsecret_number = generate_secret_number()\n\nattempts = 0\n\nwhile True:\n    user_input = input(\"Enter 4-digits number: \")\n\n    if user_input == \"0\":\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        print(\"Exiting the program.\")\n        break\n\n    if len(user_input) != 4 or not user_input.isdigit():\n        print(\"Invalid input. Please enter a 4-digit number.\")\n        continue\n\n    guess = list(map(int, user_input))\n    if len(set(guess)) != 4:\n        print(\"Digits must be unique. Try again.\")\n        continue\n\n    attempts += 1\n    men, women = calculate_hint(secret_number, guess)\n\n    print(f\"Hint: MEN = {men} and WOMEN = {women}\")\n\n    if men == 4:\n        print(f\"*** Congratulations *** Your guess is correct, after {attempts} times\")\n        print(f\"Secret Number was: {''.join(map(str, secret_number))}\")\n        break"
    },
    {
        "filename": "(XV)เข้ารหัส(encrypted).py",
        "description": "# โปรแกรมเข้ารหัสข้อความด้วยวิธีการเข้ารหัส Caesar Cipher โดยให้ผู้ใช้ป้อนข้อความและคีย์เป็นจำนวนเต็มบวกหรือลบ",
        "content_snippet": "# โปรแกรมเข้ารหัสข้อความด้วยวิธีการเข้ารหัส Caesar Cipher โดยให้ผู้ใช้ป้อนข้อความและคีย์เป็นจำนวนเต็มบวกหรือลบ\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        else:\n            raise ValueError(\"Error!!!! Input non-characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    decrypted_text = secret_password(ciphertext, -key)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(2)เพิ่มการแสดงตัวเลขของแถวที่เลือกแบบย้อนกลับ.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการแสดงตัวเลขของแถวที่เลือกแบบย้อนกลับ",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการแสดงตัวเลขของแถวที่เลือกแบบย้อนกลับ\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]\n        new_row = [previous_row[-1]]\n        for j in range(len(previous_row)):\n            new_row.append(new_row[-1] + previous_row[j])\n        rows.append(new_row)\n    return rows\n\ndef main():\n    rows = []\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            reversed_row = list(reversed(rows[user_row]))\n            print(f\"Row {user_row}: {rows[user_row]} (Reversed: {reversed_row})\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "คำนวณเลขยกกำลัง.py",
        "description": "#โปรแกรมคำนวณค่าผลลัพธ์ของเลขฐานและเลขยกกำลังที่ป้อน",
        "content_snippet": "#โปรแกรมคำนวณค่าผลลัพธ์ของเลขฐานและเลขยกกำลังที่ป้อน\ndef calculate_power(base, exponent):\n    return base ** exponent\n\n# รับค่าจากผู้ใช้\nbase = float(input(\"กรุณาใส่เลขฐาน: \"))\nexponent = int(input(\"กรุณาใส่เลขยกกำลัง: \"))\n\nresult = calculate_power(base, exponent)\nprint(f\"{base} ยกกำลัง {exponent} = {result:.2f}\")"
    },
    {
        "filename": "(V)ตรวจสอบ_string.py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการหาความแตกต่างของตัวอักษรในสตริง A และ B",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการหาความแตกต่างของตัวอักษรในสตริง A และ B\nuser_a = str(input('Please enter the string A : '))\nuser_b = str(input('Please enter the string B : '))\n\nset_a = set(user_a)\nset_b = set(user_b)\n\nprint('--------------------------------------------------')\nprint(f'A number of character in A is {len(set_a)}')\nprint(f'A number of character in B is {len(set_b)}')\nprint(f'A number of character in both A in B is {len(set_a & set_b)}')\nprint(f'Character in A but not in B is {set_a - set_b}')\nprint(f'Character in B but not in A is {set_b - set_a}')\nprint(f'Character in A or B but not in both A and B is {set_a ^ set_b}')\nprint(f'All character in A or B is {set_a | set_b}\\n')"
    },
    {
        "filename": "จับเวลานับถอยหลัง.py",
        "description": "#โปรแกรมจับเวลานับถอยหลังสำหรับจำนวนวินาทีที่กำหนด",
        "content_snippet": "#โปรแกรมจับเวลานับถอยหลังสำหรับจำนวนวินาทีที่กำหนด\nimport time\n\ndef countdown_timer(seconds):\n    while seconds > 0:\n        print(f\"เวลาที่เหลือ: {seconds} วินาที\")\n        time.sleep(1)\n        seconds -= 1\n    print(\"หมดเวลา!\")\n\n# รับข้อมูลจากผู้ใช้\nseconds = int(input(\"ใส่เวลานับถอยหลัง (วินาที): \"))\ncountdown_timer(seconds)"
    },
    {
        "filename": "เข้ารหัสข้อความในไฟล์.py",
        "description": "#โปรแกรมเข้ารหัสและถอดรหัสข้อความในไฟล์โดยใช้ Caesar Cipher",
        "content_snippet": "#โปรแกรมเข้ารหัสและถอดรหัสข้อความในไฟล์โดยใช้ Caesar Cipher\ndef caesar_cipher(text, shift, decrypt=False):\n    if decrypt:\n        shift = -shift\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            start = ord('A') if char.isupper() else ord('a')\n            result += chr((ord(char) - start + shift) % 26 + start)\n        else:\n            result += char\n    return result\n\ndef encrypt_file(input_file, output_file, shift):\n    try:\n        with open(input_file, 'r', encoding='utf-8') as infile:\n            content = infile.read()\n        encrypted_content = caesar_cipher(content, shift)\n        with open(output_file, 'w', encoding='utf-8') as outfile:\n            outfile.write(encrypted_content)\n        print(f\"ข้อความถูกเข้ารหัสและบันทึกใน {output_file}\")\n    except FileNotFoundError:\n        print(f\"ไม่พบไฟล์ {input_file}\")\n\ndef decrypt_file(input_file, output_file, shift):\n    encrypt_file(input_file, output_file, -shift)\n\n# ตัวอย่างการใช้งาน\nencrypt_file('plaintext.txt', 'encrypted.txt', 3)\ndecrypt_file('encrypted.txt', 'decrypted.txt', 3)"
    },
    {
        "filename": "Factorial.py",
        "description": "# โปรแกรมคำนวณค่า factorial ของตัวเลขที่รับเข้ามา",
        "content_snippet": "# โปรแกรมคำนวณค่า factorial ของตัวเลขที่รับเข้ามา\nn = int(input())\ni = 1\n\nif n == 0:\n  print(i)\n\nelse:\n  while True:\n    i = n * i\n    n -= 1\n\n    if n <= 0:\n      print(i)\n      break"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับด้านพร้อมสีพื้นหลัง(ใช้_ANSI_Escape_Code).py",
        "description": "# Drawing a reversed right triangle using '*'",
        "content_snippet": "# Drawing a reversed right triangle using '*'\nwhile True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of right triangle: \"))\n\n    # หากใส่ 0 จะออกจากโปรแกรม\n    if height == 0: # ถ้าความสูงเป็น 0\n        break\n\n    # วาดสามเหลี่ยมกลับด้านตามความสูงที่กำหนด\n    for i in range(1, height + 1): # วนลูปตามความสูง\n        spaces = ' ' * (height - i)  # ช่องว่างด้านซ้าย\n        if i == 1:  # แถวแรกมีแค่ *\n            stars = '*' # สร้างดาว\n        elif i == height:  # แถวสุดท้ายเต็มแถว\n            stars = '*' * i # สร้างดาวตามความสูง\n        else:  # แถวอื่นๆ มี * เว้นช่องว่างตรงกลาง\n            stars = '*' + ' ' * (i - 2) + '*' # สร้างดาวและช่องว่างตรงกลาง\n        print(spaces + stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "(2)เพิ่มการกรองเฉพาะตัวเลขคู่ในแถวที่เลือก.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการกรองเฉพาะตัวเลขคู่ในแถวที่เลือก",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการกรองเฉพาะตัวเลขคู่ในแถวที่เลือก\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]\n        new_row = [previous_row[-1]]\n        for j in range(len(previous_row)):\n            new_row.append(new_row[-1] + previous_row[j])\n        rows.append(new_row)\n    return rows\n\ndef main():\n    rows = []\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            even_numbers = [x for x in rows[user_row] if x % 2 == 0]\n            print(f\"Row {user_row}: {rows[user_row]} (Even Numbers: {even_numbers})\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "เกรดเฉลี่ยมันเป็นเพียงแค่ตัวเลข.py",
        "description": "# โปรแกรมคำนวณเกรดเฉลี่ยของนักเรียน",
        "content_snippet": "# โปรแกรมคำนวณเกรดเฉลี่ยของนักเรียน\nmyInput_1 = float(input())\nmyInput_2 = float(input())\nmyInput_3 = float(input())\nmyInput_4 = float(input())\nmyInput_5 = float(input())\nresult = (myInput_1 + myInput_2 + myInput_3 + myInput_4 + myInput_5) / 5\n\nprint(f\"THAI = {myInput_1}\")\nprint(f\"MATH = {myInput_2}\")\nprint(f\"ENGLISH = {myInput_3}\")\nprint(f\"SCIENCE = {myInput_4}\")\nprint(f\"SPORT = {myInput_5}\")\nprint(\"---\")\nprint(f\"GPA = {result}\")"
    },
    {
        "filename": "เครื่องมือแปลงหน่วย.py",
        "description": "#โปรแกรมแปลงหน่วยพื้นฐาน เช่น กิโลเมตรเป็นไมล์ หรือเซลเซียสเป็นฟาเรนไฮต์",
        "content_snippet": "#โปรแกรมแปลงหน่วยพื้นฐาน เช่น กิโลเมตรเป็นไมล์ หรือเซลเซียสเป็นฟาเรนไฮต์\ndef convert_unit(value, unit_from, unit_to):\n    conversion_factors = {\n        (\"km\", \"miles\"): 0.621371,\n        (\"miles\", \"km\"): 1.60934,\n        (\"celsius\", \"fahrenheit\"): lambda c: (c * 9/5) + 32,\n        (\"fahrenheit\", \"celsius\"): lambda f: (f - 32) * 5/9\n    }\n    \n    key = (unit_from.lower(), unit_to.lower())\n    if key in conversion_factors:\n        factor = conversion_factors[key]\n        return factor(value) if callable(factor) else value * factor\n    else:\n        raise ValueError(\"ไม่สามารถแปลงหน่วยที่กำหนดได้\")\n\n# รับข้อมูลจากผู้ใช้\nvalue = float(input(\"กรุณาใส่ค่า: \"))\nunit_from = input(\"หน่วยต้นทาง (km/miles/celsius/fahrenheit): \")\nunit_to = input(\"หน่วยเป้าหมาย (km/miles/celsius/fahrenheit): \")\n\ntry:\n    result = convert_unit(value, unit_from, unit_to)\n    print(f\"{value} {unit_from} = {result:.2f} {unit_to}\")\nexcept ValueError as e:\n    print(e)"
    },
    {
        "filename": "(2)เพิ่มการคำนวณค่าเฉลี่ยของตัวเลขในแถวที่เลือก.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการคำนวณค่าเฉลี่ยของตัวเลขในแถวที่เลือก",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการคำนวณค่าเฉลี่ยของตัวเลขในแถวที่เลือก\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]\n        new_row = [previous_row[-1]]\n        for j in range(len(previous_row)):\n            new_row.append(new_row[-1] + previous_row[j])\n        rows.append(new_row)\n    return rows\n\ndef main():\n    rows = []\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            row_avg = sum(rows[user_row]) / len(rows[user_row])\n            print(f\"Row {user_row}: {rows[user_row]} (Average: {row_avg:.2f})\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "จัดกลุ่มข้อมูลตามหมวดหมู่.py",
        "description": "#โปรแกรมจัดกลุ่มข้อมูลสินค้าและแสดงยอดขายรวมในแต่ละหมวดหมู่",
        "content_snippet": "#โปรแกรมจัดกลุ่มข้อมูลสินค้าและแสดงยอดขายรวมในแต่ละหมวดหมู่\nfrom collections import defaultdict\n\ndef group_sales_by_category(sales_data):\n    grouped_data = defaultdict(float)\n    for item in sales_data:\n        category = item[\"category\"]\n        sales = item[\"sales\"]\n        grouped_data[category] += sales\n    return grouped_data\n\n# ข้อมูลสินค้าและยอดขาย\nsales_data = [\n    {\"category\": \"อาหาร\", \"sales\": 1500},\n    {\"category\": \"เครื่องดื่ม\", \"sales\": 2000},\n    {\"category\": \"อาหาร\", \"sales\": 1000},\n    {\"category\": \"เครื่องเขียน\", \"sales\": 800},\n    {\"category\": \"เครื่องดื่ม\", \"sales\": 500},\n]\n\ngrouped_sales = group_sales_by_category(sales_data)\nprint(\"ยอดขายรวมในแต่ละหมวดหมู่:\")\nfor category, total_sales in grouped_sales.items():\n    print(f\"{category}: {total_sales} บาท\")"
    },
    {
        "filename": "ร้านลุงสมหมาย30.py",
        "description": "# โปรแกรมรับข้อมูลลูกค้า และแสดงข้อมูลลูกค้าทั้งหมด",
        "content_snippet": "# โปรแกรมรับข้อมูลลูกค้า และแสดงข้อมูลลูกค้าทั้งหมด\ncus = int(input())\n\ncustomer = []\n\nfor i in range(cus):\n  name = str(input())\n  year = int(input())\n  birth_year = 2017-year\n  gender = input()\n  customer.append((name, birth_year))\n  i += 1\n\nprint(\"--Customers Information--\")\nfor cust in customer:\n  name, birth_year = cust\n  print(f\"{name} (age : {birth_year})\")\n\n#3 // บรรทัดแรกสุดบอกจำนวนลูกค้า\n#K P //ลูกค้าคนที่ 1\n#1990\n#Male\n#A A //ลูกค้าคนที่ 2\n#2010\n#Male\n#Sommai KraiMakMak //ลูกค้าคนที่ 3\n#1950\n#Male\n"
    },
    {
        "filename": "(2)เพิ่มการตรวจสอบว่าแถวที่เลือกมีเลขใดเป็นจำนวนเฉพาะหรือไม่.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการตรวจสอบว่าแถวที่เลือกมีเลขใดเป็นจำนวนเฉพาะหรือไม่",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการตรวจสอบว่าแถวที่เลือกมีเลขใดเป็นจำนวนเฉพาะหรือไม่\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]\n        new_row = [previous_row[-1]]\n        for j in range(len(previous_row)):\n            new_row.append(new_row[-1] + previous_row[j])\n        rows.append(new_row)\n    return rows\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef main():\n    rows = []\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            primes = [x for x in rows[user_row] if is_prime(x)]\n            print(f\"Row {user_row}: {rows[user_row]} (Prime Numbers: {primes})\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "แยกรายชื่อ.py",
        "description": "# โปรแกรมสร้างโครงสร้าง Directory และบันทึกข้อมูลจากไฟล์ input.txt",
        "content_snippet": "# โปรแกรมสร้างโครงสร้าง Directory และบันทึกข้อมูลจากไฟล์ input.txt\nimport os\nimport shutil\n\n# ฟังก์ชันสำหรับสร้าง Directory พร้อมคัดลอก readme.txt\ndef create_dir_with_readme(path):\n    os.makedirs(path, exist_ok=True)\n    shutil.copy('readme.txt', path)  # คัดลอก readme.txt เข้า Directory\n\n# สร้าง Directory หลักและโครงสร้างย่อย\nmain_dir = \"รายชื่อ\"\ncreate_dir_with_readme(main_dir)\n\n# สร้าง Directory นักศึกษา\nstudent_dir = os.path.join(main_dir, \"นักศึกษา\")\ncreate_dir_with_readme(student_dir)\n\n# สร้างไฟล์ รายชื่อนักศึกษาคณะวิศวกรรมศาสตร์.txt\nstudent_file = os.path.join(student_dir, \"รายชื่อนักศึกษาคณะวิศวกรรมศาสตร์.txt\")\nwith open(student_file, 'w', encoding='utf-8') as f:\n    f.write(\"ข้อมูลรายชื่อนักศึกษาคณะวิศวกรรมศาสตร์\\n\")\n\n# สร้าง Directory อาจารย์\nteacher_dir = os.path.join(main_dir, \"อาจารย์\")\ncreate_dir_with_readme(teacher_dir)\n\n# สร้างไฟล์ รายชื่อคณาจารย์คณะวิศวกรรมศาสตร์.txt\nteacher_file = os.path.join(teacher_dir, \"รายชื่อคณาจารย์คณะวิศวกรรมศาสตร์.txt\")\nwith open(teacher_file, 'w', encoding='utf-8') as f:\n    f.write(\"ข้อมูลรายชื่อคณาจารย์คณะวิศวกรรมศาสตร์\\n\")\n\n# สร้าง Directory สาขาวิชาภายใน Directory อาจารย์\nfaculty_dirs = {\n    \"วิศวกรรมโยธา\": os.path.join(teacher_dir, \"วิศวกรรมโยธา\"),\n    \"วิศวกรรมอุตสาหการ\": os.path.join(teacher_dir, \"วิศวกรรมอุตสาหการ\"),\n    \"วิศวกรรมคอมพิวเตอร์\": os.path.join(teacher_dir, \"วิศวกรรมคอมพิวเตอร์\"),\n}\n\nfor faculty, path in faculty_dirs.items():\n    create_dir_with_readme(path)\n    # สร้างไฟล์รายชื่อสำหรับคณาจารย์ในแต่ละสาขา\n    with open(os.path.join(path, f\"รายชื่อคณาจารย์คณะ{faculty}.txt\"), 'w', encoding='utf-8') as f:\n        f.write(f\"ข้อมูลรายชื่อคณาจารย์คณะ{faculty}\\n\")\n\n# อ่านและจัดเก็บข้อมูลจาก input.txt\nwith open('input.txt', 'r', encoding='utf-8') as file:\n    person_data = \"\"  # ข้อมูลชั่วคราวของบุคคลแต่ละคน\n    person_type = None  # ใช้เก็บสถานะ นักศึกษา/อาจารย์\n    faculty = None  # ใช้เก็บสาขาวิชา\n    student_count = 1  # ตัวแปรสำหรับนับลำดับนักศึกษา\n    teacher_count = 1  # ตัวแปรสำหรับนับลำดับอาจารย์\n    faculty_counts = {faculty: 1 for faculty in faculty_dirs}  # ตัวแปรนับลำดับในแต่ละสาขาวิชา\n\n    for line in file:\n        line = line.strip()\n        if not line:  # เจอบรรทัดว่าง ให้บันทึกข้อมูล\n            if person_type == \"นักศึกษา\":\n                # แยกชื่อจากข้อมูล\n                name = person_data.split('\\n')[0]  # ชื่อจะเป็นบรรทัดแรก\n                with open(student_file, 'a', encoding='utf-8') as f:\n                    f.write(f\"{student_count}) {name}\\n\")  # แสดงหมายเลขลำดับและชื่อ\n                student_count += 1  # เพิ่มหมายเลขลำดับนักศึกษา\n            elif person_type == \"อาจารย์\":\n                # แยกชื่อจากข้อมูล\n                name = person_data.split('\\n')[0]  # ชื่อจะเป็นบรรทัดแรก\n                with open(teacher_file, 'a', encoding='utf-8') as f:\n                    f.write(f\"{teacher_count}) {name}\\n\")  # แสดงหมายเลขลำดับและชื่อ\n                teacher_count += 1  # เพิ่มหมายเลขลำดับอาจารย์\n\n                # บันทึกข้อมูลแยกตามสาขาวิชาในไฟล์สาขา\n                if faculty in faculty_dirs:\n                    faculty_file = os.path.join(faculty_dirs[faculty], f\"รายชื่อคณาจารย์คณะ{faculty}.txt\")\n                    with open(faculty_file, 'a', encoding='utf-8') as f:\n                        f.write(f\"{faculty_counts[faculty]}) {name}\\n\")  # แสดงหมายเลขลำดับและชื่อ\n                    faculty_counts[faculty] += 1  # เพิ่มหมายเลขลำดับในสาขาวิชา\n\n            # เคลียร์ข้อมูลชั่วคราวเพื่อบันทึกคนถัดไป\n            person_data = \"\"\n            person_type = None\n            faculty = None\n        else:\n            # สะสมข้อมูลของบุคคลแต่ละคน\n            if line.startswith(\"สถานะ:\") or line.startswith(\"ตำแหน่ง:\"):\n                person_type = line.split(\": \")[1]\n            elif line.startswith(\"สาขาวิชา:\"):\n                faculty = line.split(\": \")[1]\n            # สะสมบรรทัดของข้อมูลลงใน person_data\n            person_data += line + '\\n'\n\n    # บันทึกข้อมูลของบุคคลสุดท้ายหากไม่มีบรรทัดว่างหลังข้อมูล\n    if person_data:\n        if person_type == \"นักศึกษา\":\n            name = person_data.split('\\n')[0]  # ชื่อจะเป็นบรรทัดแรก\n            with open(student_file, 'a', encoding='utf-8') as f:\n                f.write(f\"{student_count}) {name}\\n\")\n        elif person_type == \"อาจารย์\":\n            name = person_data.split('\\n')[0]  # ชื่อจะเป็นบรรทัดแรก\n            with open(teacher_file, 'a', encoding='utf-8') as f:\n                f.write(f\"{teacher_count}) {name}\\n\")\n            if faculty in faculty_dirs:\n                faculty_file = os.path.join(faculty_dirs[faculty], f\"รายชื่อคณาจารย์คณะ{faculty}.txt\")\n                with open(faculty_file, 'a', encoding='utf-8') as f:\n                    f.write(f\"{faculty_counts[faculty]}) {name}\\n\")\n\nprint(\"สร้างโครงสร้าง Directory และบันทึกข้อมูลเสร็จเรียบร้อย\")\n"
    },
    {
        "filename": "(XI)Factorialที่คำนวณแบบRecursive.py",
        "description": "# โปรแกรมคำนวณ Factorial แบบ Recursive และเก็บผลลัพธ์ในลิสต์",
        "content_snippet": "# โปรแกรมคำนวณ Factorial แบบ Recursive และเก็บผลลัพธ์ในลิสต์\n# คำนวณ Factorial แบบ Recursive และเก็บผลลัพธ์ในลิสต์\nprint('Calculating Factorial series using recursion')\nn = int(input(\"Enter 'n' for Recursive Factorial: \"))\nfactorial_list = []\n\n# ฟังก์ชันคำนวณ Factorial แบบ Recursive\ndef recursive_factorial(num):\n    if num == 1:\n        return 1\n    return num * recursive_factorial(num - 1)\n\n# สร้างลิสต์ Factorial\nfor i in range(1, n+1):\n    factorial_list.append(recursive_factorial(i))\n\n# แสดงผล\nprint(f\"Factorial series using recursion: {factorial_list}\\n\")\n"
    },
    {
        "filename": "พีระมิด(ระดับ2).py",
        "description": "# โปรแกรมวาดรูปสามเหลี่ยมด้านเท่า",
        "content_snippet": "# โปรแกรมวาดรูปสามเหลี่ยมด้านเท่า\nmyInput = int(input())\ni = 1\n\nwhile myInput > 0:\n  print(f\"{' ' * (myInput-1)}{'*' * i}\")\n  myInput -= 1\n  i += 2\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมแบบ Pascal’s Triangle.py",
        "description": "while True:",
        "content_snippet": "while True:\n    # รับจำนวนแถวจากผู้ใช้\n    rows = int(input(\"Enter the number of rows for Pascal's Triangle: \"))\n\n    if rows == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n\n    # วาด Pascal's Triangle\n    triangle = [[1]]\n    for i in range(1, rows):\n        row = [1]\n        for j in range(1, i):\n            row.append(triangle[i - 1][j - 1] + triangle[i - 1][j])\n        row.append(1)\n        triangle.append(row)\n\n    for row in triangle:\n        print(' '.join(map(str, row)).center(2 * rows))\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "(XIII)เพิ่มโหมดเวลา(จำกัดเวลาในแต่ละรอบ).py",
        "description": "# โปรแกรมทายเลข 1-99 โดยมีการจำกัดเวลาในการทายเป็นเวลา 10 วินาที",
        "content_snippet": "# โปรแกรมทายเลข 1-99 โดยมีการจำกัดเวลาในการทายเป็นเวลา 10 วินาที\nimport random\nimport time\n\ndef guessing_game_with_timer():\n    random_number = random.randint(1, 99)\n    attempts = 5\n    low, high = 1, 99\n    time_limit = 10  # กำหนดเวลาเป็น 10 วินาที\n\n    print(\"***** Welcome to the Timed Guessing Game *****\")\n\n    for attempt in range(attempts):\n        print(f\"{'-'*21} round{attempt + 1} {'-'*21}\")\n        print(f\"You have {time_limit} seconds to guess!\")\n        print(f\"Enter an integer from {low} to {high} : \", end=\"\")\n        \n        start_time = time.time()\n        try:\n            input_number = int(input())\n            elapsed_time = time.time() - start_time\n\n            if elapsed_time > time_limit:\n                print(\"Time's up! You took too long!\")\n                break\n\n            if input_number == random_number:\n                print(\"#\" * 50)\n                print(\"   *** CONGRATULATION *** Your guess is correct  \")\n                print(\"#\" * 50)\n                return\n            elif input_number < random_number:\n                print(\"Hint: Your guess is low\")\n                low = max(low, input_number + 1)\n            else:\n                print(\"Hint: Your guess is high\")\n                high = min(high, input_number - 1)\n        except ValueError:\n            print(\"Invalid input! Please enter a number.\")\n\n    print(\"#\" * 50)\n    print(f\"!!!SORRY!!! The secret number is {random_number}\".center(50))\n    print(\"#\" * 50)\n\nguessing_game_with_timer()\n"
    },
    {
        "filename": "ตารางวิเคราะห์ข้อความ.py",
        "description": "# โปรแกรมวิเคราะห์ข้อความ โดยนับจำนวนตัวอักษรทั้งหมด, คำทั้งหมด, และคำที่ไม่ซ้ำกัน",
        "content_snippet": "# โปรแกรมวิเคราะห์ข้อความ โดยนับจำนวนตัวอักษรทั้งหมด, คำทั้งหมด, และคำที่ไม่ซ้ำกัน\n# สร้างตารางวิเคราะห์ข้อความในรูปแบบของตัวอักษรทั้งหมด, คำทั้งหมด, และตัวเลขคำเฉพาะ\n# สร้างข้อมูลการวิเคราะห์\ns1 = \"madam and her racecar were at the radar station.\"\ns2 = \"They found a civic parked next to a kayak.\"\ns3 = \"Wow, what a day!\"\n\nanalysis = {\n    \"String\": [\"s1\", \"s2\", \"s3\"],\n    \"Total Characters\": [len(s1), len(s2), len(s3)],\n    \"Total Words\": [len(s1.split()), len(s2.split()), len(s3.split())],\n    \"Unique Words\": [len(set(s1.split())), len(set(s2.split())), len(set(s3.split()))],\n}\n\n# แสดงผลการวิเคราะห์ในรูปแบบตาราง\nprint(f\"{'String':<10}{'Total Characters':<20}{'Total Words':<15}{'Unique Words':<15}\")\nprint(\"-\" * 60)\nfor i in range(3):\n    print(f\"{analysis['String'][i]:<10}{analysis['Total Characters'][i]:<20}{analysis['Total Words'][i]:<15}{analysis['Unique Words'][i]:<15}\")\n"
    },
    {
        "filename": "(III)เพิ่มของลดของ.py",
        "description": "# โปรแกรมที่ใช้ในการแสดงข้อมูลสินค้าในคลังสินค้า",
        "content_snippet": "# โปรแกรมที่ใช้ในการแสดงข้อมูลสินค้าในคลังสินค้า\nproduct1 = str(input('Enter the 1st Product Name:'))\nprice1 = float(input('Enter Price of Product:'))\nquantity1 = int(input('Enter Quantity of Product:'))\n\nproduct2 = str(input('Enter the 2nd Product Name:'))\nprice2 = float(input('Enter Price of Product:'))\nquantity2 = int(input('Enter Quantity of Product:'))\n\nproduct3 = str(input('Enter the 3st Product Name:'))\nprice3 = float(input('Enter Price of Product:'))\nquantity3 = int(input('Enter Quantity of Product:'))\nresult = quantity1 + quantity2 + quantity3\ntotal = f\"Total Quantity = {result}\"\n\nwidth_product = 25\nwidth_price = 10\nwidth_quantity = 15\nwidth_total = 50\n\nprint('--------------------------------------------------')\nprint('                    Inventory                     ')\nprint('--------------------------------------------------')\nprint('             Item             Price      Quantity ')\nprint('--------------------------------------------------')\nprint(f\"{product1:<{width_product}}{price1:>{width_price}}{quantity1:>{width_quantity}}\")\nprint(f\"{product2:<{width_product}}{price2:>{width_price}}{quantity2:>{width_quantity}}\")\nprint(f\"{product3:<{width_product}}{price3:>{width_price}}{quantity3:>{width_quantity}}\")\nprint('--------------------------------------------------')\nprint(f\"{total:>{width_total}}\")\nprint('--------------------------------------------------')"
    },
    {
        "filename": "(XV)เปลี่ยนตัวอักษรให้ตรงกันข้ามในอัลฟาเบ็ต.py",
        "description": "# โปรแกรมเข้ารหัสแบบ Reverse Alphabet",
        "content_snippet": "# โปรแกรมเข้ารหัสแบบ Reverse Alphabet\n# โปรแกรมที่ใช้เข้ารหัสข้อความด้วยการสลับตำแหน่งของตัวอักษรในอักษรภาษาอังกฤษ\ndef reverse_alphabet_encrypt(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            reversed_char = chr(shift_base + (25 - (ord(char) - shift_base)))\n            result += reversed_char\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n\n    # เข้ารหัสแบบ Reverse Alphabet\n    ciphertext = reverse_alphabet_encrypt(plaintext)\n    print(\"The encrypted ciphertext (Reverse Alphabet):\", ciphertext)\n\n    # ถอดรหัสข้อความด้วยฟังก์ชันเดียวกัน\n    decrypted_text = reverse_alphabet_encrypt(ciphertext)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(X)เพิ่มระบบให้ผู้ใช้กรอกซ้ำเพื่อยืนยันรหัสผ่าน.py",
        "description": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน\n# โดยรหัสผ่านจะต้องมีความยาวระหว่าง 8 ถึง 16 ตัวอักษร\n# และต้องประกอบด้วยอักษรตัวใหญ่ อักษรตัวเล็ก ตัวเลข และอักขระพิเศษ\n# โดยใช้ Regular Expression ในการตรวจสอบ\n# ถ้ารหัสผ่านไม่ผ่านเงื่อนไขใด ๆ จะ\n# แสดงข้อความแจ้งเตือนและให้ผู้ใช้ป้อนรหัสผ่านใหม่\n# ถ้ารหัสผ่านผ่านเงื่อนไขทั้งหมด จะแสดงข้อความยินดีและจบการทำงาน\n# โปรแกรมจะวนลูปไปเรื่อย ๆ จนกว่ารห\n# สผ่านที่ผู้ใช้ป้อนจะผ่านเงื่อนไขทั้งหมด\n# หรือจนกว่าผู้ใช้จะป้อนรหัสผ่านที่ตรงตามเงื่อนไข\n# หรือกด Ctrl+C เพื่อหยุดการทำงานของโปรแกรม\nimport re\n\nwhile True:\n    password = input(\"Set your password:\")\n    confirm_password = input(\"Confirm your password:\")\n\n    if password != confirm_password:  # Check if passwords match\n        print(\"!!!ERROR!!! The passwords do not match\\n\") # Print error message\n    elif 8 <= len(password) <= 16: # Check if password length is between 8 and 16 characters\n        if (re.search(r'[A-Z]', password) and # Check if password meets complexity requirements\n              re.search(r'[a-z]', password) and # using regular expressions (regex) to match patterns \n              re.search(r'[0-9]', password) and # for uppercase letters, lowercase letters, numbers, and special characters\n              re.search(r'[!@#$%^&*]', password)):\n            print(\":-) Your password is valid and secure (-: \")\n            break\n        else:\n            print(\"!!!ERROR!!! Your password does not meet the complexity requirements\\n\")\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "(XVI)หาพื้นที่รูปทรงเลขาคณิต.py",
        "description": "# โปรแกรมคำนวณพื้นที่รูปทรงต่างๆ",
        "content_snippet": "# โปรแกรมคำนวณพื้นที่รูปทรงต่างๆ\nimport math\n\nshape_areas = {\n    \"Circle\": {i: round(math.pi * i ** 2, 2) for i in range(1, 101)}, # คำนวณพื้นที่ของวงกลม\n    \"Square\": {i: i ** 2 for i in range(1, 101)}, # คำนวณพื้นที่ของสี่เหลี่ยม\n    \"Triangle\": {i: round((math.sqrt(3) / 4) * i ** 2, 2) for i in range(1, 101)} # คำนวณพื้นที่ของสามเหลี่ยม\n}\n\nwhile True:\n    shape = input(\"Enter shape (Circle, Square, Triangle): \").capitalize() # รับค่ารูปทรง\n    if shape not in shape_areas: # ตรวจสอบว่ารูปทรงที่รับเข้ามามีอยู่ใน dictionary หรือไม่\n        print(\"Shape not in dictionary.\") \n        break\n\n    try:\n        index = int(float(input(\"Enter the dictionary key [1-100]: \"))) # รับค่า index ของ dictionary\n        if 1 <= index <= 100:\n            print(f'-' * 50)\n            print(f\"The area of {shape} with index {index} is:\", shape_areas[shape][index]) \n            print(f'-' * 50)\n        else:\n            break\n    except ValueError:\n        break\n"
    },
    {
        "filename": "รหัสบัตรATM.py",
        "description": "# โปรแกรมรับข้อความที่มีตัวเลขซ่อนอยู่ แล้วนำตัวเลขทั้งหมดมาบวกกัน แล้วแสดงผลลัพธ์เป็นตัวเลขที่มี 4 หลัก",
        "content_snippet": "# โปรแกรมรับข้อความที่มีตัวเลขซ่อนอยู่ แล้วนำตัวเลขทั้งหมดมาบวกกัน แล้วแสดงผลลัพธ์เป็นตัวเลขที่มี 4 หลัก\nimport re\n\ntext_input = str(input())\n\nnuma = re.findall(r'\\d+', text_input)\n\nnum = sum(int(numb) for numb in numa)\n\nresult = str(num).zfill(4)\n  \nprint(result)\n\n#อลิสต้องการส่งรหัสบัตรATM ไปให้บ๊อบแต่เพื่อความปลอดภัยจึงได้นำตัวเลขเหล่านั้นมาซ่อนไว้ในประโยคเช่น\n#HE45L32LO458T6H359ISIS1BO589RNT34ODEVN80AJA\n#ซึ่งตัวเลขที่ถูกซ่อนอยู่จะถูกนำมาบวกกันเป็น\n#45+32+458+6+359+1+589+34+80 = 1604\n#นั้นคือบ๊อบจะสามารถใช้รหัส 1604 ในการกดรหัสบัตร ATM ได้นั้นเอง\n#โดยถ้าหากผลรวมที่ได้น้อยกว่า 4 หลักให้ทำการเติมเลข 0 ไปด้านหน้า"
    },
    {
        "filename": "(6)เพิ่มฟังก์ชันตรวจสอบความปลอดภัยของ secret_key (ป้องกันการใช้ key ที่คาดเดาง่าย).py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR โดยใช้ secret key ที่กำหนดเอง",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR โดยใช้ secret key ที่กำหนดเอง\ndef check_key_strength(secret_key):\n    \"\"\"ตรวจสอบความปลอดภัยของ Secret Key\"\"\"\n    if len(secret_key) < 8:\n        return \"Weak: The key is too short. Use at least 8 characters.\"\n    if secret_key.isalpha() or secret_key.isdigit():\n        return \"Weak: The key should contain a mix of letters, digits, and symbols.\"\n    return \"Strong: The key is secure.\"\n\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef encrypt(plaintext, secret_key):\n    \"\"\"เข้ารหัสข้อความด้วย XOR\"\"\"\n    ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n    return ciphertext\n\ndef decrypt(ciphertext, secret_key):\n    \"\"\"ถอดรหัสข้อความด้วย XOR\"\"\"\n    plaintext = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, secret_key))\n    return plaintext\n\n# Main Program\nprint(\"------------- Encryption and Decryption Program -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\nprint(f\"[The length of plaintext is {len(plaintext)} characters]\")\n\nsecret_key = input(\"Enter your secret key: \")\nprint(f\"[The length of secret key is {len(secret_key)} characters]\")\n\nkey_strength = check_key_strength(secret_key) # ตรวจสอบความแข็งแรงของ Secret Key\nprint(f\"Key Strength: {key_strength}\")\n\nadjusted_key = adjust_key_length(plaintext, secret_key)\nciphertext = encrypt(plaintext, adjusted_key)\nprint(f\"The encrypted ciphertext: {ciphertext}\")\n\ndecrypted_text = decrypt(ciphertext, adjusted_key)\nprint(f\"The decryption results: {decrypted_text}\\n\")"
    },
    {
        "filename": "ประวัติลูกค้าของลุงสมหมาย.py",
        "description": "# โปรแกรมรับข้อมูลชื่อ ที่อยู่ เพศ และเบอร์โทรศัพท์ แล้วแสดงผลข้อมูลทั้งหมดออกมา",
        "content_snippet": "# โปรแกรมรับข้อมูลชื่อ ที่อยู่ เพศ และเบอร์โทรศัพท์ แล้วแสดงผลข้อมูลทั้งหมดออกมา\nName_first = str(input())\nName_last = str(input())\nAddress = str(input())\nGender = str(input())\nTel = str(input())\n\nprint(\"--- Customer Detail ---\")\nprint(f\"Name : {Name_first} {Name_last}\")\nprint(f\"Address : {Address}\")\nprint(f\"Gender : {Gender}\")\nprint(f\"Tel : {Tel}\")\n"
    },
    {
        "filename": "(XV)เพิ่มการทำงานแบบreversestring.py",
        "description": "# โปรแกรมที่ทำการเข้ารหัสข้อความที่รับเข้ามา โดยการเข้ารหัสจะทำการเข้ารหัสโดยการเลื่อนตำแหน่งของตัวอักษรตาม key ที่รับเข้ามา",
        "content_snippet": "# โปรแกรมที่ทำการเข้ารหัสข้อความที่รับเข้ามา โดยการเข้ารหัสจะทำการเข้ารหัสโดยการเลื่อนตำแหน่งของตัวอักษรตาม key ที่รับเข้ามา\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        else:\n            raise ValueError(\"Error!!!! Input non-characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    ciphertext = secret_password(plaintext, key)\n    reversed_ciphertext = ciphertext[::-1]  # แปลงข้อความที่ถูกเข้ารหัสกลับด้าน\n    print(\"The encrypted ciphertext (reversed):\", reversed_ciphertext)\n\n    reversed_decryption = reversed_ciphertext[::-1] # แปลงข้อความที่ถูกเข้ารหัสกลับเป็นต้นฉบับ\n    decrypted_text = secret_password(reversed_decryption, -key) # ถอดรหัสข้อความ\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมหน้าจั่วมีช่องว่างตรงกลางแบบหลายชั้น.py",
        "description": "# โปรแกรมสร้างรูปสามเหลี่ยมหน้าจั่วที่มีชั้นว่าง",
        "content_snippet": "# โปรแกรมสร้างรูปสามเหลี่ยมหน้าจั่วที่มีชั้นว่าง\nwhile True:\n    height = int(input(\"Enter the height of isosceles triangle with hollow layers: \"))\n\n    if height == 0:\n        break\n\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        if i == 1:\n            stars = '*'\n        elif i == height:\n            stars = '*' * (2 * i - 1)\n        else:\n            stars = '*' + ' ' * (2 * i - 3) + '*'\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "(1)เพิ่มการคำนวณผลต่างของ_Matrix.py",
        "description": "# โปรแกรมนี้สร้างเมทริกซ์ 2 ตัว และคำนวณผลต่างของเมทริกซ์ A และ B",
        "content_snippet": "# โปรแกรมนี้สร้างเมทริกซ์ 2 ตัว และคำนวณผลต่างของเมทริกซ์ A และ B\n\nimport random # เรียกใช้งานโมดูล random\n\nrows, columns = 3, 3 # กำหนดขนาดของเมทริกซ์\n\nmatrix_a = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)] # สร้างเมทริกซ์ A\nmatrix_b = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)] # สร้างเมทริกซ์ B\nprint(f\"Matrix A: {matrix_a}\") # แสดงเมทริกซ์ A\nprint(f\"Matrix B: {matrix_b}\") # แสดงเมทริกซ์ B\n\n# คำนวณผลต่าง\ndifference = [[matrix_a[i][j] - matrix_b[i][j] for j in range(columns)] for i in range(rows)] # คำนวณผลต่างของเมทริกซ์ A และ B\nprint(f\"Matrix A-B: {difference}\") # แสดงผลต่างของเมทริกซ์ A และ B"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมมุมฉากแบบกลวง (Hollow Right Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    height = int(input(\"Enter the height of hollow right triangle: \"))\n\n    if height == 0:\n        break\n\n    for i in range(1, height + 1):\n        if i == 1:\n            stars = '*'\n        elif i == height:\n            stars = '*' * i\n        else:\n            stars = '*' + ' ' * (i - 2) + '*'\n        print(stars)\n    print()"
    },
    {
        "filename": "(XV)เพิ่มระบบตรวจจับข้อความว่างและบังคับinput.py",
        "description": "# โปรแกรมที่ใช้ในการเข้ารหัสข้อความด้วยวิธี Caesar cipher โดยใช้ key ที่กำหนดให้",
        "content_snippet": "# โปรแกรมที่ใช้ในการเข้ารหัสข้อความด้วยวิธี Caesar cipher โดยใช้ key ที่กำหนดให้\ndef secret_password(text, key): # ฟังก์ชันเข้ารหัสข้อความ\n    result = \"\" # ตัวแปรสำหรับเก็บข้อความที่ถูกเข้ารหัส\n    for char in text: # วนลูปทุกตัวอักษรในข้อความ\n        if char.isalpha():  # ตรวจสอบว่าเป็นตัวอักษรหรือไม่\n            shift_base = ord('A') if char.isupper() else ord('a')  # กำหนดตัวอักษรฐาน\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)  # คำนวณตัวอักษรที่ถูกเข้ารหัส/ถอดรหัส\n            result += shifted_char  # เพิ่มตัวอักษรที่ถูกเข้ารหัส/ถอดรหัส\n        elif char.isspace():  # สงวนช่องว่างในข้อความ\n            result += char\n        else:  # สร้างข้อผิดพลาดหากพบตัวอักษรที่ไม่รองรับ\n            raise ValueError(\"ข้อผิดพลาด!!!! ข้อมูลนำเข้ามีตัวอักษรที่ไม่รองรับ.\")\n    return result\n\ntry:\n    # แสดงข้อความให้ผู้ใช้กรอกข้อความที่ถูกต้อง\n    while True:\n        plaintext = input(\"กรุณากรอกข้อความ (เฉพาะตัวอักษรเท่านั้น, ไม่เป็นค่าว่าง): \").strip()\n        if plaintext:  # ตรวจสอบว่าข้อมูลนำเข้าไม่เป็นค่าว่าง\n            break\n        print(\"ข้อผิดพลาด: ข้อความต้องไม่เป็นค่าว่าง กรุณาลองอีกครั้ง.\")\n    \n    # แสดงข้อความให้ผู้ใช้กรอกคีย์ที่ถูกต้อง\n    key = int(input(\"กรุณากรอกคีย์ลับ (ตัวเลขเท่านั้น): \"))\n\n    # เข้ารหัสข้อความ\n    ciphertext = secret_password(plaintext, key)\n    print(\"ข้อความที่ถูกเข้ารหัส:\", ciphertext)\n\n    # ถอดรหัสข้อความ\n    decrypted_text = secret_password(ciphertext, -key)\n    print(f'ผลลัพธ์การถอดรหัส: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(7)เพิ่มการคำนวณความแปรปรวนและส่วนเบี่ยงเบนมาตรฐานของคะแนน.py",
        "description": "# โปรแกรมคำนวณคะแนนเฉลี่ย ความแปรปรวน และส่วนเบี่ยงเบนมาตรฐานของรายวิชาที่เลือก",
        "content_snippet": "# โปรแกรมคำนวณคะแนนเฉลี่ย ความแปรปรวน และส่วนเบี่ยงเบนมาตรฐานของรายวิชาที่เลือก\nfrom module_exam import Info_Dict, grading\nimport math\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nsubject = input(\"Enter your subject [Mathematics, Physics, English, Chemistry, Computer]: \")\n\nif subject not in valid_subjects:\n    print(\"----------------------------------------------------------\")\n    print(\"!!!   Subject Error   !!!\")\n    print(\"----------------------------------------------------------\\n\")\nelse:\n    print(\"----------------------------------------------------------\")\n    total_score = 0\n    scores_list = []\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        scores_list.append(score)\n        total_score += score\n\n    average_score = total_score / len(scores_list)\n    variance = sum((x - average_score) ** 2 for x in scores_list) / len(scores_list)\n    std_deviation = math.sqrt(variance)\n\n    print(f\"  Average Score          = {average_score:.2f}\")\n    print(f\"  Variance of Scores     = {variance:.2f}\")\n    print(f\"  Standard Deviation     = {std_deviation:.2f}\")\n    print(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "(II)หาพื้นที่_lv4.py",
        "description": "# โปรแกรมคำนวณพื้นที่ของสามเหลี่ยม, สี่เหลี่ยม, ด้านยาวของสามเหลี่ยมมุมฉาก, สมการกำลังสอง, ระยะห่างระหว่างจุด",
        "content_snippet": "# โปรแกรมคำนวณพื้นที่ของสามเหลี่ยม, สี่เหลี่ยม, ด้านยาวของสามเหลี่ยมมุมฉาก, สมการกำลังสอง, ระยะห่างระหว่างจุด\nimport math\n\n# ฟังก์ชันคำนวณพื้นที่ของสามเหลี่ยมในกรณีต่างๆ (พีระมิด, การคำนวณด้วยซับซ้อน)\ndef Area_Of_Triangle(*dimensions):\n    results = []\n    for dimension in dimensions:\n        if isinstance(dimension, tuple) and len(dimension) == 2:  # ตรวจสอบว่าเป็น tuple 2 ค่า (ฐาน, ความสูง)\n            b, h = dimension\n            if b <= 0 or h <= 0:\n                results.append(f\"Invalid dimensions for base {b} and height {h}. Both must be positive numbers.\")\n            else:\n                area = 0.5 * b * h\n                results.append(f\"Base = {b}, Height = {h}, Area = {area:.2f}\")\n        elif isinstance(dimension, tuple) and len(dimension) == 3:  # กรณีสำหรับการคำนวณสามเหลี่ยมมุมฉากจากด้านทั้งสาม\n            a, b, c = dimension\n            if a <= 0 or b <= 0 or c <= 0:\n                results.append(f\"Invalid dimensions for sides {a}, {b}, {c}. All sides must be positive numbers.\")\n            else:\n                semi_perimeter = (a + b + c) / 2\n                area = math.sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))\n                results.append(f\"Sides = ({a}, {b}, {c}), Area = {area:.2f}\")\n        else:\n            results.append(f\"Invalid input: {dimension}. Expected a tuple of two or three values.\")\n    return results\n\n# ฟังก์ชันคำนวณพื้นที่ของสี่เหลี่ยมในกรณีต่างๆ\ndef Area_Of_Rectangle(*dimensions):\n    results = []\n    for dimension in dimensions:\n        if isinstance(dimension, tuple) and len(dimension) == 2:  # ตรวจสอบว่าเป็น tuple 2 ค่า (ยาว, กว้าง)\n            l, w = dimension\n            if l <= 0 or w <= 0:\n                results.append(f\"Invalid dimensions for length {l} and width {w}. Both must be positive numbers.\")\n            else:\n                area = l * w\n                results.append(f\"Length = {l}, Width = {w}, Area = {area:.2f}\")\n        else:\n            results.append(f\"Invalid input: {dimension}. Expected a tuple of two values.\")\n    return results\n\n# ฟังก์ชันคำนวณด้านยาวของสามเหลี่ยมมุมฉาก พร้อมทั้งเช็คกรณีที่ค่าด้านไม่ถูกต้อง\ndef The_Long_Side_Of_The_Right_Triangle(*sides):\n    results = []\n    for side in sides:\n        if len(side) != 2:\n            results.append(f\"Invalid input: {side}. Expected a tuple of two sides.\")\n            continue\n        a, b = side\n        if a <= 0 or b <= 0:\n            results.append(f\"Both sides must be positive numbers: {a}, {b}\")\n        else:\n            longside = math.sqrt(a**2 + b**2)\n            results.append(f\"Sides = ({a}, {b}), Longest side = {longside:.2f}\")\n    return results\n\n# ฟังก์ชันคำนวณคำตอบของสมการกำลังสอง\ndef The_Solution_Of_Quadratic_Formula(*equations):\n    results = []\n    for a2, b2, c2 in equations:\n        if a2 == 0:\n            results.append(f\"Invalid equation for a = 0: {a2}, b = {b2}, c = {c2}. 'a' must be non-zero.\")\n            continue\n\n        discriminant = b2**2 - 4 * a2 * c2\n        if discriminant < 0:\n            root1 = (-b2 + complex(0, math.sqrt(-discriminant))) / (2 * a2)\n            root2 = (-b2 - complex(0, math.sqrt(-discriminant))) / (2 * a2)\n            results.append(f\"Equation: a = {a2}, b = {b2}, c = {c2}, Solutions: x1 = {root1}, x2 = {root2}\")\n        elif discriminant == 0:\n            x = -b2 / (2 * a2)\n            results.append(f\"Equation: a = {a2}, b = {b2}, c = {c2}, Single solution: x = {x:.2f}\")\n        else:\n            x1 = (-b2 + math.sqrt(discriminant)) / (2 * a2)\n            x2 = (-b2 - math.sqrt(discriminant)) / (2 * a2)\n            results.append(f\"Equation: a = {a2}, b = {b2}, c = {c2}, Solutions: x1 = {x1:.2f}, x2 = {x2:.2f}\")\n    return results\n\n# ฟังก์ชันคำนวณระยะทางระหว่างจุดที่สามารถรับข้อมูลในรูปแบบ 2D หรือ 3D\ndef Distance_Between_Points(*points):\n    results = []\n    for p1, p2 in points:\n        if len(p1) != len(p2):\n            results.append(f\"Points must have the same dimension: {p1} and {p2}\")\n            continue\n        distance = math.sqrt(sum((p2[i] - p1[i])**2 for i in range(len(p1))))\n        results.append(f\"Distance between points {p1} and {p2} is {distance:.2f}\")\n    return results\n\n# ฟังก์ชันแสดงผลลัพธ์ที่คำนวณจากฟังก์ชันต่างๆ\ndef display_results(title, results):\n    print(f\"\\n{'-'*50}\\n{title}\\n{'-'*50}\")\n    for result in results:\n        print(result)\n\n# เริ่มต้นโปรแกรม\ndef main():\n    print(\"Welcome to the Advanced Geometry Calculator!\")\n    \n    # คำนวณพื้นที่สามเหลี่ยม\n    triangles = [(3, 4), (5, 12, 13), (6, 8)]  # สามเหลี่ยมฐานสูงและสามเหลี่ยมมุมฉาก\n    display_results(\"Area Of Triangle\", Area_Of_Triangle(*triangles))\n\n    # คำนวณพื้นที่สี่เหลี่ยม\n    rectangles = [(4, 5), (7, 10)]  # สี่เหลี่ยม\n    display_results(\"Area Of Rectangle\", Area_Of_Rectangle(*rectangles))\n\n    # หาด้านยาวสามเหลี่ยมมุมฉาก\n    right_triangles = [(3, 4), (5, 12)]  # สามเหลี่ยมมุมฉาก\n    display_results(\"Longest Side of Right Triangle\", The_Long_Side_Of_The_Right_Triangle(*right_triangles))\n\n    # คำนวณสมการกำลังสอง\n    quadratics = [(1, -3, 2), (1, 2, 1), (1, -2, 5)]  # สมการกำลังสอง\n    display_results(\"Quadratic Solutions\", The_Solution_Of_Quadratic_Formula(*quadratics))\n\n    # คำนวณระยะห่างระหว่างจุดใน 2D และ 3D\n    points = [((1, 2), (4, 6)), ((1, 2, 3), (4, 5, 6))]  # จุดใน 2D และ 3D\n    display_results(\"Distance Between Points\", Distance_Between_Points(*points))\n\n# เรียกโปรแกรมหลัก\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "filename": "(8)เพิ่มการตรวจสอบว่า Matrix เป็น Diagonal Matrix หรือไม่.py",
        "description": "# โปรแกรมที่สุ่มสร้าง Matrix ขนาด n x n และตรวจสอบว่า Matrix นั้นเป็น Diagonal Matrix หรือไม่",
        "content_snippet": "# โปรแกรมที่สุ่มสร้าง Matrix ขนาด n x n และตรวจสอบว่า Matrix นั้นเป็น Diagonal Matrix หรือไม่\nimport random\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows != columns:\n    print(\"!!! Error: Only square matrices can be diagonal !!!\\n\")\nelse:\n    matrix = [[random.randint(0, 9) if i == j else random.choice([0, 0]) for j in range(columns)] for i in range(rows)]\n    print(f\"Generated Matrix: {matrix}\")\n\n    is_diagonal = all(matrix[i][j] == 0 for i in range(rows) for j in range(columns) if i != j)\n    print(\"Matrix is diagonal.\" if is_diagonal else \"Matrix is not diagonal.\")\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(7)เพิ่มระบบแจ้งเตือนเมื่อมีเกรด F เกิน 30%.py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการตรวจสอบว่ามีนักเรียนที่ได้เกรด F มากกว่า 30% หรือไม่",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการตรวจสอบว่ามีนักเรียนที่ได้เกรด F มากกว่า 30% หรือไม่\nfrom module_exam import Info_Dict, grading\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nsubject = input(\"Enter your subject [Mathematics, Physics, English, Chemistry, Computer]: \")\n\nif subject not in valid_subjects:\n    print(\"----------------------------------------------------------\")\n    print(\"!!!   Subject Error   !!!\")\n    print(\"----------------------------------------------------------\\n\")\nelse:\n    print(\"----------------------------------------------------------\")\n    grades_count = {'A': 0, 'B+': 0, 'B': 0, 'C+': 0, 'C': 0, 'D+': 0, 'D': 0, 'F': 0}\n    total_score = 0\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        grade = grading(subject, score)\n        grades_count[grade] += 1\n        total_score += score\n\n    total_students = len(Info_Dict)\n    f_percentage = (grades_count['F'] / total_students) * 100\n    print(f\"{'Grade':<10}{'A number of students (Percentage)':<30}\")\n    for grade, count in grades_count.items():\n        percentage = (count / total_students) * 100\n        print(f\"  {grade:<17}{count:>2} ({percentage:>5.2f})\")\n\n    if f_percentage > 30:\n        print(\"\\n!!! Alert: More than 30% of students received an F grade !!!\")\n    print(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "(8)เพิ่มการคำนวณ Matrix Inverse (เฉพาะ 2x2).py",
        "description": "# โปรแกรมคำนวณ Inverse Matrix ขนาด 2x2",
        "content_snippet": "# โปรแกรมคำนวณ Inverse Matrix ขนาด 2x2\nimport random\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows != 2 or columns != 2:\n    print(\"!!! Error: Inverse calculation only supports 2x2 matrices !!!\\n\")\nelse:\n    print(\"=\" * 80)\n    # สุ่มค่าจำนวนเต็ม 1-9 สำหรับ Matrix A (หลีกเลี่ยง determinant = 0)\n    matrix_a = [[random.randint(1, 9) for _ in range(columns)] for _ in range(rows)]\n    print(f\"Matrix A [{rows}x{columns}]: {matrix_a}\")\n\n    # คำนวณ Determinant\n    determinant = matrix_a[0][0] * matrix_a[1][1] - matrix_a[0][1] * matrix_a[1][0]\n    if determinant == 0:\n        print(\"!!! Error: Matrix is not invertible (Determinant = 0) !!!\")\n    else:\n        # คำนวณ Inverse Matrix\n        inverse_matrix = [\n            [matrix_a[1][1] / determinant, -matrix_a[0][1] / determinant],\n            [-matrix_a[1][0] / determinant, matrix_a[0][0] / determinant],\n        ]\n        print(f\"Inverse of Matrix A: {inverse_matrix}\")\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(XII)เพิ่มระบบAPIสำหรับการแปลงRomanNumeralด้วยFlask.py",
        "description": "# โปรแกรม API สำหรับแปลงตัวเลขเป็น Roman Numeral และแปลง Roman Numeral เป็นตัวเลข",
        "content_snippet": "# โปรแกรม API สำหรับแปลงตัวเลขเป็น Roman Numeral และแปลง Roman Numeral เป็นตัวเลข\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/to_roman', methods=['POST'])\ndef to_roman():\n    \"\"\"API สำหรับแปลงตัวเลขเป็น Roman Numeral\"\"\"\n    data = request.json\n    number = data.get(\"number\")\n    if not isinstance(number, int) or number <= 0 or number > 1000000:\n        return jsonify({\"error\": \"Number out of range (1 - 1,000,000)\"}), 400\n    roman = int_to_roman(number)\n    return jsonify({\"number\": number, \"roman\": roman})\n\n@app.route('/to_number', methods=['POST'])\ndef to_number():\n    \"\"\"API สำหรับแปลง Roman Numeral เป็นตัวเลข\"\"\"\n    data = request.json\n    roman = data.get(\"roman\")\n    if not isinstance(roman, str):\n        return jsonify({\"error\": \"Invalid input\"}), 400\n    result = roman_to_int(roman.upper())\n    if isinstance(result, int):\n        return jsonify({\"roman\": roman, \"number\": result})\n    return jsonify({\"error\": result}), 400\n\nif __name__ == '__main__':\n    app.run(debug=True)\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมหน้าจั่ว (Isosceles Triangle).py",
        "description": "# โปรแกรมวาดสามเหลี่ยมหน้าจั่วตามความสูงที่กำหนด",
        "content_snippet": "# โปรแกรมวาดสามเหลี่ยมหน้าจั่วตามความสูงที่กำหนด\nwhile True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of isosceles triangle: \"))\n\n    if height == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n\n    # วาดสามเหลี่ยมหน้าจั่วตามความสูงที่กำหนด\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)  # ช่องว่างด้านซ้าย\n        stars = '*' * i  # จำนวน * ในแต่ละแถว\n        print(spaces + stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "จัดเรียงข้อมูลด้วย_Bubble_Sort.py",
        "description": "#โปรแกรมจัดเรียงตัวเลขโดยใช้ Bubble Sort",
        "content_snippet": "#โปรแกรมจัดเรียงตัวเลขโดยใช้ Bubble Sort\ndef bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n    return numbers\n\n# รับข้อมูลจากผู้ใช้\nnumbers = list(map(int, input(\"ใส่ตัวเลขที่ต้องการจัดเรียง (คั่นด้วยช่องว่าง): \").split()))\nsorted_numbers = bubble_sort(numbers)\nprint(f\"ข้อมูลหลังจัดเรียง: {sorted_numbers}\")"
    },
    {
        "filename": "(8)เพิ่มการคำนวณ Matrix Addition.py",
        "description": "# โปรแกรมที่รับค่าจำนวนเต็มบวกสองจำนวน แล้วสร้าง matrix ขนาด rows x columns โดยใช้เลขสุ่มในช่วง 0-9 แล้วแสดง matrix ทั้งสอง และ matrix ผลรวม",
        "content_snippet": "# โปรแกรมที่รับค่าจำนวนเต็มบวกสองจำนวน แล้วสร้าง matrix ขนาด rows x columns โดยใช้เลขสุ่มในช่วง 0-9 แล้วแสดง matrix ทั้งสอง และ matrix ผลรวม\nimport random\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows > 3 or columns > 3:\n    print(\"!!! Error: Maximum supported size is 3x3 !!!\\n\")\nelse:\n    matrix_a = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]\n    matrix_b = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]\n\n    print(f\"Matrix A: {matrix_a}\")\n    print(f\"Matrix B: {matrix_b}\")\n\n    matrix_sum = [[matrix_a[i][j] + matrix_b[i][j] for j in range(columns)] for i in range(rows)]\n    print(f\"Matrix A + Matrix B: {matrix_sum}\")\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(VIII)คำนวณค่าเฉลี่ยและแสดงตัวอักษรที่มีค่าสูงสุดในหมวดต่าง.py",
        "description": "# โปรแกรม: คำนวณค่าเฉลี่ยและค้นหาค่าสูงสุดจากข้อมูลเกม",
        "content_snippet": "# โปรแกรม: คำนวณค่าเฉลี่ยและค้นหาค่าสูงสุดจากข้อมูลเกม\n# ข้อมูลเกม (เหมือนเดิม)\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n             'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n             'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n             'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n             'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n             'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n             'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\n# แบ่งข้อมูลออกเป็น sublists\nsublists = [data_game[i:i+4] for i in range(0, len(data_game), 4)]\n\n# ฟังก์ชัน: คำนวณค่าเฉลี่ยจาก index ที่กำหนด\ndef calculate_average(lst, index):\n    return sum(sublist[index] for sublist in lst) / len(lst)\n\n# ฟังก์ชัน: ดึงตัวอักษรที่มีค่ามากที่สุดใน index ที่กำหนด\ndef get_highest_by_index(lst, index):\n    return max(lst, key=lambda x: x[index])\n\n# คำนวณค่าเฉลี่ย\navg_points = calculate_average(sublists, 1)\navg_amount = calculate_average(sublists, 2)\navg_ratio = calculate_average(sublists, 3)\n\n# ค้นหาค่าที่สูงสุด\nhighest_point = get_highest_by_index(sublists, 1)\nhighest_amount = get_highest_by_index(sublists, 2)\nhighest_ratio = get_highest_by_index(sublists, 3)\n\n# แสดงผลลัพธ์\nprint(f\"Average Points: {avg_points:.2f}\")\nprint(f\"Average Amount: {avg_amount:.2f}\")\nprint(f\"Average Ratio: {avg_ratio:.2f}\")\n\nprint(\"\\nHighest values in each category:\")\nprint(f\"    Points: '{highest_point[0]}' with {highest_point[1]} points.\")\nprint(f\"    Amount: '{highest_amount[0]}' with {highest_amount[2]} pieces.\")\nprint(f\"    Ratio: '{highest_ratio[0]}' with {highest_ratio[3]} percent.\")\n"
    },
    {
        "filename": "Transposeตารางข้อมูล.py",
        "description": "#โปรแกรมแปลงแถวข้อมูลเป็นคอลัมน์และคอลัมน์เป็นแถว",
        "content_snippet": "#โปรแกรมแปลงแถวข้อมูลเป็นคอลัมน์และคอลัมน์เป็นแถว\ndef transpose_table(data):\n    return list(map(list, zip(*data)))\n\n# ตัวอย่างข้อมูล\ndata = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\ntransposed_data = transpose_table(data)\nprint(\"ตารางหลัง Transpose:\")\nfor row in transposed_data:\n    print(row)"
    },
    {
        "filename": "(XI)Factorialและผลรวมสะสม.py",
        "description": "# โปรแกรมคำนวณ Factorial และหาผลรวมสะสมของ Factorial",
        "content_snippet": "# โปรแกรมคำนวณ Factorial และหาผลรวมสะสมของ Factorial\n# คำนวณ Factorial และหาผลรวมสะสมของ Factorial\nprint('Generating Factorial series with cumulative sums')\nn = int(input(\"Enter 'n' for Factorial series: \"))\nresult = 1\nfactorial_list = []\ncumulative_sum = 0\ncumulative_sum_list = []\n\n# Loop คำนวณ\nfor i in range(1, n+1):\n    result *= i\n    factorial_list.append(result)  # เพิ่มค่า factorial ในลิสต์\n    cumulative_sum += result  # สะสมผลรวม\n    cumulative_sum_list.append(cumulative_sum)\n\n# แสดงผล\nprint(f\"Factorial series: {factorial_list}\")\nprint(f\"Cumulative sum of factorials: {cumulative_sum_list}\\n\")\n"
    },
    {
        "filename": "(1)ลำดับจำนวนเต็ม(Integer Sequence).py",
        "description": "#โปรแกรมในการรับค่าตัวแปร n ที่เป็นจำนวนเต็มเท่านั้น แล้วใช้การโปรแกรมแบบเวียนซ้ำ (RecursiveProgramming) ในการสร้าง Tuple ที่ประกอบด้วยค่าของลำดับจำนวนเต็มนี้ตั้งแต่ 𝐾0 จนถึง 𝐾𝑛",
        "content_snippet": "#โปรแกรมในการรับค่าตัวแปร n ที่เป็นจำนวนเต็มเท่านั้น แล้วใช้การโปรแกรมแบบเวียนซ้ำ (RecursiveProgramming) ในการสร้าง Tuple ที่ประกอบด้วยค่าของลำดับจำนวนเต็มนี้ตั้งแต่ 𝐾0 จนถึง 𝐾𝑛 \n\ndef integer_sequence(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return integer_sequence(n-3) + 2 * integer_sequence(n-2) + 4 * integer_sequence(n-1)\n\ndef generate_tuple(n):\n    return tuple(integer_sequence(i) for i in range(n + 1))\n\nwhile True:\n    n = int(input(\"Enter 'n' of Integer Sequence : \"))\n    print(f'A tuple of Integer Sequence [n={n}] is {generate_tuple(n)}\\n')\n    \n    if n == -1:\n        break"
    },
    {
        "filename": "(2)เพิ่มการคำนวณผลคูณของตัวเลขในแถวที่เลือก.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการคำนวณผลคูณของตัวเลขในแถวที่เลือก",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการคำนวณผลคูณของตัวเลขในแถวที่เลือก\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]\n        new_row = [previous_row[-1]]\n        for j in range(len(previous_row)):\n            new_row.append(new_row[-1] + previous_row[j])\n        rows.append(new_row)\n    return rows\n\ndef main():\n    rows = []\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            row_product = 1\n            for num in rows[user_row]:\n                row_product *= num\n            print(f\"Row {user_row}: {rows[user_row]} (Product: {row_product})\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมหน้าจั่วแบบกลวง (Hollow Isosceles Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    height = int(input(\"Enter the height of hollow isosceles triangle: \"))\n\n    if height == 0:\n        break\n\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        if i == 1:\n            stars = '*'\n        elif i == height:\n            stars = '*' * i\n        else:\n            stars = '*' + ' ' * (i - 2) + '*'\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "(XIII)ReverseGuessingGame(เครื่องทายเลขผู้เล่น).py",
        "description": "# โปรแกรมทายตัวเลขที่ผู้เล่นกำหนด",
        "content_snippet": "# โปรแกรมทายตัวเลขที่ผู้เล่นกำหนด\n# โดยเครื่องจะทายตัวเลขที่ผู้เล่นกำหนด โดยการใช้วิธีการทายแบบทวิภาค\ndef reverse_guessing_game():\n    \"\"\"เครื่องพยายามทายตัวเลขที่ผู้เล่นกำหนด\"\"\"\n    print(\"\\nThink of a number between 1 and 100, and I will try to guess it.\")\n    low, high = 1, 100\n\n    while low <= high: # วนลูปจนกว่าช่วงจะยังไม่เสร็จสิ้น\n        guess = (low + high) // 2 # ทายตัวเลขตรงกลางของช่วง\n        print(f\"My guess is {guess}.\")\n        response = input(\"Is it correct (c), too low (l), or too high (h)? \").lower()\n\n        if response == 'c': # ถ้าทายถูก\n            print(\"Yay! I guessed it!\") # แสดงข้อความว่าทายถูก\n            return\n        elif response == 'l': # ถ้าทายต่ำเกิน\n            low = guess + 1 # ปรับค่าต่ำสุด\n        elif response == 'h': # ถ้าทายสูงเกิน\n            high = guess - 1 # ปรับค่าสูงสุด\n        else:\n            print(\"Invalid response. Please enter 'c', 'l', or 'h'.\")\n\n    print(\"Something went wrong. Are you sure you thought of a number?\")\n\nreverse_guessing_game()\n"
    },
    {
        "filename": "สร้างกราฟเส้นจากข้อมูลที่ป้อน.py",
        "description": "# โปรแกรมสำหรับสร้างกราฟแสดงข้อมูลที่ป้อน",
        "content_snippet": "# โปรแกรมสำหรับสร้างกราฟแสดงข้อมูลที่ป้อน\nimport matplotlib.pyplot as plt\n\n\ndef plot_graph(data):\n    plt.plot(data, marker='o')\n    plt.title(\"กราฟแสดงข้อมูลที่ป้อน\")\n    plt.xlabel(\"ดัชนี\")\n    plt.ylabel(\"ค่า\")\n    plt.grid(True)\n    plt.show()\n\n\n# ตัวอย่างการใช้งาน\ndata = list(map(float, input(\"ใส่ข้อมูล (ตัวเลขคั่นด้วยช่องว่าง): \").split()))\nplot_graph(data)"
    },
    {
        "filename": "เกมทายผลคณิตศาสตร์.py",
        "description": "# โปรแกรมทายผลคณิตศาสตร์",
        "content_snippet": "# โปรแกรมทายผลคณิตศาสตร์\n# เกมให้ผู้เล่นตอบคำถามคณิตศาสตร์แบบสุ่ม\nimport random\nimport operator\n\ndef generate_math_problem():\n    ops = {'+': operator.add, '-': operator.sub, '*': operator.mul}\n    num1 = random.randint(1, 10)\n    num2 = random.randint(1, 10)\n    op = random.choice(list(ops.keys()))\n    answer = ops[op](num1, num2)\n    return f\"{num1} {op} {num2}\", answer\n\ndef play_math_game(rounds=5):\n    print(\"เริ่มเกมทายผลคณิตศาสตร์!\")\n    score = 0\n    for _ in range(rounds):\n        problem, answer = generate_math_problem()\n        print(f\"คำถาม: {problem}\")\n        user_answer = int(input(\"คำตอบของคุณ: \"))\n        if user_answer == answer:\n            print(\"ถูกต้อง!\")\n            score += 1\n        else:\n            print(f\"ผิด! คำตอบที่ถูกต้องคือ {answer}\")\n    print(f\"จบเกม! คุณได้คะแนน {score}/{rounds}\")\n\n# เรียกใช้งาน\nplay_math_game()"
    },
    {
        "filename": "(5)เพิ่มการบันทึกเงินทอนลงในไฟล์.py",
        "description": "# โปรแกรมคำนวณเงินทอน และบันทึกข้อมูลลงไฟล์",
        "content_snippet": "# โปรแกรมคำนวณเงินทอน และบันทึกข้อมูลลงไฟล์\n# Program to save the change calculation to a file\ndef calculate_change(total_price, payment):\n    denominations = {\n        \"The 500-$Baht Banknote\": 500,\n        \"The 100-$Baht Banknote\": 100,\n        \"The 50-$Baht Banknote\": 50,\n        \"The 20-$Baht Banknote\": 20,\n        \"The 10-$Baht Coin\": 10,\n        \"The 5-$Baht Coin\": 5,\n        \"The 2-$Baht Coin\": 2,\n        \"The 1-$Baht Coin\": 1,\n    }\n\n    change = payment - total_price\n    if change < 0:\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in denominations.items():\n            count = change // value\n            if count > 0:\n                result.append(f\"{denom} = {count} Piece(s)\")\n            change %= value\n        return \"\\n\".join(result)\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    total_price = int(input(\"The total price of products: \"))\n    payment = int(input(\"Customer payment: \"))\n    print(\"----------------------------------------------------------\")\n\n    if payment == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change(total_price, payment)\n    with open(\"change_log.txt\", \"a\") as file:\n        file.write(f\"Total Price: {total_price}, Payment: {payment}\\n\")\n        file.write(result + \"\\n\")\n        file.write(\"----------------------------------------------------------\\n\")\n    print(result)\n    print(\"Change saved to 'change_log.txt'\")\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "BullCowGame.py",
        "description": "# โปรแกรมเกมทายเลข Bull and Cow โดยใช้ tkinter",
        "content_snippet": "# โปรแกรมเกมทายเลข Bull and Cow โดยใช้ tkinter\nimport tkinter as tk  # นำเข้า tkinter สำหรับสร้าง GUI\nfrom tkinter import messagebox  # นำเข้า messagebox สำหรับแสดงข้อความเตือน\nimport random  # นำเข้า random สำหรับสุ่มเลขลับ\n\nclass BullCowGame:\n    def __init__(self, root):  # ตัวสร้างของคลาส BullCowGame รับ root เป็นตัวแปร\n        self.root = root  # เก็บอ้างอิงของหน้าต่างหลัก\n        self.root.title(\"Bull and Cow guessing game\")  # กำหนดชื่อหน้าต่างหลัก\n\n        # สร้างเลขลับ 4 หลักแบบสุ่ม\n        self.secret_number = [str(random.randint(0, 9)) for _ in range(4)]  # สุ่มเลข 4 หลักจาก 0 ถึง 9\n        print(\"Secret number:\", self.secret_number)  # พิมพ์เลขลับเพื่อใช้ในการ debug (สามารถลบออกหลังจากเสร็จสิ้น)\n\n        # Label และ Entry สำหรับการทายเลข\n        self.label_guess = tk.Label(root, text=\"Guessing:\")  # สร้าง label สำหรับข้อความ \"Guessing:\"\n        self.label_guess.grid(row=0, column=0, padx=10, pady=10)  # วาง label ในตำแหน่งแถวที่ 0 คอลัมน์ที่ 0\n\n        # สร้าง Entry 4 ช่องสำหรับกรอกตัวเลข\n        self.entries = [tk.Entry(root, width=3, font=(\"Arial\", 16)) for _ in range(4)]  # สร้าง entry จำนวน 4 ช่องสำหรับกรอกเลข\n        for i, entry in enumerate(self.entries):  # วาง entry ในแต่ละช่อง\n            entry.grid(row=0, column=i+1)  # วางในแถวที่ 0 คอลัมน์ที่ i+1\n\n        # ปุ่ม Submit\n        self.submit_button = tk.Button(root, text=\"Submit\", command=self.check_guess)  # สร้างปุ่ม \"Submit\"\n        self.submit_button.grid(row=0, column=5, padx=10)  # วางปุ่มในตำแหน่งแถวที่ 0 คอลัมน์ที่ 5\n\n        # Label สำหรับแสดงผล Bull และ Cow\n        self.hint_label = tk.Label(root, text=\"Hint:\")  # สร้าง label สำหรับแสดงผลลัพธ์ Bull และ Cow\n        self.hint_label.grid(row=1, column=0, columnspan=6, pady=10)  # วาง label ในแถวที่ 1 ครอบคลุมคอลัมน์ที่ 0-5\n\n    def check_guess(self):  # ฟังก์ชันสำหรับตรวจสอบการทาย\n        guess = [entry.get() for entry in self.entries]  # รับค่าจาก Entry ทั้ง 4 ช่องเป็นรายการ\n\n        # ตรวจสอบว่ากรอกครบ 4 หลัก และเป็นตัวเลข\n        if len(guess) != 4 or not all(g.isdigit() for g in guess):  # ตรวจสอบว่าเป็นตัวเลขและกรอกครบ 4 ตัว\n            messagebox.showwarning(\"Invalid input\", \"Please enter a 4-digit number.\")  # หากไม่ครบหรือไม่ใช่ตัวเลขให้แสดงข้อความเตือน\n            return\n\n        # คำนวณ Bulls และ Cows\n        bulls = sum(1 for i in range(4) if guess[i] == self.secret_number[i])  # คำนวณ Bulls (ตรงทั้งตัวเลขและตำแหน่ง)\n        cows = sum(1 for g in guess if g in self.secret_number) - bulls  # คำนวณ Cows (ตัวเลขตรงแต่ตำแหน่งไม่ตรง)\n\n        # แสดงผล\n        if bulls == 4:  # ถ้าผู้เล่นทายถูกหมด\n            self.hint_label.config(text=\"*** CORRECT ***\")  # แสดงข้อความว่า \"ถูกต้อง\"\n        else:  # หากทายผิด\n            self.hint_label.config(text=f\"Bulls: {bulls} and Cows: {cows}\")  # แสดงผล Bulls และ Cows\n\n# ส่วนของการเริ่มต้นโปรแกรม\nif __name__ == \"__main__\":  # เมื่อโปรแกรมทำงานเป็นหลัก\n    root = tk.Tk()  # สร้างหน้าต่างหลัก\n    game = BullCowGame(root)  # สร้างเกมโดยส่ง root ไปให้คลาส BullCowGame\n    root.mainloop()  # เริ่มการทำงานของ loop GUI\n"
    },
    {
        "filename": "จัดกลุ่มข้อมูลตามคีย์.py",
        "description": "#โปรแกรมจัดกลุ่มข้อมูลตามคีย์และสรุปยอดรวมในแต่ละกลุ่ม",
        "content_snippet": "#โปรแกรมจัดกลุ่มข้อมูลตามคีย์และสรุปยอดรวมในแต่ละกลุ่ม\nfrom collections import defaultdict\n\ndef group_by_key(data, key, value_key):\n    grouped_data = defaultdict(int)\n    for item in data:\n        grouped_data[item[key]] += item[value_key]\n    return grouped_data\n\n# ตัวอย่างข้อมูล\ndata = [\n    {\"category\": \"อาหาร\", \"sales\": 1000},\n    {\"category\": \"เครื่องดื่ม\", \"sales\": 500},\n    {\"category\": \"อาหาร\", \"sales\": 1200},\n    {\"category\": \"เครื่องเขียน\", \"sales\": 300}\n]\n\ngrouped = group_by_key(data, \"category\", \"sales\")\nprint(\"ยอดขายรวมในแต่ละหมวดหมู่:\")\nfor category, total in grouped.items():\n    print(f\"{category}: {total} บาท\")"
    },
    {
        "filename": "(5)เพิ่มโหมดคำนวณเงินทอนแบบเลือกหน่วยขั้นต่ำ (เช่น ไม่รับเหรียญเล็ก).py",
        "description": "# โปรแกรมคำนวณเงินทอนโดยไม่รวมเหรียญหรือธนบัตรที่กำหนด",
        "content_snippet": "# โปรแกรมคำนวณเงินทอนโดยไม่รวมเหรียญหรือธนบัตรที่กำหนด\n# Program to calculate change excluding specific denominations\ndef calculate_change_exclude(total_price, payment, excluded_units):\n    denominations = {\n        \"The 500-$Baht Banknote\": 500,\n        \"The 100-$Baht Banknote\": 100,\n        \"The 50-$Baht Banknote\": 50,\n        \"The 20-$Baht Banknote\": 20,\n        \"The 10-$Baht Coin\": 10,\n        \"The 5-$Baht Coin\": 5,\n        \"The 2-$Baht Coin\": 2,\n        \"The 1-$Baht Coin\": 1,\n    }\n\n    # Remove excluded denominations\n    denominations = {k: v for k, v in denominations.items() if v not in excluded_units}\n\n    change = payment - total_price\n    if change < 0:\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in denominations.items():\n            count = change // value\n            if count > 0:\n                result.append(f\"{denom} = {count} Piece(s)\")\n            change %= value\n        if change > 0:  # Remaining change that can't be returned\n            result.append(f\"Remaining unreturnable amount: {change} Baht\")\n        return \"\\n\".join(result)\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    excluded_units = list(map(int, input(\"Enter excluded units (e.g., 1,2): \").split(\",\")))\n    total_price = int(input(\"The total price of products: \"))\n    payment = int(input(\"Customer payment: \"))\n    print(\"----------------------------------------------------------\")\n\n    if payment == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change_exclude(total_price, payment, excluded_units)\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "(7)เพิ่มการแสดงคะแนนและเกรดของนักเรียนทั้งหมดในรูปแบบเรียงตามคะแนน.py",
        "description": "# โปรแกรมแสดงผลคะแนนและเกรดของนักเรียนในรายวิชาต่างๆ",
        "content_snippet": "# โปรแกรมแสดงผลคะแนนและเกรดของนักเรียนในรายวิชาต่างๆ\nfrom module_exam import Info_Dict, grading\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nsubject = input(\"Enter your subject [Mathematics, Physics, English, Chemistry, Computer]: \")\n\nif subject not in valid_subjects:\n    print(\"----------------------------------------------------------\")\n    print(\"!!!   Subject Error   !!!\")\n    print(\"----------------------------------------------------------\\n\")\nelse:\n    print(\"----------------------------------------------------------\")\n    student_scores = []\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        grade = grading(subject, score)\n        student_scores.append((student_id, score, grade))\n\n    # เรียงลำดับคะแนนจากสูงไปต่ำ\n    student_scores.sort(key=lambda x: x[1], reverse=True)\n\n    print(f\"{'Student ID':<15}{'Score':<10}{'Grade':<10}\")\n    for student_id, score, grade in student_scores:\n        print(f\"{student_id:<15}{score:<10}{grade:<10}\")\n\n    print(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "(5)เพิ่มตัวเลือกแสดงเงินทอนเป็นหน่วยหลัก (THB) และรอง (สตางค์).py",
        "description": "# โปรแกรมคำนวณเงินทอนด้วยหน่วยสตางค์ไทย",
        "content_snippet": "# โปรแกรมคำนวณเงินทอนด้วยหน่วยสตางค์ไทย\n# Program to calculate change with Thai Satang units\ndef calculate_change(total_price, payment):\n    denominations = {\n        \"The 500-$Baht Banknote\": 500,\n        \"The 100-$Baht Banknote\": 100,\n        \"The 50-$Baht Banknote\": 50,\n        \"The 20-$Baht Banknote\": 20,\n        \"The 10-$Baht Coin\": 10,\n        \"The 5-$Baht Coin\": 5,\n        \"The 2-$Baht Coin\": 2,\n        \"The 1-$Baht Coin\": 1,\n        \"The 50-Satang Coin\": 0.5,\n        \"The 25-Satang Coin\": 0.25,\n    }\n\n    change = payment - total_price\n    if change < 0:\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in denominations.items():\n            count = int(change // value)\n            if count > 0:\n                unit = \"Piece(s)\"\n                result.append(f\"{denom} = {count} {unit}\")\n            change = round(change % value, 2)\n        return \"\\n\".join(result)\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    total_price = float(input(\"The total price of products (THB): \"))\n    payment = float(input(\"Customer payment (THB): \"))\n    print(\"----------------------------------------------------------\")\n\n    if payment == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change(total_price, payment)\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "คำนวณแฟกทอเรียล.py",
        "description": "#โปรแกรมคำนวณแฟกทอเรียลของตัวเลขที่ป้อน",
        "content_snippet": "#โปรแกรมคำนวณแฟกทอเรียลของตัวเลขที่ป้อน\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# รับข้อมูลจากผู้ใช้\nnumber = int(input(\"กรุณาใส่ตัวเลขที่ต้องการคำนวณแฟกทอเรียล: \"))\nif number < 0:\n    print(\"ไม่สามารถคำนวณแฟกทอเรียลของเลขลบได้\")\nelse:\n    result = factorial(number)\n    print(f\"{number}! = {result}\")"
    },
    {
        "filename": "(XIV)บันทึกผลลัพธ์ลงในไฟล์.py",
        "description": "# โปรแกรมสร้าง Pascal Triangle และบันทึกลงในไฟล์",
        "content_snippet": "# โปรแกรมสร้าง Pascal Triangle และบันทึกลงในไฟล์\ndef pascal_triangle_to_file(n, filename): # ฟังก์ชันสร้าง Pascal Triangle และบันทึกลงในไฟล์\n    def generate_row(row): # ฟังก์ชันสร้างแถวใหม่\n        current = [1] # สร้างแถวใหม่\n        for i in range(1, len(row)): # วนลูปเพื่อสร้างตัวเลขใหม่\n            current.append(row[i - 1] + row[i]) # สร้างตัวเลขใหม่จากผลรวม\n        current.append(1) # เพิ่มตัวเลขสุดท้าย\n        return current # ส่งค่ากลับ\n\n    triangle = [[1]] # สร้างแถวแรก\n    for _ in range(1, n + 1): # วนลูปเพื่อสร้างแถว\n        triangle.append(generate_row(triangle[-1])) # เพิ่มแถวใหม่เข้าไปในรายการ\n\n    # บันทึกผลลงในไฟล์\n    with open(filename, 'w') as file: # เปิดไฟล์เพื่อเขียน\n        for row in triangle: # วนลูปเพื่อบันทึกแถวลงในไฟล์\n            file.write(\" \".join(map(str, row)) + \"\\n\") # บันทึกแถวลงในไฟล์\n\n    return f\"Pascal Triangle saved to {filename}\" # ส่งค่ากลับ\n\n# รับค่าระดับ\nn = int(input(\"Enter number of rows for Pascal Triangle: \"))\nprint(pascal_triangle_to_file(n, \"pascal_triangle.txt\"))\n"
    },
    {
        "filename": "ประกาศ_Error.py",
        "description": "# โปรแกรมตัวอย่างการตรวจจับข้อผิดพลาด (Error) แต่ละประเภท",
        "content_snippet": "# โปรแกรมตัวอย่างการตรวจจับข้อผิดพลาด (Error) แต่ละประเภท\nprint(\"กรุณากรอก input ตามนี้เพื่อตรวจสอบข้อผิดพลาดแต่ละประเภท:\")\nprint(\"1. TypeError: กรอก 1 + 'a'\")\nprint(\"2. KeyError: กรอก 'jack' (เพื่อใช้เป็น key ใน dictionary ที่ไม่มี key นี้)\")\nprint(\"3. NameError: กรอก 'A' (เพื่อใช้ตัวแปรที่ยังไม่ได้ประกาศ)\")\nprint(\"4. IndexError: กรอก 0 (เพื่อเข้าถึง index ที่ไม่มีใน list ที่ว่าง)\")\nprint(\"5. ValueError: กรอก '20.5abc' (เพื่อแปลง string ที่มีตัวอักษรเป็น integer)\")\nprint(\"\\nหมายเหตุ: กรอก input ตามที่ระบุไว้เพื่อดูการเกิด Exception และวิธีการตรวจจับข้อผิดพลาด\")\n\n# 1. TypeError - เกิดจากการใช้ตัวแปรประเภทที่ไม่ถูกต้อง (เช่น การบวก string กับ integer)\ntry:\n    user_input = input(\"กรอก 1 + 'a' เพื่อตรวจสอบ TypeError: \")\n    result = 1 + user_input  # จะเกิด TypeError หาก user_input ไม่ใช่ integer\nexcept TypeError as e:\n    print(\"Escaping TypeError:\", e ,\"\\n\")\n\n# 2. KeyError - เกิดเมื่อพยายามเข้าถึง key ที่ไม่มีใน dictionary\ntry:\n    data = {\"name\": \"Alice\"}\n    key = input(\"กรอก key ที่ไม่มีใน dictionary เช่น 'jack' เพื่อตรวจสอบ KeyError: \")\n    print(data[key])  # จะเกิด KeyError หาก key ไม่มีใน dictionary\nexcept KeyError as e:\n    print(\"Escaping KeyError:\", e ,\"\\n\")\n\n# 3. NameError - เกิดจากการใช้ตัวแปรที่ยังไม่ได้ประกาศ\ntry:\n    var_name = input(\"กรอกชื่อของตัวแปรที่ยังไม่ได้ประกาศ เช่น 'A' เพื่อตรวจสอบ NameError: \")\n    print(eval(var_name))  # จะเกิด NameError หาก var_name ไม่มีอยู่จริง\nexcept NameError as e:\n    print(\"Escaping NameError:\", e ,\"\\n\")\n\n# 4. IndexError - เกิดเมื่อพยายามเข้าถึง index ที่อยู่นอกขอบเขตของ list\ntry:\n    my_list = []  # กำหนด list ที่ว่าง\n    index = int(input(\"กรอก index ที่ไม่มีใน list ว่าง เช่น 0 เพื่อตรวจสอบ IndexError: \"))\n    print(my_list[index])  # จะเกิด IndexError หาก list ไม่มี index ที่กรอก\nexcept IndexError as e:\n    print(\"Escaping IndexError:\", e ,\"\\n\")\n\n# 5. ValueError - เกิดเมื่อพยายามแปลง string ที่ไม่ใช่ตัวเลขให้เป็น integer\ntry:\n    user_input = input(\"กรอกค่าที่ไม่ใช่ตัวเลข เช่น '20.5abc' เพื่อตรวจสอบ ValueError: \")\n    number = int(user_input)  # จะเกิด ValueError หาก user_input ไม่สามารถแปลงเป็น integer ได้\nexcept ValueError as e:\n    print(\"Escaping ValueError:\", e ,\"\\n\")\n"
    },
    {
        "filename": "แปลงสกุลเงิน.py",
        "description": "#โปรแกรมแปลงสกุลเงินระหว่าง USD และ THB โดยใช้อัตราแลกเปลี่ยนที่กำหนด",
        "content_snippet": "#โปรแกรมแปลงสกุลเงินระหว่าง USD และ THB โดยใช้อัตราแลกเปลี่ยนที่กำหนด\ndef convert_currency(amount, rate, to_currency):\n    if to_currency == \"USD\":\n        return amount / rate\n    elif to_currency == \"THB\":\n        return amount * rate\n    else:\n        raise ValueError(\"สกุลเงินไม่รองรับ\")\n\n# อัตราแลกเปลี่ยนปัจจุบัน (สมมติ)\nexchange_rate = 33.5\n\n# รับข้อมูลจากผู้ใช้\namount = float(input(\"กรุณาใส่จำนวนเงิน: \"))\ncurrency = input(\"แปลงเป็นสกุลเงิน (USD/THB): \").upper()\n\ntry:\n    converted = convert_currency(amount, exchange_rate, currency)\n    print(f\"จำนวนเงินที่แปลงคือ: {converted:.2f} {currency}\")\nexcept ValueError as e:\n    print(e)"
    },
    {
        "filename": "หาค่าต่างระหว่างค่าสูงสุดและต่ำสุด.py",
        "description": "#โปรแกรมคำนวณส่วนต่างระหว่างค่ามากที่สุดและน้อยที่สุดในชุดข้อมูล",
        "content_snippet": "#โปรแกรมคำนวณส่วนต่างระหว่างค่ามากที่สุดและน้อยที่สุดในชุดข้อมูล\ndef max_min_difference(data):\n    return max(data) - min(data)\n\n# รับข้อมูลจากผู้ใช้\ndata = list(map(float, input(\"ใส่ข้อมูลตัวเลข (คั่นด้วยช่องว่าง): \").split()))\n\ndifference = max_min_difference(data)\nprint(f\"ค่าต่างระหว่างค่าสูงสุดและต่ำสุดคือ: {difference:.2f}\")"
    },
    {
        "filename": "(V)+dict.py",
        "description": "# โปรแกรมนี้เป็นโค้ดที่ใช้ในการประมวลผลข้อมูลจากสตริง 2 ตัว โดยใช้ฟังก์ชัน",
        "content_snippet": "# โปรแกรมนี้เป็นโค้ดที่ใช้ในการประมวลผลข้อมูลจากสตริง 2 ตัว โดยใช้ฟังก์ชัน\n#โค้ดนี้เพิ่มการใช้ ฟังก์ชัน เพื่อทำให้โค้ดดูเป็นระเบียบและใช้งานได้ง่ายขึ้น โดยใช้ฟังก์ชัน process_strings() ที่คำนวณผลลัพธ์ทั้งหมด \n# จากนั้นใช้ dictionary ในการเก็บผลลัพธ์ของการคำนวณต่าง ๆ\ndef process_strings(a, b):\n    # แปลง String เป็นเซ็ต\n    set_a = set(a)\n    set_b = set(b)\n\n    # สร้างผลลัพธ์เป็น dictionary\n    result = {\n        \"Unique in A\": len(set_a),\n        \"Unique in B\": len(set_b),\n        \"Common characters\": set_a & set_b,\n        \"A not in B\": set_a - set_b,\n        \"B not in A\": set_b - set_a,\n        \"Symmetric difference\": set_a ^ set_b,\n        \"Union\": set_a | set_b\n    }\n    return result\n\n# รับข้อมูลจากผู้ใช้ และอนุญาตตัวเลข\nuser_a = input('Please enter the string A (can include numbers): ')\nuser_b = input('Please enter the string B (can include numbers): ')\n\n# เรียกใช้ฟังก์ชัน\noutput = process_strings(user_a, user_b)\n\n# แสดงผลแบบจัดระเบียบ\nprint('--------------------------------------------------')\nfor key, value in output.items():\n    print(f'{key}: {value}')\n"
    },
    {
        "filename": "(XIII)GuessingGameกับตัวช่วยHint.py",
        "description": "# โปรแกรมที่ใช้ในการเล่นเกมทายตัวเลข โดยมีตัวช่วยบอกระยะห่างของตัวเลขที่ทายไปจากตัวเลขที่ถูกต้อง",
        "content_snippet": "# โปรแกรมที่ใช้ในการเล่นเกมทายตัวเลข โดยมีตัวช่วยบอกระยะห่างของตัวเลขที่ทายไปจากตัวเลขที่ถูกต้อง\nimport random\n\ndef hint_guessing_game():\n    # เกมที่มีตัวช่วยบอกระยะห่าง\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    attempts = 5 # จำนวนรอบที่ให้ทาย\n\n    print(\"\\n***** Hint Guessing Game *****\")\n    print(\"Hints will tell you if you're very far, far, close, or very close.\\n\")\n\n    for attempt in range(1, attempts + 1): # วนลูปจนครบจำนวนรอบ\n        guess = int(input(f\"Attempt {attempt}: Enter your guess: \")) # รับค่าที่ผู้เล่นทาย\n        diff = abs(secret_number - guess) # คำนวณความต่างระหว่างตัวเลขที่ทายกับตัวเลขลับ\n\n        if guess == secret_number: # ถ้าทายถูก\n            print(f\"Correct! You guessed the number {secret_number}.\")\n            return\n        elif diff > 20: # ถ้าความต่างมากกว่า 20\n            print(\"Hint: You're very far.\")\n        elif diff > 10: # ถ้าความต่างมากกว่า 10\n            print(\"Hint: You're far.\")\n        elif diff > 5: # ถ้าความต่างมากกว่า 5\n            print(\"Hint: You're close.\")\n        else:\n            print(\"Hint: You're very close.\")\n\n    print(f\"\\nGame over! The secret number was {secret_number}.\")\n\nhint_guessing_game()\n"
    },
    {
        "filename": "(XIII)GuessingGameแบบให้คะแนน.py",
        "description": "# โปรแกรมทายตัวเลขที่ให้คะแนนตามความใกล้เคียง",
        "content_snippet": "# โปรแกรมทายตัวเลขที่ให้คะแนนตามความใกล้เคียง\nimport random\n\ndef scoring_guessing_game(): \n    # เกมทายตัวเลขที่ให้คะแนนตามความใกล้เคียง\n    secret_number = random.randint(1, 100) # สุ่มตัวเลข\n    attempts = 5 # จำนวนรอบที่ให้ทาย\n    score = 0 # คะแนนเริ่มต้น\n\n    print(\"\\n***** Scoring Guessing Game *****\")\n    print(\"Try to guess the number. The closer you are, the higher your score.\\n\")\n\n    for attempt in range(1, attempts + 1): # วนลูปจนครบจำนวนรอบ\n        guess = int(input(f\"Attempt {attempt}: Enter your guess: \")) # รับค่าที่ผู้เล่นทาย\n        diff = abs(secret_number - guess) # คำนวณความต่างระหว่างตัวเลขที่ทายกับตัวเลขลับ\n        points = max(0, 10 - diff)  # ยิ่งใกล้ยิ่งได้คะแนนสูงสุด 10\n        score += points # บวกคะแนน\n\n        if guess == secret_number: # ถ้าทายถูก\n            print(f\"Correct! You guessed the number {secret_number}.\")\n            break\n        elif guess < secret_number: # ตรวจสอบว่าเดาน้อยเกินไปหรือมากเกินไป\n            print(f\"Your guess is too low. You scored {points} points.\")\n        else: # ตรวจสอบว่าเดาน้อยเกินไปหรือมากเกินไป\n            print(f\"Your guess is too high. You scored {points} points.\")\n\n    print(f\"\\nGame over! The secret number was {secret_number}. Total score: {score}\")\n\nscoring_guessing_game()\n"
    },
    {
        "filename": "กรองข้อมูลตามเงื่อนไข.py",
        "description": "#โปรแกรมกรองข้อมูลที่มีค่ามากกว่าค่าที่กำหนด",
        "content_snippet": "#โปรแกรมกรองข้อมูลที่มีค่ามากกว่าค่าที่กำหนด\ndef filter_data(data, threshold):\n    return [value for value in data if value > threshold]\n\n# รับข้อมูลจากผู้ใช้\ndata = list(map(float, input(\"ใส่ข้อมูลตัวเลข (คั่นด้วยช่องว่าง): \").split()))\nthreshold = float(input(\"กรุณาใส่ค่าที่ต้องการกรอง: \"))\n\nfiltered_data = filter_data(data, threshold)\nprint(f\"ข้อมูลที่ผ่านการกรอง: {filtered_data}\")"
    },
    {
        "filename": "(XV)การเข้ารหัสแบบสลับตำแหน่งอักขระ(TranspositionCipher).py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความแบบ Transposition Cipher",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความแบบ Transposition Cipher\ndef transposition_encrypt(text):\n    result = \"\"\n    for i in range(0, len(text), 2):\n        # สลับตำแหน่งตัวอักษรเป็นคู่ (เช่น AB -> BA)\n        if i + 1 < len(text):\n            result += text[i + 1] + text[i]\n        else:\n            result += text[i]  # ตัวสุดท้ายหากเป็นคี่ไม่สลับ\n    return result\n\ndef transposition_decrypt(text):\n    return transposition_encrypt(text)  # สลับกลับใช้ฟังก์ชันเดิม\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n\n    # เข้ารหัสแบบ Transposition\n    ciphertext = transposition_encrypt(plaintext)\n    print(\"The encrypted ciphertext (Transposition):\", ciphertext)\n\n    # ถอดรหัสข้อความ\n    decrypted_text = transposition_decrypt(ciphertext)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "วาดรูปเลขาคณิต.py",
        "description": "# โปรแกรมสำหรับวาดรูปทรงต่างๆ โดยผู้ใช้สามารถเลือกวาดรูปทรงได้หลายรูปพร้อมกัน",
        "content_snippet": "# โปรแกรมสำหรับวาดรูปทรงต่างๆ โดยผู้ใช้สามารถเลือกวาดรูปทรงได้หลายรูปพร้อมกัน\nimport tkinter as tk  # นำเข้าโมดูล tkinter เพื่อสร้าง GUI\nfrom tkinter import messagebox  # นำเข้า messagebox เพื่อแสดงกล่องข้อความเตือน\n\n# ฟังก์ชันสำหรับแสดงหรือซ่อนเมนูตัวเลือกขนาดของรูปทรงตามที่ผู้ใช้เลือก\ndef toggle_option_menu(shape):\n    # สร้าง dictionary เก็บอ้างอิงเมนูตัวเลือกขนาดสำหรับแต่ละรูปทรง\n    option_menus = {\n        \"Rectangle\": rect_size_menu,\n        \"Triangle\": tri_size_menu,\n        \"Circle\": circ_size_menu\n    }\n    # ตรวจสอบว่าเลือก \"Rectangle\" และตัวแปร rect_var มีค่า True\n    if shape == \"Rectangle\" and rect_var.get():\n        option_menus[shape].grid(row=1, column=1, padx=5, pady=5)  # แสดงเมนูขนาดของสี่เหลี่ยม\n    # ตรวจสอบว่าเลือก \"Triangle\" และตัวแปร tri_var มีค่า True\n    elif shape == \"Triangle\" and tri_var.get():\n        option_menus[shape].grid(row=2, column=1, padx=5, pady=5)  # แสดงเมนูขนาดของสามเหลี่ยม\n    # ตรวจสอบว่าเลือก \"Circle\" และตัวแปร circ_var มีค่า True\n    elif shape == \"Circle\" and circ_var.get():\n        option_menus[shape].grid(row=3, column=1, padx=5, pady=5)  # แสดงเมนูขนาดของวงกลม\n    else:\n        option_menus[shape].grid_remove()  # ซ่อนเมนูขนาดหากไม่เลือกหรือเปลี่ยนการเลือก\n\n# ฟังก์ชันสำหรับวาดรูปทรงต่างๆ ลงในหน้าต่างใหม่\ndef draw_shapes():\n    # สร้างรายการของข้อมูลรูปทรงที่จะวาดโดยเช็คว่ารูปทรงถูกเลือกหรือไม่\n    shapes = [\n        (\"Rectangle\", rect_size.get(), \"red\") if rect_var.get() else None,  # เพิ่มข้อมูลสี่เหลี่ยมถ้าเลือก\n        (\"Triangle\", tri_size.get(), \"green\") if tri_var.get() else None,  # เพิ่มข้อมูลสามเหลี่ยมถ้าเลือก\n        (\"Circle\", circ_size.get(), \"blue\") if circ_var.get() else None  # เพิ่มข้อมูลวงกลมถ้าเลือก\n    ]\n    shapes = [shape for shape in shapes if shape]  # ลบค่า None ออกจากรายการ (ถ้าไม่มีการเลือก)\n\n    # ตรวจสอบว่ารายการ shapes ว่างเปล่าหรือไม่ (กรณีที่ไม่ได้เลือกอะไร)\n    if not shapes:\n        messagebox.showwarning(\"Warning\", \"กรุณาเลือกรูปทรงที่ต้องการวาดก่อน!\")  # แสดงข้อความเตือน\n        return  # ออกจากฟังก์ชัน\n\n    # สร้างหน้าต่างใหม่เพื่อแสดงผลลัพธ์การวาดรูปทรง\n    result_win = tk.Toplevel(root)\n    result_win.title(\"RESULT\")  # ตั้งชื่อหน้าต่างผลลัพธ์\n\n    canvas_width = canvas_height = 20  # กำหนดค่าเริ่มต้นของความกว้างและความสูงของ canvas\n    shape_positions = []  # สร้างรายการสำหรับเก็บข้อมูลตำแหน่งและขนาดของรูปทรง\n\n    # วน loop ผ่านข้อมูลใน shapes เพื่อกำหนดขนาดและตำแหน่งของแต่ละรูปทรง\n    for shape, size, color in shapes:\n        if shape == \"Rectangle\":\n            w, h = map(int, size.split(\"x\"))  # แปลงขนาดเป็นจำนวนเต็มสำหรับสี่เหลี่ยม\n        elif shape == \"Triangle\":\n            w, h = map(int, size.split(\"x\"))  # แปลงขนาดเป็นจำนวนเต็มสำหรับสามเหลี่ยม\n        elif shape == \"Circle\":\n            r = int(size.split(\"=\")[1])  # ดึงรัศมีจาก string ที่แสดงขนาดของวงกลม\n            w = h = 2 * r  # คำนวณเส้นผ่านศูนย์กลาง\n        # เพิ่มข้อมูลตำแหน่งของรูปทรงในรายการ shape_positions\n        shape_positions.append((canvas_width, 20, w, h, color, shape))\n        canvas_width += (w + 20)  # เพิ่มค่าความกว้างของ canvas เพื่อให้เว้นระยะห่าง\n        canvas_height = max(canvas_height, h + 40)  # ปรับค่าความสูงตามขนาดของรูปทรงที่ใหญ่ที่สุด\n\n    # จำกัดขนาดความกว้างและความสูงของ canvas ไม่ให้เกินขนาดที่กำหนด\n    canvas_width = min(canvas_width, 600)\n    canvas_height = min(canvas_height, 400)\n\n    # สร้าง canvas เพื่อแสดงรูปทรงที่ถูกเลือก\n    canvas = tk.Canvas(result_win, width=canvas_width, height=canvas_height, bg=\"white\")\n    canvas.pack(padx=20, pady=20)  # จัดวาง canvas พร้อมระยะห่าง\n\n    # วน loop ผ่านข้อมูลใน shape_positions เพื่อวาดรูปทรงลงใน canvas\n    for x, y, w, h, color, shape_type in shape_positions:\n        if shape_type == \"Rectangle\":\n            canvas.create_rectangle(x, y, x + w, y + h, outline=\"black\", fill=color)  # วาดสี่เหลี่ยม\n        elif shape_type == \"Triangle\":\n            canvas.create_polygon(x, y, x + w, y, x + w, y + h, outline=\"black\", fill=color)  # วาดสามเหลี่ยม\n        elif shape_type == \"Circle\":\n            canvas.create_oval(x, y, x + w, y + h, outline=\"black\", fill=color)  # วาดวงกลม\n\n    # สร้างปุ่มปิดหน้าต่างผลลัพธ์\n    tk.Button(result_win, text=\"Close Window\", command=result_win.destroy).pack(pady=10)\n\n# สร้างหน้าต่างหลัก\nroot = tk.Tk()\nroot.title(\"Canvas Drawing\")  # ตั้งชื่อหน้าต่างหลัก\nroot.geometry(\"270x220\")  # กำหนดขนาดหน้าต่างหลัก\nroot.config(padx=5, pady=5)  # กำหนดระยะห่างภายในหน้าต่างหลัก\n\n# กำหนดตัวแปร BooleanVar เพื่อใช้กับ checkbox แต่ละตัวสำหรับการเลือกชนิดของรูปทรง\nrect_var, tri_var, circ_var = tk.BooleanVar(), tk.BooleanVar(), tk.BooleanVar()\n\n# กำหนดตัวแปร StringVar เพื่อเก็บขนาดของรูปทรงที่เลือก\nrect_size, tri_size, circ_size = tk.StringVar(value=\"50x50\"), tk.StringVar(value=\"50x50\"), tk.StringVar(value=\"Radius=25\")\n\n# สร้างเฟรมสำหรับการตั้งค่า (Drawing Setting)\nsettings_frame = tk.LabelFrame(root, text=\"Drawing Setting\", padx=5, pady=5)\nsettings_frame.pack(padx=10, pady=10)  # จัดวางเฟรมพร้อมระยะห่างภายนอก\n\n# สร้าง checkbox สำหรับเลือกวาดสี่เหลี่ยม พร้อมเชื่อมกับฟังก์ชัน toggle_option_menu\nrect_checkbox = tk.Checkbutton(settings_frame, text=\"Rectangle\", variable=rect_var, command=lambda: toggle_option_menu(\"Rectangle\"))\nrect_checkbox.grid(row=1, column=0, sticky=\"w\", padx=5, pady=5)  # จัดวาง checkbox\n# สร้างเมนูเลือกขนาดสำหรับสี่เหลี่ยมและซ่อนเมนูเริ่มต้น\nrect_size_menu = tk.OptionMenu(settings_frame, rect_size, \"50x50\", \"100x50\", \"50x100\")\nrect_size_menu.grid(row=1, column=1, padx=5, pady=5)\nrect_size_menu.grid_remove()\n\n# สร้าง checkbox สำหรับเลือกวาดสามเหลี่ยม พร้อมเชื่อมกับฟังก์ชัน toggle_option_menu\ntri_checkbox = tk.Checkbutton(settings_frame, text=\"Right Triangle\", variable=tri_var, command=lambda: toggle_option_menu(\"Triangle\"))\ntri_checkbox.grid(row=2, column=0, sticky=\"w\", padx=5, pady=5)\n# สร้างเมนูเลือกขนาดสำหรับสามเหลี่ยมและซ่อนเมนูเริ่มต้น\ntri_size_menu = tk.OptionMenu(settings_frame, tri_size, \"50x50\", \"100x50\", \"50x100\")\ntri_size_menu.grid(row=2, column=1, padx=5, pady=5)\ntri_size_menu.grid_remove()\n\n# สร้าง checkbox สำหรับเลือกวาดวงกลม พร้อมเชื่อมกับฟังก์ชัน toggle_option_menu\ncirc_checkbox = tk.Checkbutton(settings_frame, text=\"Circle\", variable=circ_var, command=lambda: toggle_option_menu(\"Circle\"))  # สร้าง checkbox สำหรับการเลือกวาดวงกลมและเรียกใช้ฟังก์ชัน toggle_option_menu เมื่อเลือกหรือลบการเลือก\ncirc_checkbox.grid(row=3, column=0, sticky=\"w\", padx=5, pady=5)  # วาง checkbox ในตำแหน่งแถวที่ 3 คอลัมน์ที่ 0 พร้อมระยะห่างทางแนวนอนและแนวตั้ง\n# สร้างเมนูเลือกขนาดสำหรับวงกลมและซ่อนเมนูเริ่มต้น\ncirc_size_menu = tk.OptionMenu(settings_frame, circ_size, \"Radius=25\", \"Radius=50\", \"Radius=75\")  # สร้างเมนูตัวเลือกขนาดของวงกลมพร้อมค่าตัวเลือกที่กำหนด\ncirc_size_menu.grid(row=3, column=1, padx=5, pady=5)  # วางเมนูตัวเลือกขนาดของวงกลมในตำแหน่งแถวที่ 3 คอลัมน์ที่ 1 พร้อมระยะห่าง\ncirc_size_menu.grid_remove()  # ซ่อนเมนูตัวเลือกขนาดของวงกลมจนกว่าจะถูกเลือกใน checkbox\n\n# สร้างปุ่ม \"Draw\" เพื่อเรียกใช้ฟังก์ชัน draw_shapes เมื่อกดปุ่ม\ndraw_btn = tk.Button(root, text=\"Draw\", command=draw_shapes)\ndraw_btn.pack(pady=5, padx=10)  # จัดวางปุ่ม \"Draw\" ด้วยระยะห่างแนวนอนและแนวตั้ง\n\n# เริ่มต้น loop หลักของหน้าต่างเพื่อรับฟัง event และแสดงผล\nroot.mainloop()  # เริ่มการทำงานของหน้าต่างหลักเพื่อให้ GUI ทำงานและรอรับคำสั่งจากผู้ใช้\n\n"
    },
    {
        "filename": "การจัดเรียงข้อมูลตามอายุ.py",
        "description": "# โปรแกรมจัดเรียงข้อมูลจากมากไปน้อย",
        "content_snippet": "# โปรแกรมจัดเรียงข้อมูลจากมากไปน้อย\nid = {'Peter' : {'Age': 40 , 'Gender': 'Male', 'Test': {'First': 20, 'Second': 18, 'Third': 19}},\n      'Paul' : {'Age': 25, 'Gender': 'Male', 'Test': {'First' : 19, 'Second': 20, 'Third': 19}},\n      'Mary' : {'Age': 18, 'Gender': 'Female', 'Test': {'First': 10, 'Second': 5, 'Third': 4}},\n      'Jenny' : {'Age': 60, 'Gender': 'Female', 'Test': {'First': 5, 'Second': 3, 'Third': 1}}}\n\n# จัดเรียงข้อมูลตามอายุจากมากไปน้อย\nsorted_by_age = sorted(id.items(), key=lambda item: item[1]['Age'], reverse=True)\n\n# แสดงข้อมูลที่จัดเรียงแล้ว\nprint(\"Data sorted by age:\")\nfor name, data in sorted_by_age:\n    print(f\"{name}: {data['Age']} years old\")\n"
    },
    {
        "filename": "เครื่องคิดเงินลุงสมหมายV2.py",
        "description": "# โปรแกรมรับค่าราคาสินค้าและนำมาบวกกัน แล้วแสดงผลรวมของราคาสินค้าทั้งหมด",
        "content_snippet": "# โปรแกรมรับค่าราคาสินค้าและนำมาบวกกัน แล้วแสดงผลรวมของราคาสินค้าทั้งหมด\namount = int(input())\npiece = 0\n\nfor i in range(amount):\n  price = int(input())\n  piece += price\n\nprint(f\"{piece} THB\")\n"
    },
    {
        "filename": "(XI)Factorialและการหารโมดูลัส.py",
        "description": "# โปรแกรมคำนวณ Factorial และหารโมดูลัสค่าคงที่",
        "content_snippet": "# โปรแกรมคำนวณ Factorial และหารโมดูลัสค่าคงที่\n# Factorial ที่หารโมดูลัสค่าคงที่\nprint('Generating Factorial series with modulus operation')\nn = int(input(\"Enter 'n' for Factorial series: \"))\nmod_val = int(input(\"Enter modulus value: \"))\nresult = 1\nmod_list = []\n\n# คำนวณ Factorial และหาร mod\nfor i in range(1, n+1):\n    result *= i\n    mod_list.append(result % mod_val)  # เก็บค่า mod\n\n# แสดงผล\nprint(f\"Factorial series modulus {mod_val}: {mod_list}\\n\")\n"
    },
    {
        "filename": "(IX)เพิ่มการวาดสี่เหลี่ยมเอียง.py",
        "description": "# โค้ดสร้างสี่เหลี่ยมเอียง",
        "content_snippet": "# โค้ดสร้างสี่เหลี่ยมเอียง\nprint('---------- Drawing tilted squares ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the size (at least 3): \"))\n\n    if size == 0:\n        break\n    elif size >= 3:\n        for i in range(size):\n            if i == 0 or i == size - 1:  # ด้านบนและด้านล่าง\n                print(\" \" * (size - i - 1) + \"#\" * size)\n            else:  # ด้านข้าง\n                print(\" \" * (size - i - 1) + \"#\" + \" \" * (size - 2) + \"#\")\n    else:\n        print(\"Invalid input. Please enter a size >= 3.\")\n"
    },
    {
        "filename": "ต่ำกว่า18ห้ามเข้า.py",
        "description": "# โปรแกรมร้านเหล้า NongGipsy Pub มีเงื่อนไขการเข้าร้านดังนี้",
        "content_snippet": "# โปรแกรมร้านเหล้า NongGipsy Pub มีเงื่อนไขการเข้าร้านดังนี้\nname = str(input())\nbirth = int(input())\n\nif name == 'Sommai MeeMakMai':\n  print(f\"Welcome {name} to NongGipsy Pub\")\nelif name == 'A A':\n  print(f\"Welcome {name} to NongGipsy Pub\")\nelif birth > 2003:\n  print(\"You shall not pass!\")\nelif birth <= 2003:\n  print(f\"Welcome {name} to NongGipsy Pub\")\n"
    },
    {
        "filename": "(XIV)แปลงPascalTriangleเป็นเลขฐาน2.py",
        "description": "# โปรแกรมสร้าง Pascal Triangle แบบเลขฐาน 2",
        "content_snippet": "# โปรแกรมสร้าง Pascal Triangle แบบเลขฐาน 2\ndef pascal_triangle_binary(n): # ฟังก์ชันสร้าง Pascal Triangle แบบเลขฐาน 2\n    triangle = [] # เริ่มต้นด้วยลิสต์ว่าง\n    for i in range(n + 1): # วนลูปเพื่อสร้างแถว\n        row = [1] # สร้างแถวใหม่\n        if i > 0: # สร้างตัวเลขใหม่ในแถวที่มากกว่า 0\n            for j in range(1, i): # วนลูปเพื่อสร้างตัวเลขใหม่\n                row.append(triangle[i - 1][j - 1] + triangle[i - 1][j]) # สร้างตัวเลขใหม่จากผลรวม\n            row.append(1) # เพิ่มตัวเลขสุดท้าย\n        # แปลงค่าทั้งหมดในแถวเป็นเลขฐาน 2\n        row = [bin(x)[2:] for x in row] # แปลงค่าทั้งหมดในแถวเป็นเลขฐาน 2\n        triangle.append(row) # เพิ่มแถวใหม่เข้าไปในรายการ\n    return triangle\n\n# รับค่าระดับ\nn = int(input(\"Enter the number of rows for Pascal Triangle (binary format): \"))\nresult = pascal_triangle_binary(n)\n\n# แสดงผล\nfor row in result: # วนลูปเพื่อแสดงผล\n    print(\" \".join(row)) # แสดงผลลัพธ์\n"
    },
    {
        "filename": "module_exam.py",
        "description": "# โปรแกรมที่ใช้ในการคำนวณเกรดของนักเรียน",
        "content_snippet": "# โปรแกรมที่ใช้ในการคำนวณเกรดของนักเรียน\nInfo_Dict = {'66001': {'Mathematics': 18, 'Physics': 44, 'English': 16, 'Chemistry': 30, 'Computer': 83},\n             '66002': {'Mathematics': 58, 'Physics': 47, 'English': 79, 'Chemistry': 90, 'Computer': 95},\n             '66003': {'Mathematics': 58, 'Physics': 80, 'English': 70, 'Chemistry': 91, 'Computer': 93},\n             '66004': {'Mathematics': 98, 'Physics': 52, 'English': 96, 'Chemistry': 55, 'Computer': 72},\n             '66005': {'Mathematics': 22, 'Physics': 26, 'English': 6, 'Chemistry': 98, 'Computer': 45},\n             '66006': {'Mathematics': 90, 'Physics': 51, 'English': 77, 'Chemistry': 65, 'Computer': 42},\n             '66007': {'Mathematics': 50, 'Physics': 59, 'English': 31, 'Chemistry': 63, 'Computer': 58},\n             '66008': {'Mathematics': 93, 'Physics': 71, 'English': 91, 'Chemistry': 74, 'Computer': 1},\n             '66009': {'Mathematics': 44, 'Physics': 35, 'English': 79, 'Chemistry': 32, 'Computer': 88},\n             '66010': {'Mathematics': 55, 'Physics': 48, 'English': 99, 'Chemistry': 18, 'Computer': 14},\n             '66011': {'Mathematics': 64, 'Physics': 20, 'English': 64, 'Chemistry': 7, 'Computer': 60},\n             '66012': {'Mathematics': 14, 'Physics': 83, 'English': 91, 'Chemistry': 86, 'Computer': 24},\n             '66013': {'Mathematics': 68, 'Physics': 81, 'English': 37, 'Chemistry': 74, 'Computer': 67},\n             '66014': {'Mathematics': 15, 'Physics': 15, 'English': 88, 'Chemistry': 41, 'Computer': 15},\n             '66015': {'Mathematics': 10, 'Physics': 23, 'English': 75, 'Chemistry': 21, 'Computer': 92},\n             '66016': {'Mathematics': 94, 'Physics': 0, 'English': 43, 'Chemistry': 6, 'Computer': 76},\n             '66017': {'Mathematics': 58, 'Physics': 77, 'English': 67, 'Chemistry': 96, 'Computer': 26},\n             '66018': {'Mathematics': 33, 'Physics': 50, 'English': 87, 'Chemistry': 35, 'Computer': 5},\n             '66019': {'Mathematics': 6, 'Physics': 18, 'English': 43, 'Chemistry': 90, 'Computer': 49},\n             '66020': {'Mathematics': 84, 'Physics': 99, 'English': 69, 'Chemistry': 89, 'Computer': 92},\n             '66021': {'Mathematics': 82, 'Physics': 72, 'English': 46, 'Chemistry': 15, 'Computer': 13},\n             '66022': {'Mathematics': 26, 'Physics': 20, 'English': 61, 'Chemistry': 91, 'Computer': 51},\n             '66023': {'Mathematics': 42, 'Physics': 24, 'English': 51, 'Chemistry': 6, 'Computer': 86},\n             '66024': {'Mathematics': 29, 'Physics': 21, 'English': 97, 'Chemistry': 100, 'Computer': 91},\n             '66025': {'Mathematics': 39, 'Physics': 3, 'English': 7, 'Chemistry': 76, 'Computer': 19},\n             '66026': {'Mathematics': 98, 'Physics': 85, 'English': 12, 'Chemistry': 28, 'Computer': 79},\n             '66027': {'Mathematics': 26, 'Physics': 30, 'English': 38, 'Chemistry': 39, 'Computer': 84},\n             '66028': {'Mathematics': 22, 'Physics': 57, 'English': 83, 'Chemistry': 67, 'Computer': 82},\n             '66029': {'Mathematics': 18, 'Physics': 81, 'English': 55, 'Chemistry': 79, 'Computer': 61},\n             '66030': {'Mathematics': 24, 'Physics': 49, 'English': 32, 'Chemistry': 27, 'Computer': 69}\n}\n\ndef grading(subject,score):\n    SUBJECTs = ['Mathematics','Physics','English','Chemistry','Computer']\n    if subject not in SUBJECTs:\n        print('!!!Subject is error!!!')\n        exit()\n    Info_Dict = {'Mathematics': {'A':85,'B+':80,'B':75,'C+':65,'C':50,'D+':45,'D':40},\n                 'Physics': {'A':85,'B+':78,'B':72,'C+':64,'C':52,'D+':48,'D':35},\n                 'English': {'A':80,'B+':75,'B':70,'C+':65,'C':60,'D+':55,'D':50},\n                 'Chemistry': {'A':82,'B+':79,'B':72,'C+':63,'C':57,'D+':52,'D':45},\n                 'Computer': {'A':90,'B+':85,'B':80,'C+':70,'C':60,'D+':50,'D':40}\n    }\n    if score > Info_Dict[subject]['A']: return('A')\n    elif score > Info_Dict[subject]['B+']: return('B+')\n    elif score > Info_Dict[subject]['B']: return('B')\n    elif score > Info_Dict[subject]['C+']: return('C+')\n    elif score > Info_Dict[subject]['C']: return('C')\n    elif score > Info_Dict[subject]['D+']: return('D+')\n    elif score > Info_Dict[subject]['D']: return('D')\n    else: return('F')\n"
    },
    {
        "filename": "วิเคราะห์ลักษณะเฉพาะของข้อความ.py",
        "description": "# โปรแกรมตรวจสอบคำที่เป็น palindrome จากข้อความที่กำหนดให้",
        "content_snippet": "# โปรแกรมตรวจสอบคำที่เป็น palindrome จากข้อความที่กำหนดให้\n# ตรวจสอบคำที่อ่านจากหน้าไปหลังหรือหลังไปหน้าได้เหมือนกัน (Palindrome)\n# รวมข้อความทั้งหมดและแยกเป็นคำ\ns1 = \"madam and her racecar were at the radar station.\"\ns2 = \"They found a civic parked next to a kayak.\"\ns3 = \"Wow, what a day!\"\n\nwords = (s1 + \" \" + s2 + \" \" + s3).split()\n\n# ตรวจสอบคำที่เป็น palindrome\npalindromes = [word for word in words if word.lower() == word[::-1].lower()]\nprint(f\"Palindromes found: {palindromes if palindromes else 'None'}\")\n"
    },
    {
        "filename": "(XII)สร้างRomanNumeralConverterGUIด้วยTkinter.py",
        "description": "# โปรแกรมแปลงตัวเลขเป็น Roman Numeral และแปลง Roman Numeral เป็นตัวเลข ด้วย Tkinter",
        "content_snippet": "# โปรแกรมแปลงตัวเลขเป็น Roman Numeral และแปลง Roman Numeral เป็นตัวเลข ด้วย Tkinter\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\nimport tkinter as tk\nfrom tkinter import messagebox\n\ndef convert_to_roman():\n    \"\"\"แปลงตัวเลขเป็น Roman Numeral\"\"\"\n    try:\n        number = int(entry_number.get())\n        if number <= 0 or number > 1000000:\n            messagebox.showerror(\"Error\", \"Number out of range (1 - 1,000,000)\")\n        else:\n            roman = int_to_roman(number)\n            result_label.config(text=f\"Roman Numeral: {roman}\")\n    except ValueError:\n        messagebox.showerror(\"Error\", \"Please enter a valid number\")\n\ndef convert_to_number():\n    \"\"\"แปลง Roman Numeral เป็นตัวเลข\"\"\"\n    roman = entry_roman.get().upper()\n    result = roman_to_int(roman)\n    if isinstance(result, int):\n        result_label.config(text=f\"Number: {result}\")\n    else:\n        messagebox.showerror(\"Error\", result)\n\n# สร้างหน้าต่าง GUI\nroot = tk.Tk()\nroot.title(\"Roman Numeral Converter\")\n\n# ส่วนของการแปลง\nframe = tk.Frame(root)\nframe.pack(pady=20)\n\n# Input สำหรับแปลงตัวเลขเป็น Roman\ntk.Label(frame, text=\"Number (1 - 1,000,000):\").grid(row=0, column=0, pady=5, padx=5)\nentry_number = tk.Entry(frame)\nentry_number.grid(row=0, column=1, pady=5, padx=5)\ntk.Button(frame, text=\"Convert to Roman\", command=convert_to_roman).grid(row=0, column=2, pady=5, padx=5)\n\n# Input สำหรับแปลง Roman เป็นตัวเลข\ntk.Label(frame, text=\"Roman Numeral:\").grid(row=1, column=0, pady=5, padx=5)\nentry_roman = tk.Entry(frame)\nentry_roman.grid(row=1, column=1, pady=5, padx=5)\ntk.Button(frame, text=\"Convert to Number\", command=convert_to_number).grid(row=1, column=2, pady=5, padx=5)\n\n# แสดงผลลัพธ์\nresult_label = tk.Label(root, text=\"\", font=(\"Helvetica\", 14))\nresult_label.pack(pady=20)\n\n# เริ่ม GUI\nroot.mainloop()\n"
    },
    {
        "filename": "(XV) เพิ่มการเข้ารหัสแบบวนซ้ำหลายรอบ.py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความแบบวนซ้ำ",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความแบบวนซ้ำ\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        else:\n            raise ValueError(\"Error!!!! Input non-characters.\")\n    return result\n\ndef repeat_encrypt(text, key, rounds): # ฟังก์ชันเข้ารหัสข้อความแบบวนซ้ำ\n    for _ in range(rounds): # วนซ้ำการเข้ารหัสตามจำนวนรอบที่กำหนด\n        text = secret_password(text, key) # เข้ารหัสข้อความ\n    return text\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n    rounds = int(input(\"Enter number of encryption rounds: \"))\n\n    # เข้ารหัสข้อความแบบวนซ้ำ\n    ciphertext = repeat_encrypt(plaintext, key, rounds)\n    print(f\"The encrypted ciphertext after {rounds} rounds:\", ciphertext)\n\n    # ถอดรหัสแบบวนซ้ำกลับ\n    decrypted_text = repeat_encrypt(ciphertext, -key, rounds)\n    print(f'The decryption result after {rounds} rounds: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(8)เพิ่มการคำนวณ Eigenvalues (กรณี Matrix ขนาด 2x2).py",
        "description": "# โปรแกรมคำนวณ Eigenvalues ของ Matrix ขนาด 2x2",
        "content_snippet": "# โปรแกรมคำนวณ Eigenvalues ของ Matrix ขนาด 2x2\nimport random\nimport math\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows != 2 or columns != 2:\n    print(\"!!! Error: Eigenvalue calculation only supports 2x2 matrices !!!\\n\")\nelse:\n    matrix = [[random.randint(0, 9) for _ in range(columns)] for _ in range(rows)]\n    print(f\"Matrix: {matrix}\")\n\n    a, b = matrix[0][0], matrix[0][1]\n    c, d = matrix[1][0], matrix[1][1]\n\n    trace = a + d\n    determinant = a * d - b * c\n\n    eigenvalue1 = (trace + math.sqrt(trace**2 - 4 * determinant)) / 2\n    eigenvalue2 = (trace - math.sqrt(trace**2 - 4 * determinant)) / 2\n\n    print(f\"Eigenvalues: {eigenvalue1:.2f}, {eigenvalue2:.2f}\")\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "(IX)เพิ่มลวดลายแปลงกลับหัว.py",
        "description": "# โค้ดสร้างปิรามิดกลับหัว",
        "content_snippet": "# โค้ดสร้างปิรามิดกลับหัว\nprint('---------- Drawing inverted pyramids ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the height of the inverted pyramid (at least 2): \"))\n\n    if size == 0:\n        break\n    elif size >= 2:\n        for i in range(size):\n            print(\" \" * i + \"#\" * (2 * (size - i) - 1))\n    else:\n        print(\"Invalid input. Please enter a size >= 2.\")\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมมุมฉากกลับหัว (Reversed Right Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of reversed right triangle: \"))\n\n    if height == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n\n    # วาดสามเหลี่ยมมุมฉากกลับหัว\n    for i in range(height, 0, -1):\n        stars = '*' * i  # จำนวน * ลดลงทีละ 1 ในแต่ละแถว\n        print(stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "คำนวณพื้นที่.py",
        "description": "# โปรแกรมสำหรับคำนวณพื้นที่สี่เหลี่ยม, สามเหลี่ยม, และทฤษฎีพีทาโกรัส",
        "content_snippet": "# โปรแกรมสำหรับคำนวณพื้นที่สี่เหลี่ยม, สามเหลี่ยม, และทฤษฎีพีทาโกรัส\nimport tkinter as tk  # นำเข้า tkinter สำหรับสร้าง GUI\nfrom tkinter import ttk  # นำเข้า ttk สำหรับ widget สไตล์พิเศษ (ใช้ในบางกรณี)\nfrom math import sqrt  # นำเข้า sqrt สำหรับคำนวณรากที่สอง\n\nclass CPE2222App:\n    # ฟังก์ชันช่วยในการแสดงผลโดยตรวจสอบทศนิยมหรือจำนวนเต็ม\n    def format_number(self, value):\n        # หากค่าเป็นจำนวนเต็มให้แสดงเป็นจำนวนเต็ม หากไม่ใช่ให้แสดงเป็นทศนิยม\n        return int(value) if value.is_integer() else value\n\n    def __init__(self, root):\n        self.root = root  # เก็บอ้างอิงของหน้าต่างหลัก\n        self.root.title(\"CPE2222\")  # ตั้งชื่อหน้าต่างโปรแกรม\n        \n        # ตัวเลือกการคำนวณ (จะมี 3 ตัวเลือก: สี่เหลี่ยม, สามเหลี่ยม, พีทาโกรัส)\n        self.choice = tk.StringVar(value=\"Pythagorean\")  # ค่าเริ่มต้นเป็น Pythagorean\n        \n        # หัวข้อฝั่งซ้าย สำหรับเลือกประเภทการคำนวณ\n        frame_area = tk.LabelFrame(root, text=\"Calculation\")  # LabelFrame สำหรับหมวดหมู่การคำนวณ\n        frame_area.grid(row=0, column=0, padx=10, pady=10)  # วาง frame ที่แถว 0 คอลัมน์ 0\n\n        # Radio Buttons สำหรับเลือกประเภทการคำนวณ\n        tk.Radiobutton(frame_area, text=\"Area of Rectangle\", variable=self.choice, value=\"Rectangle\", command=self.update_labels).pack(anchor='w')\n        tk.Radiobutton(frame_area, text=\"Area of Triangle\", variable=self.choice, value=\"Triangle\", command=self.update_labels).pack(anchor='w')\n        tk.Radiobutton(frame_area, text=\"Pythagorean\", variable=self.choice, value=\"Pythagorean\", command=self.update_labels).pack(anchor='w')\n\n        # ส่วนของ Parameter Setting สำหรับกรอกขนาดที่ต้องการคำนวณ\n        frame_param = tk.LabelFrame(root, text=\"Parameter Setting\")  # LabelFrame สำหรับตั้งค่าพารามิเตอร์\n        frame_param.grid(row=0, column=1, rowspan=2, padx=10, pady=10)  # วาง frame ที่แถว 0 คอลัมน์ 1\n\n        # Labels สำหรับขนาด\n        self.label1 = tk.Label(frame_param, text=\"The 1st size:\")  # Label สำหรับขนาดที่ 1\n        self.label1.grid(row=0, column=0, padx=5, sticky='e')  # วาง label ที่แถว 0 คอลัมน์ 0\n        self.label2 = tk.Label(frame_param, text=\"The 2nd size:\")  # Label สำหรับขนาดที่ 2\n        self.label2.grid(row=1, column=0, padx=5, sticky='e')  # วาง label ที่แถว 1 คอลัมน์ 0\n        \n        # Spinbox สำหรับขนาด (ตัวเลือกให้กรอกขนาดที่ต้องการ)\n        self.size1_entry = tk.Spinbox(frame_param, from_=0, to=200, width=10)  # Spinbox สำหรับขนาด 1\n        self.size1_entry.grid(row=0, column=1, padx=5)\n        self.size1_entry.delete(0, \"end\")  # ลบค่าภายใน Spinbox\n        self.size1_entry.insert(0, \"1\")  # ใส่ค่าเริ่มต้นเป็น 1\n\n        self.size2_entry = tk.Spinbox(frame_param, from_=0, to=200, width=10)  # Spinbox สำหรับขนาด 2\n        self.size2_entry.grid(row=1, column=1, padx=5)\n        self.size2_entry.delete(0, \"end\")  # ลบค่าภายใน Spinbox\n        self.size2_entry.insert(0, \"1\")  # ใส่ค่าเริ่มต้นเป็น 1\n\n        # ปุ่มคำนวณเมื่อคลิก\n        self.calc_button = tk.Button(frame_param, text=\"Area\", command=self.calculate)  # ปุ่ม \"Area\" หรือ \"Pythagorean Theory\"\n        self.calc_button.grid(row=2, column=0, columnspan=2, pady=5)  # วางปุ่มในแถวที่ 2\n\n        # Label สำหรับแสดงผลลัพธ์\n        self.result_label = tk.Label(root, text=\"\")  # Label สำหรับแสดงผลลัพธ์การคำนวณ\n        self.result_label.grid(row=2, column=0, columnspan=2, pady=10)  # วางผลลัพธ์ที่แถว 2 คอลัมน์ 0-1\n\n        # เรียก update_labels เพื่ออัพเดตข้อความเริ่มต้น\n        self.update_labels()\n\n    def update_labels(self):\n        # อัพเดตข้อความ label ตามตัวเลือกการคำนวณที่เลือก\n        if self.choice.get() == \"Rectangle\":\n            self.label1.config(text=\"Length:\")  # เปลี่ยนข้อความของ label1 เป็น \"Length\"\n            self.label2.config(text=\"Width:\")  # เปลี่ยนข้อความของ label2 เป็น \"Width\"\n            self.calc_button.config(text=\"Area\")  # เปลี่ยนข้อความปุ่มเป็น \"Area\" สำหรับการคำนวณพื้นที่สี่เหลี่ยม\n        elif self.choice.get() == \"Triangle\":\n            self.label1.config(text=\"Base:\")  # เปลี่ยนข้อความของ label1 เป็น \"Base\"\n            self.label2.config(text=\"Height:\")  # เปลี่ยนข้อความของ label2 เป็น \"Height\"\n            self.calc_button.config(text=\"Area\")  # เปลี่ยนข้อความปุ่มเป็น \"Area\" สำหรับการคำนวณพื้นที่สามเหลี่ยม\n        elif self.choice.get() == \"Pythagorean\":\n            self.label1.config(text=\"The 1st size:\")  # เปลี่ยนข้อความของ label1\n            self.label2.config(text=\"The 2nd size:\")  # เปลี่ยนข้อความของ label2\n            self.calc_button.config(text=\"Pythagorean Theory\")  # เปลี่ยนข้อความปุ่มเป็น \"Pythagorean Theory\"\n\n    def calculate(self):\n        # รับค่าขนาดจาก Spinbox\n        try:\n            size1 = float(self.size1_entry.get())  # รับค่าจาก Spinbox และแปลงเป็น float\n            size2 = float(self.size2_entry.get())  # รับค่าจาก Spinbox และแปลงเป็น float\n        except ValueError:  # หากค่าไม่สามารถแปลงเป็น float ได้\n            self.result_label.config(text=\"ERROR!!!!!!!!!!!!!!.\")  # แสดงข้อความข้อผิดพลาด\n            return\n\n        # คำนวณตามตัวเลือกที่เลือก\n        if self.choice.get() == \"Rectangle\":\n            result = size1 * size2  # คำนวณพื้นที่สี่เหลี่ยมผืนผ้า\n            self.result_label.config(text=f\"The area of rectangle with length {self.format_number(size1)} and width {self.format_number(size2)} is {self.format_number(result):.1f}\")\n        elif self.choice.get() == \"Triangle\":\n            result = 0.5 * size1 * size2  # คำนวณพื้นที่สามเหลี่ยม\n            self.result_label.config(text=f\"The area of triangle with base {self.format_number(size1)} and height {self.format_number(size2)} is {self.format_number(result):.1f}\")\n        elif self.choice.get() == \"Pythagorean\":\n            result = sqrt(size1**2 + size2**2)  # คำนวณใช้ทฤษฎีพีทาโกรัส\n            self.result_label.config(text=f\"The longest side of right triangle with ({self.format_number(size1)},{self.format_number(size2)}) is {self.format_number(result):.1f}\")\n\n# ส่วนของการเริ่มต้นโปรแกรม\nif __name__ == \"__main__\":  # เมื่อโปรแกรมทำงานเป็นหลัก\n    root = tk.Tk()  # สร้างหน้าต่างหลัก\n    app = CPE2222App(root)  # สร้างแอปพลิเคชัน CPE2222App\n    root.mainloop()  # เริ่มการทำงานของ loop GUI\n"
    },
    {
        "filename": "เพิ่มของลดของ_lv4(III).py",
        "description": "# โปรแกรมจัดการระบบโรงเรียน",
        "content_snippet": "# โปรแกรมจัดการระบบโรงเรียน\nimport sqlite3\n\n# ========================= Database Setup ========================= #\ndef setup_database():\n    #ตั้งค่าฐานข้อมูล SQLite\n    conn = sqlite3.connect('school.db')\n    cursor = conn.cursor()\n\n    # ตารางนักเรียน\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS students (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            age INTEGER NOT NULL,\n            grade_level TEXT NOT NULL\n        )\n    ''')\n\n    # ตารางครู\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS teachers (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            subject TEXT NOT NULL\n        )\n    ''')\n\n    # ตารางวิชา\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS subjects (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            teacher_id INTEGER NOT NULL,\n            max_seats INTEGER NOT NULL,\n            FOREIGN KEY (teacher_id) REFERENCES teachers(id)\n        )\n    ''')\n\n    # ตารางลงทะเบียนเรียน\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS enrollments (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            student_id INTEGER NOT NULL,\n            subject_id INTEGER NOT NULL,\n            grade REAL,\n            FOREIGN KEY (student_id) REFERENCES students(id),\n            FOREIGN KEY (subject_id) REFERENCES subjects(id)\n        )\n    ''')\n\n    conn.commit()\n    conn.close()\n\n# ========================= CRUD Functions ========================= #\ndef add_student(name, age, grade_level):\n    #เพิ่มนักเรียนใหม่\n    conn = sqlite3.connect('school.db')\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO students (name, age, grade_level) VALUES (?, ?, ?)\", (name, age, grade_level))\n    conn.commit()\n    conn.close()\n    print(f\"Student '{name}' added successfully.\")\n\ndef add_teacher(name, subject):\n    #เพิ่มครูใหม่\n    conn = sqlite3.connect('school.db')\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO teachers (name, subject) VALUES (?, ?)\", (name, subject))\n    conn.commit()\n    conn.close()\n    print(f\"Teacher '{name}' added successfully.\")\n\ndef add_subject(name, teacher_id, max_seats):\n    #เพิ่มวิชาใหม่\n    conn = sqlite3.connect('school.db')\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO subjects (name, teacher_id, max_seats) VALUES (?, ?, ?)\", (name, teacher_id, max_seats))\n    conn.commit()\n    conn.close()\n    print(f\"Subject '{name}' added successfully.\")\n\n# ========================= Enrollment Management ========================= #\ndef enroll_student(student_id, subject_id):\n    #ลงทะเบียนนักเรียนในวิชา\n    conn = sqlite3.connect('school.db')\n    cursor = conn.cursor()\n\n    # ตรวจสอบว่าวิชานี้เต็มหรือยัง\n    cursor.execute(\"SELECT COUNT(*) FROM enrollments WHERE subject_id = ?\", (subject_id,))\n    current_enrollments = cursor.fetchone()[0]\n\n    cursor.execute(\"SELECT max_seats FROM subjects WHERE id = ?\", (subject_id,))\n    max_seats = cursor.fetchone()\n\n    if not max_seats:\n        print(\"Subject does not exist.\")\n        conn.close()\n        return\n\n    if current_enrollments < max_seats[0]:\n        cursor.execute(\"INSERT INTO enrollments (student_id, subject_id, grade) VALUES (?, ?, NULL)\", (student_id, subject_id))\n        conn.commit()\n        print(\"Enrollment successful.\")\n    else:\n        print(\"Subject is full.\")\n\n    conn.close()\n\ndef assign_grade(student_id, subject_id, grade):\n    #ใส่เกรดให้กับนักเรียน\n    conn = sqlite3.connect('school.db')\n    cursor = conn.cursor()\n    cursor.execute(\"UPDATE enrollments SET grade = ? WHERE student_id = ? AND subject_id = ?\", (grade, student_id, subject_id))\n    conn.commit()\n    conn.close()\n    print(\"Grade assigned successfully.\")\n\n# ========================= Reporting ========================= #\ndef view_student_report(student_id):\n    #แสดงรายงานผลการเรียนของนักเรียน\n    conn = sqlite3.connect('school.db')\n    cursor = conn.cursor()\n    cursor.execute('''\n        SELECT s.name, sub.name, e.grade \n        FROM enrollments e\n        JOIN students s ON e.student_id = s.id\n        JOIN subjects sub ON e.subject_id = sub.id\n        WHERE s.id = ?\n    ''', (student_id,))\n    report = cursor.fetchall()\n    conn.close()\n\n    if report:\n        print(f\"{'Student Name':<20}{'Subject':<20}{'Grade':<10}\")\n        print('-' * 50)\n        for row in report:\n            print(f\"{row[0]:<20}{row[1]:<20}{row[2] if row[2] is not None else 'Not Assigned':<10}\")\n    else:\n        print(\"No report found for this student.\")\n\n# ========================= Main Menu ========================= #\ndef main():\n    setup_database()\n    print(\"Welcome to the School Management System!\")\n\n    while True:\n        print(\"\\nMenu:\")\n        print(\"1. Add Student\")\n        print(\"2. Add Teacher\")\n        print(\"3. Add Subject\")\n        print(\"4. Enroll Student in Subject\")\n        print(\"5. Assign Grade\")\n        print(\"6. View Student Report\")\n        print(\"7. Quit\")\n\n        choice = input(\"Choose an option: \")\n        if choice == '1':\n            name = input(\"Enter student name: \")\n            age = int(input(\"Enter student age: \"))\n            grade_level = input(\"Enter grade level: \")\n            add_student(name, age, grade_level)\n        elif choice == '2':\n            name = input(\"Enter teacher name: \")\n            subject = input(\"Enter subject taught: \")\n            add_teacher(name, subject)\n        elif choice == '3':\n            name = input(\"Enter subject name: \")\n            teacher_id = int(input(\"Enter teacher ID: \"))\n            max_seats = int(input(\"Enter maximum seats: \"))\n            add_subject(name, teacher_id, max_seats)\n        elif choice == '4':\n            student_id = int(input(\"Enter student ID: \"))\n            subject_id = int(input(\"Enter subject ID: \"))\n            enroll_student(student_id, subject_id)\n        elif choice == '5':\n            student_id = int(input(\"Enter student ID: \"))\n            subject_id = int(input(\"Enter subject ID: \"))\n            grade = float(input(\"Enter grade: \"))\n            assign_grade(student_id, subject_id, grade)\n        elif choice == '6':\n            student_id = int(input(\"Enter student ID: \"))\n            view_student_report(student_id)\n        elif choice == '7':\n            print(\"Exiting the program. Goodbye!\")\n            break\n        else:\n            print(\"Invalid choice. Please try again.\")\n\n# ========================= Start the Program ========================= #\nmain()\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับหัว (Reversed Equilateral Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    # รับค่าความสูงของสามเหลี่ยมจากผู้ใช้\n    height = int(input(\"Enter the height of reversed equilateral triangle: \"))\n\n    if height == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n\n    # วาดสามเหลี่ยมกลับหัวตามความสูงที่กำหนด\n    for i in range(height, 0, -1):\n        spaces = ' ' * (height - i)  # ช่องว่างด้านซ้าย\n        stars = '*' * (2 * i - 1)  # จำนวน * ในแต่ละแถว\n        print(spaces + stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "(XV)ใช้หลายkeyในการเข้ารหัส(Multi-KeyEncryption).py",
        "description": "# โปรแกรมเข้ารหัสข้อความด้วย key หลายตัว",
        "content_snippet": "# โปรแกรมเข้ารหัสข้อความด้วย key หลายตัว\n# โดยใช้ฟังก์ชัน secret_password(text, keys) ที่รับข้อความและ key เป็นอาร์กิวเมนต์\ndef secret_password(text, keys):\n    result = \"\"\n    for i, char in enumerate(text):\n        if char.isalpha():\n            key = keys[i % len(keys)]  # เลือก key ตามตำแหน่ง\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        else:\n            raise ValueError(\"Error!!!! Input non-characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key_list = list(map(int, input(\"Enter secret keys (Comma-separated): \").split(',')))\n\n    ciphertext = secret_password(plaintext, key_list)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    decrypted_text = secret_password(ciphertext, [-key for key in key_list])\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(XV)เพิ่มการจัดการข้อความหลายบรรทัด.py",
        "description": "# โปรแกรมเข้ารหัสข้อความด้วยวิธี Caesar Cipher",
        "content_snippet": "# โปรแกรมเข้ารหัสข้อความด้วยวิธี Caesar Cipher\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        elif char.isspace():  # Allow spaces between words\n            result += char\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Multiple lines allowed, Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    ciphertext = '\\n'.join(secret_password(line, key) for line in plaintext.split('\\n'))\n    print(\"The encrypted ciphertext (multi-line):\")\n    print(ciphertext)\n\n    decrypted_text = '\\n'.join(secret_password(line, -key) for line in ciphertext.split('\\n'))\n    print(\"The decryption result (multi-line):\")\n    print(decrypted_text)\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(2)เพิ่มการบันทึกแถวที่สร้างลงในไฟล์txt.py",
        "description": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการบันทึกแถวที่สร้างลงในไฟล์ .txt",
        "content_snippet": "# โปรแกรมนี้สร้างแถวตัวเลขแบบสะสม และเพิ่มการบันทึกแถวที่สร้างลงในไฟล์ .txt\n# สามารถเลือกแถวที่ต้องการดูได้ และออกจากโปรแกรมเมื่อป้อน -1\ndef generate_rows(num_rows):\n    rows = [[1]]\n    for i in range(1, num_rows + 1):\n        previous_row = rows[-1]\n        new_row = [previous_row[-1]]\n        for j in range(len(previous_row)):\n            new_row.append(new_row[-1] + previous_row[j])\n        rows.append(new_row)\n    return rows\n\ndef main():\n    rows = []\n    while True:\n        try:\n            user_row = int(input(\"Please Enter Degree : \"))\n            if user_row == -1:\n                print(\"ออกจากโปรแกรม\")\n                break\n            if user_row < 0:\n                print(\"กรุณากรอกหมายเลขแถวที่เป็นค่าบวกหรือศูนย์\")\n                continue\n            if len(rows) <= user_row:\n                rows = generate_rows(user_row)\n            with open(\"rows_output.txt\", \"w\") as file:\n                for i, row in enumerate(rows):\n                    file.write(f\"Row {i}: {row}\\n\")\n            print(f\"Row {user_row}: {rows[user_row]} (Saved to rows_output.txt)\\n\")\n        except ValueError:\n            print(\"กรุณากรอกตัวเลขที่ถูกต้อง\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมด้านไม่เท่า (Scalene Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    # รับค่าความสูงและความชันจากผู้ใช้\n    height = int(input(\"Enter the height of scalene triangle: \"))\n    slope = int(input(\"Enter the slope (number of stars added per row): \"))\n\n    if height == 0:  # หากใส่ 0 จะออกจากโปรแกรม\n        break\n\n    # วาดสามเหลี่ยมด้านไม่เท่าตามความสูงและความชันที่กำหนด\n    for i in range(1, height + 1):\n        stars = '*' * (i * slope)  # จำนวน * ในแต่ละแถวขึ้นอยู่กับความชัน\n        print(stars)  # แสดงผล\n    print()  # ขึ้นบรรทัดใหม่"
    },
    {
        "filename": "(XIV)สร้างPascalTriangleแบบModular.py",
        "description": "# ฟังก์ชัน Pascal Triangle แบบ Modular (ผลลัพธ์ mod k)",
        "content_snippet": "# ฟังก์ชัน Pascal Triangle แบบ Modular (ผลลัพธ์ mod k)\ndef pascal_triangle_modular(n, k):\n    triangle = [] # สร้างรายการเก็บแถว\n    for i in range(n + 1): # วนลูปเพื่อสร้างแถว\n        row = [1] # สร้างแถวใหม่\n        if i > 0: # สร้างตัวเลขใหม่ในแถวที่มากกว่า 0\n            for j in range(1, i): # วนลูปเพื่อสร้างตัวเลขใหม่\n                row.append((triangle[i - 1][j - 1] + triangle[i - 1][j]) % k)  # คำนวณผลลัพธ์ mod k\n            row.append(1) # เพิ่มตัวเลขสุดท้าย\n        triangle.append(row) # เพิ่มแถวใหม่เข้าไปในรายการ\n    return triangle\n\n# รับค่าระดับและตัวเลขที่ใช้ mod\nn = int(input(\"Enter the number of rows for Pascal Triangle: \"))\nk = int(input(\"Enter the modular value: \"))\nresult = pascal_triangle_modular(n, k)\n\n# แสดงผล\nfor row in result:\n    print(row)\n"
    },
    {
        "filename": "(XIV)สร้างPascalTriangleโดยใช้NumPy.py",
        "description": "# โปรแกรมสร้าง Pascal Triangle ด้วย NumPy",
        "content_snippet": "# โปรแกรมสร้าง Pascal Triangle ด้วย NumPy\nimport numpy as np\n\n# ใช้ NumPy ในการสร้าง Pascal Triangle\ndef pascal_triangle_numpy(n): # ฟังก์ชันสร้าง Pascal Triangle\n    triangle = np.zeros((n + 1, n + 1), dtype=int)  # สร้าง array ที่มีค่าเริ่มต้นเป็น 0\n    for i in range(n + 1): # วนลูปเพื่อสร้างแถว\n        triangle[i][0] = 1  # เริ่มแถวแต่ละแถวด้วย 1\n        for j in range(1, i + 1): # วนลูปเพื่อสร้างตัวเลขใหม่\n            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j]  # คำนวณค่ากลาง\n    return triangle # ส่งค่ากลับ\n\n# รับค่าระดับ\nn = int(input(\"Enter the number of rows for Pascal Triangle (NumPy): \")) # รับค่าจากผู้ใช้\nresult = pascal_triangle_numpy(n) # เรียกใช้ฟังก์ชัน\n\n# แสดงผล\nfor row in result: # วนลูปเพื่อแสดงผล\n    print(row[row > 0])  # แสดงเฉพาะค่าในแถวที่ไม่เป็น 0\n"
    },
    {
        "filename": "การดึงข้อมูลจาก_API_และบันทึกในไฟล์_JSON.py",
        "description": "# โปรแกรมดึงข้อมูลจาก API และบันทึกข้อมูลลงไฟล์ JSON",
        "content_snippet": "# โปรแกรมดึงข้อมูลจาก API และบันทึกข้อมูลลงไฟล์ JSON\nimport requests\nimport json\n\ndef fetch_api_data(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(f\"Error: Unable to fetch data (status code {response.status_code})\")\n        return None\n\n\ndef save_json_file(data, filename):\n    with open(filename, 'w') as file:\n        json.dump(data, file, indent=4)\n    print(f\"บันทึกข้อมูลลงไฟล์ {filename} เรียบร้อย\")\n\n# ตัวอย่างการใช้งาน\nurl = \"https://jsonplaceholder.typicode.com/todos\"\ndata = fetch_api_data(url)\nif data:\n    save_json_file(data, \"todos.json\")\n"
    },
    {
        "filename": "(5) เพิ่มการคำนวณเงินทอนแบบแยกตามผู้จ่าย (เช่น ชำระรวมจากหลายคน).py",
        "description": "# โปรแกรมคำนวณเงินทอนเมื่อมีหลายคนจ่ายเงินร่วมกัน",
        "content_snippet": "# โปรแกรมคำนวณเงินทอนเมื่อมีหลายคนจ่ายเงินร่วมกัน\n# Program to calculate change when multiple people pay together\ndef calculate_change(total_price, payments):\n    denominations = {\n        \"The 500-$Baht Banknote\": 500,\n        \"The 100-$Baht Banknote\": 100,\n        \"The 50-$Baht Banknote\": 50,\n        \"The 20-$Baht Banknote\": 20,\n        \"The 10-$Baht Coin\": 10,\n        \"The 5-$Baht Coin\": 5,\n        \"The 2-$Baht Coin\": 2,\n        \"The 1-$Baht Coin\": 1,\n    }\n\n    total_payment = sum(payments)\n    change = total_payment - total_price\n\n    if change < 0:\n        return \"!!! Insufficient payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in denominations.items():\n            count = change // value\n            if count > 0:\n                result.append(f\"{denom} = {count} Piece(s)\")\n            change %= value\n        return \"\\n\".join(result)\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    total_price = int(input(\"The total price of products: \"))\n    num_people = int(input(\"Enter the number of people paying: \"))\n    payments = [int(input(f\"Payment from person {i + 1}: \")) for i in range(num_people)]\n    print(\"----------------------------------------------------------\")\n\n    if sum(payments) == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change(total_price, payments)\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "ก็แค่เรียงลำดับV2.py",
        "description": "# โปรแกรมนี้จะเอาไว้เรียงลำดับตัวเลขจากมากไปน้อย",
        "content_snippet": "# โปรแกรมนี้จะเอาไว้เรียงลำดับตัวเลขจากมากไปน้อย\nnum = []\n\nn = int(input())  \n\nfor i in range(n):\n    amount = int(input())\n    i += 1\n    num.append(amount)\n\nnum.sort(reverse=True)\n\n\nfor number in num:\n    print(number)\n\n#บรรทัดแรกสุดจะเอาไว้บอกว่าจะรับข้อมูลทั้งหมดกี่ตัว"
    },
    {
        "filename": "(6)เพิ่มระบบตรวจจับข้อความที่อาจถูกดัดแปลง (ผ่านการตรวจสอบ Checksum).py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR พร้อมตรวจสอบความถูกต้องด้วย Checksum",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR พร้อมตรวจสอบความถูกต้องด้วย Checksum\nimport hashlib\n\ndef calculate_checksum(data):\n    \"\"\"คำนวณ Checksum ของข้อความ\"\"\"\n    return hashlib.sha256(data.encode()).hexdigest()\n\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef encrypt(plaintext, secret_key):\n    \"\"\"เข้ารหัสข้อความด้วย XOR\"\"\"\n    ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n    checksum = calculate_checksum(ciphertext)  # คำนวณ Checksum\n    return ciphertext, checksum\n\ndef decrypt(ciphertext, secret_key, original_checksum):\n    \"\"\"ถอดรหัสข้อความด้วย XOR และตรวจสอบ Checksum\"\"\"\n    plaintext = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, secret_key))\n    checksum = calculate_checksum(ciphertext)  # ตรวจสอบ Checksum\n    if checksum != original_checksum:\n        return plaintext, \"Warning: The ciphertext might have been tampered!\"\n    return plaintext, \"Checksum matched. Data integrity verified.\"\n\n# Main Program\nprint(\"------------- Encryption and Decryption Program with Checksum -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\nsecret_key = input(\"Enter your secret key: \")\n\nadjusted_key = adjust_key_length(plaintext, secret_key)\nciphertext, checksum = encrypt(plaintext, adjusted_key)\nprint(f\"The encrypted ciphertext: {ciphertext}\")\nprint(f\"Checksum: {checksum}\")\n\ndecrypted_text, verification_message = decrypt(ciphertext, adjusted_key, checksum)\nprint(f\"The decryption results: {decrypted_text}\")\nprint(f\"Verification: {verification_message}\\n\")"
    },
    {
        "filename": "รายงานสภาพอากาศ.py",
        "description": "#โปรแกรมดึงข้อมูลสภาพอากาศจาก API และแสดงผล",
        "content_snippet": "#โปรแกรมดึงข้อมูลสภาพอากาศจาก API และแสดงผล\nimport requests\n\ndef get_weather(city, api_key):\n    base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n    params = {\n        \"q\": city,\n        \"appid\": api_key,\n        \"units\": \"metric\"\n    }\n    response = requests.get(base_url, params=params)\n    if response.status_code == 200:\n        data = response.json()\n        weather = data[\"weather\"][0][\"description\"]\n        temperature = data[\"main\"][\"temp\"]\n        return weather, temperature\n    else:\n        print(\"ไม่สามารถดึงข้อมูลได้\")\n        return None, None\n\n# ตัวอย่างการใช้งาน\ncity = input(\"กรุณาใส่ชื่อเมือง: \")\napi_key = \"your_api_key_here\"  # ใส่ API Key ของคุณ\nweather, temp = get_weather(city, api_key)\nif weather:\n    print(f\"สภาพอากาศใน {city}: {weather}, อุณหภูมิ: {temp}°C\")"
    },
    {
        "filename": "(6)เพิ่มระบบให้เข้ารหัสหลายชั้น (Multi-layer Encryption).py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR หลายชั้น",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR หลายชั้น\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef encrypt(plaintext, secret_key, layers=2):\n    \"\"\"เข้ารหัสข้อความด้วย XOR หลายชั้น\"\"\"\n    ciphertext = plaintext\n    for _ in range(layers):\n        ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(ciphertext, secret_key))\n    return ciphertext\n\ndef decrypt(ciphertext, secret_key, layers=2):\n    \"\"\"ถอดรหัสข้อความด้วย XOR หลายชั้น\"\"\"\n    plaintext = ciphertext\n    for _ in range(layers):\n        plaintext = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(plaintext, secret_key))\n    return plaintext\n\n# Main Program\nprint(\"------------- Multi-layer Encryption and Decryption Program -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\nsecret_key = input(\"Enter your secret key: \")\nlayers = int(input(\"Enter the number of encryption layers: \"))\n\nadjusted_key = adjust_key_length(plaintext, secret_key)\nciphertext = encrypt(plaintext, adjusted_key, layers)\nprint(f\"The encrypted ciphertext after {layers} layers: {ciphertext}\")\n\ndecrypted_text = decrypt(ciphertext, adjusted_key, layers)\nprint(f\"The decryption results: {decrypted_text}\\n\")"
    },
    {
        "filename": "เข้ารหัส.py",
        "description": "# โปรแกรมสร้างรหัสลับจากข้อความและเข้ารหัสข้อความด้วย Caesar Cipher",
        "content_snippet": "# โปรแกรมสร้างรหัสลับจากข้อความและเข้ารหัสข้อความด้วย Caesar Cipher\n# ข้อความต้นฉบับ\ns1 = \"Python is a powerful high-level, object-oriented programming language created by Guido van Rossum.\"\ns2 = \"It has simple easy-to-use syntax, making it the perfect language for someone trying to learn computer programming for the first time.\"\ns3 = \"Professionally, Python is great for backend web development, data analysis, artificial intelligence, and scientific computing.\"\n\n# ฟังก์ชันเข้ารหัส Caesar Cipher\ndef caesar_cipher(text, shift):\n    \"\"\"\n    ฟังก์ชันสำหรับเข้ารหัสข้อความด้วย Caesar Cipher\n    - text: ข้อความที่ต้องการเข้ารหัส\n    - shift: จำนวนตำแหน่งที่ต้องการเลื่อนอักขระ\n    \"\"\"\n    result = \"\"\n    for char in text:\n        if char.isalpha():  # ตรวจสอบว่าเป็นตัวอักษร\n            base = ord('A') if char.isupper() else ord('a')\n            result += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            result += char  # ถ้าไม่ใช่ตัวอักษร ให้คงเดิม\n    return result\n\n# ======================= การวิเคราะห์ข้อความ ======================= #\n\n# จำนวนตัวอักษรทั้งหมดใน s1, s2, s3\ntotal_char = len(s1) + len(s2) + len(s3)\nprint(f\"Total characters: {total_char}\")\n\n# จำนวนคำทั้งหมดใน s1, s2, s3\ntotal_words = len(s1.split()) + len(s2.split()) + len(s3.split())\nprint(f\"Total words: {total_words}\")\n\n# ======================= การเข้ารหัสลับ ======================= #\n\n# เข้ารหัสข้อความแต่ละส่วน\nshift_value = 5  # จำนวนตำแหน่งที่เลื่อน\nencoded_s1 = caesar_cipher(s1, shift_value)\nencoded_s2 = caesar_cipher(s2, shift_value)\nencoded_s3 = caesar_cipher(s3, shift_value)\n\nprint(\"\\nEncoded Strings:\")\nprint(f\"Encoded s1: {encoded_s1}\")\nprint(f\"Encoded s2: {encoded_s2}\")\nprint(f\"Encoded s3: {encoded_s3}\")\n\n# ======================= การสร้างรหัสลับ ======================= #\n\n# ใช้ตัวอักษรบางตัวจากข้อความเข้ารหัสเป็น \"รหัสลับ\"\nsecret_code = encoded_s1[10] + encoded_s2[15] + encoded_s3[20]\nprint(f\"\\nThe secret code is: {secret_code}\")\n"
    },
    {
        "filename": "(XIV)แสดงPascalTriangleทั้งหมดในรูปแบบของลิสต์ซ้อนกัน.py",
        "description": "# ฟังก์ชันที่แสดง Pascal Triangle ทั้งหมด",
        "content_snippet": "# ฟังก์ชันที่แสดง Pascal Triangle ทั้งหมด\ndef pascal_triangle_all(n):\n    if n == 0:\n        return [[1]]  # ระดับแรกของ Pascal Triangle มีเพียง 1\n    else:\n        previous = pascal_triangle_all(n - 1)  # เรียกฟังก์ชันเดิมสำหรับระดับก่อนหน้า\n        last_row = previous[-1]  # แถวสุดท้ายของ Pascal Triangle\n        current_row = [1]  # เริ่มแถวใหม่ด้วย 1\n\n        # สร้างค่ากลางของแถวใหม่\n        for i in range(1, len(last_row)):\n            current_row.append(last_row[i - 1] + last_row[i])\n\n        current_row.append(1)  # จบแถวด้วย 1\n        previous.append(current_row)  # เพิ่มแถวใหม่ลงไปใน Pascal Triangle ทั้งหมด\n        return previous\n\n# รับค่าระดับของ Pascal Triangle จากผู้ใช้\nn = int(input(\"Enter the number of rows for Pascal Triangle: \"))\nresult = pascal_triangle_all(n)\n\n# แสดงผล Pascal Triangle ในรูปแบบลิสต์ซ้อน\nfor row in result:\n    print(row)\n"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมด้านเท่าแบบกลับหัวกลวง (Hollow Reversed Equilateral Triangle).py",
        "description": "while True:",
        "content_snippet": "while True:\n    height = int(input(\"Enter the height of hollow reversed equilateral triangle: \"))\n\n    if height == 0:\n        break\n\n    for i in range(height, 0, -1):\n        spaces = ' ' * (height - i)\n        if i == 1:\n            stars = '*'\n        elif i == height:\n            stars = '*' + ' ' * (2 * i - 3) + '*'\n        else:\n            stars = '*' + ' ' * (2 * i - 3) + '*'\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "(XII)สร้างระบบBatchConversion(อ่านจากCSV).py",
        "description": "# โปรแกรมแปลงตัวเลขเป็น Roman Numerals และบันทึกผลลัพธ์ลงในไฟล์ CSV",
        "content_snippet": "# โปรแกรมแปลงตัวเลขเป็น Roman Numerals และบันทึกผลลัพธ์ลงในไฟล์ CSV\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\nimport csv\n\ndef batch_convert_to_roman(input_file, output_file):\n    \"\"\"แปลงตัวเลขในไฟล์ CSV เป็น Roman Numerals\"\"\"\n    try:\n        with open(input_file, \"r\") as infile, open(output_file, \"w\", newline=\"\") as outfile:\n            reader = csv.reader(infile)\n            writer = csv.writer(outfile)\n            writer.writerow([\"Number\", \"Roman Numeral\"])\n            \n            for row in reader:\n                try:\n                    number = int(row[0])\n                    roman = int_to_roman(number)\n                    writer.writerow([number, roman])\n                except ValueError:\n                    writer.writerow([row[0], \"Invalid\"])\n        return f\"Results written to {output_file}\"\n    except FileNotFoundError:\n        return \"Input file not found.\"\n\n# Example การเรียกใช้ฟังก์ชัน\ninput_csv = \"numbers.csv\"  # ไฟล์ต้องมีแค่ตัวเลขในแต่ละแถว\noutput_csv = \"roman_results.csv\"\nprint(batch_convert_to_roman(input_csv, output_csv))\n"
    },
    {
        "filename": "(XII)แปลงเลขฐาน(Binary_Decimal)เป็นRomanNumerals.py",
        "description": "# โปรแกรมแปลง Binary เป็น Roman Numerals",
        "content_snippet": "# โปรแกรมแปลง Binary เป็น Roman Numerals\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\ndef binary_to_decimal(binary):\n    \"\"\"แปลง Binary เป็น Decimal\"\"\"\n    try:\n        return int(binary, 2)\n    except ValueError:\n        return \"Invalid binary number.\"\n\n\ndef binary_to_roman(binary):\n    \"\"\"แปลง Binary เป็น Roman Numeral\"\"\"\n    decimal = binary_to_decimal(binary)\n    if isinstance(decimal, int):\n        return int_to_roman(decimal)\n    return decimal\n\n\n# โหมด Binary\nwhile True:\n    print(\"\\nRoman Numeral Converter (Binary Mode)\")\n    print(\"1. Convert binary to Roman numeral\")\n    print(\"2. Exit\")\n    \n    choice = input(\"Choose an option (1/2): \")\n    \n    if choice == \"1\":\n        binary = input(\"Enter a binary number: \")\n        result = binary_to_roman(binary)\n        if isinstance(result, str):\n            print(f\"Result: {result}\")\n        else:\n            print(\"Conversion failed.\")\n    \n    elif choice == \"2\":\n        print(\"Exiting the converter. Goodbye!\")\n        break\n    \n    else:\n        print(\"Invalid option. Please choose again.\")\n"
    },
    {
        "filename": "(II)หาพื้นที่_lv3.py",
        "description": "# โปรแกรมคำนวณเรื่องเรขาคณิตระดับสูง โดยใช้",
        "content_snippet": "# โปรแกรมคำนวณเรื่องเรขาคณิตระดับสูง โดยใช้\nimport math\n\n# ฟังก์ชันคำนวณพื้นที่สามเหลี่ยม พร้อมรองรับหลายชุดข้อมูล\ndef Area_Of_Triangle(*dimensions):\n    results = []\n    for b, h in dimensions:\n        if b <= 0 or h <= 0:\n            results.append(\"Base and Height must be positive numbers.\")\n        else:\n            aot = 0.5 * b * h\n            results.append(f\"Base = {b}, Height = {h}, Area = {aot:.2f}\")\n    return results\n\n# ฟังก์ชันคำนวณพื้นที่สี่เหลี่ยม และเพิ่มการรองรับการคำนวณหลายครั้ง\ndef Area_Of_Rectangle(*pairs):\n    results = []\n    for l, w in pairs:\n        if l <= 0 or w <= 0:\n            results.append(\"Length and Width must be positive numbers.\")\n        else:\n            aor = l * w\n            results.append(f\"Length = {l}, Width = {w}, Area = {aor:.2f}\")\n    return results\n\n# ฟังก์ชันหาด้านยาวของสามเหลี่ยมมุมฉาก พร้อมเช็คกรณีไม่มีคำตอบ\ndef The_Long_Side_Of_The_Right_Triangle(a1, b1):\n    if a1 <= 0 or b1 <= 0:\n        return \"Both sides must be positive numbers.\"\n    longside = math.sqrt(a1**2 + b1**2)\n    return f\"The longest side is {longside:.2f}\"\n\n# ฟังก์ชันคำนวณสมการกำลังสอง รองรับกรณีมีหลายสมการ\ndef The_Solution_Of_Quadratic_Formula(*coefficients):\n    results = []\n    for c2, b2, a2 in coefficients:\n        if a2 == 0:\n            results.append(\"Coefficient 'a' must not be zero.\")\n            continue\n\n        discriminant = b2**2 - 4 * a2 * c2\n        if discriminant < 0:\n            root1 = (-b2 + complex(0, math.sqrt(-discriminant))) / (2 * a2)\n            root2 = (-b2 - complex(0, math.sqrt(-discriminant))) / (2 * a2)\n            results.append(f\"a={a2}, b={b2}, c={c2}, Solutions: x1={root1}, x2={root2}\")\n        elif discriminant == 0:\n            x1 = -b2 / (2 * a2)\n            results.append(f\"a={a2}, b={b2}, c={c2}, Single solution: x={x1}\")\n        else:\n            x1 = (-b2 + math.sqrt(discriminant)) / (2 * a2)\n            x2 = (-b2 - math.sqrt(discriminant)) / (2 * a2)\n            results.append(f\"a={a2}, b={b2}, c={c2}, Solutions: x1={x1:.2f}, x2={x2:.2f}\")\n    return results\n\n# ฟังก์ชันคำนวณระยะทางระหว่างสองจุดใน 2D หรือ 3D\ndef Distance_Between_Points(p1, p2):\n    if len(p1) != len(p2):\n        return \"Points must have the same dimensions.\"\n    distance = math.sqrt(sum((p2[i] - p1[i])**2 for i in range(len(p1))))\n    return f\"The distance between points {p1} and {p2} is {distance:.2f}\"\n\n# ฟังก์ชันแสดงผลลัพธ์ทุกฟังก์ชันในรูปแบบข้อความที่เข้าใจง่าย\ndef display_results(title, results):\n    print(f\"\\n{'-'*50}\\n{title}\\n{'-'*50}\")\n    for result in results:\n        print(result)\n\n# เริ่มต้นโปรแกรม\ndef main():\n    print(\"Welcome to the Advanced Geometry Calculator!\")\n    \n    # คำนวณพื้นที่สามเหลี่ยม\n    triangles = [(3, 4), (5, 10), (7, -2)]  # ทดสอบหลายค่า\n    display_results(\"Area Of Triangle\", Area_Of_Triangle(*triangles))\n\n    # คำนวณพื้นที่สี่เหลี่ยม\n    rectangles = [(4, 5), (3, 7), (-2, 5)]  # ทดสอบหลายค่า\n    display_results(\"Area Of Rectangle\", Area_Of_Rectangle(*rectangles))\n\n    # หาด้านยาวสามเหลี่ยมมุมฉาก\n    print(\"\\nFinding the longest side of a right triangle:\")\n    print(The_Long_Side_Of_The_Right_Triangle(3, 4))\n\n    # คำนวณสมการกำลังสอง\n    quadratics = [(1, -3, 2), (1, 2, 1), (1, 0, -4)]  # ทดสอบหลายสมการ\n    display_results(\"Solutions Of Quadratic Formula\", The_Solution_Of_Quadratic_Formula(*quadratics))\n\n    # ระยะห่างระหว่างจุดใน 2D และ 3D\n    print(\"\\nCalculating distances:\")\n    print(Distance_Between_Points((1, 2), (4, 6)))  # 2D\n    print(Distance_Between_Points((1, 2, 3), (4, 6, 8)))  # 3D\n\n# เรียกโปรแกรมหลัก\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "filename": "(XV)เพิ่มการสุ่มkeyแทนการรับจากผู้ใช้.py",
        "description": "# โปรแกรมที่ใช้สร้าง key และเข้ารหัสข้อความด้วย key ที่สร้างขึ้น",
        "content_snippet": "# โปรแกรมที่ใช้สร้าง key และเข้ารหัสข้อความด้วย key ที่สร้างขึ้น\nimport random\n\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a') # ตรวจสอบว่าเป็นตัวพิมพ์ใหญ่หรือเล็ก\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base) # คำนวณตำแหน่งของตัวอักษรที่ถูกเข้ารหัส\n            result += shifted_char # ต่อค่าที่ถูกเข้ารหัสเข้ากับตัวแปร\n        else:\n            raise ValueError(\"Error!!!! Input non-characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = random.randint(1, 25)  # Generate a random key between 1 and 25\n    print(f\"Generated secret key: {key}\")\n\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    decrypted_text = secret_password(ciphertext, -key)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "(X)บังคับให้รหัสผ่านมีอักขระไม่ซ้ำกันอย่างน้อย5ตัว.py",
        "description": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความปลอดภัยของรหัสผ่าน\nimport re\n\nwhile True:\n    password = input(\"Set your password:\")\n\n    if 8 <= len(password) <= 16:\n        if len(set(password)) < 5:  # Check for at least 5 unique characters\n            print(\"!!!ERROR!!! Your password must contain at least 5 unique characters\\n\")\n        elif (re.search(r'[A-Z]', password) and\n              re.search(r'[a-z]', password) and\n              re.search(r'[0-9]', password) and\n              re.search(r'[!@#$%^&*]', password)):\n            print(\":-) Your password is valid and secure (-: \")\n            break\n        else:\n            print(\"!!!ERROR!!! Your password does not meet the complexity requirements\\n\")\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "เขียนMatrixลงในไฟล์และอ่านกลับมาคำนวณ.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการใช้ Python เพื่อเขียนและอ่านเมทริกซ์จากไฟล์",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการใช้ Python เพื่อเขียนและอ่านเมทริกซ์จากไฟล์\nprint('*' * 70)\nprint('Matrix File Operations'.center(70))\nprint('*' * 70)\n\nfile_name = \"matrix_data.txt\"\n\n# สร้างเมทริกซ์และบันทึกลงไฟล์\nwith open(file_name, \"w\") as file:\n    for i in range(1, 4):\n        row = [i * j for j in range(1, 4)]\n        file.write(\" \".join(map(str, row)) + \"\\n\")\n\nprint(f\"Matrix written to {file_name}\")\n\n# อ่านเมทริกซ์จากไฟล์\nmatrix = []\nwith open(file_name, \"r\") as file:\n    for line in file:\n        matrix.append(list(map(int, line.split())))\n\n# คำนวณ Transpose\ntranspose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\nprint(\"\\nOriginal Matrix:\")\nfor row in matrix:\n    print(row)\n\nprint(\"\\nTransposed Matrix:\")\nfor row in transpose:\n    print(row)\n"
    },
    {
        "filename": "(XI)Factorialที่ตรวจสอบว่ามีเลขเฉพาะ(Prime)หรือไม่.py",
        "description": "# โปรแกรมนี้เป็นการคำนวณ Factorial และตรวจสอบว่า Factorial มีค่าเป็นจำนวนเฉพาะหรือไม่",
        "content_snippet": "# โปรแกรมนี้เป็นการคำนวณ Factorial และตรวจสอบว่า Factorial มีค่าเป็นจำนวนเฉพาะหรือไม่\n# ตรวจสอบว่า Factorial มีค่าเป็นจำนวนเฉพาะหรือไม่\nprint('Checking if Factorials contain any prime numbers')\nn = int(input(\"Enter 'n' for Factorial series: \"))\nresult = 1\nfactorial_list = []\nprime_check = []\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# คำนวณ Factorial และเช็ค prime\nfor i in range(1, n+1):\n    result *= i\n    factorial_list.append(result)\n    prime_check.append(is_prime(result))  # เพิ่ม True/False ตามค่าที่เช็ค prime\n\n# แสดงผล\nprint(f\"Factorial series: {factorial_list}\")\nprint(f\"Prime check for each Factorial: {prime_check}\\n\")\n"
    },
    {
        "filename": "(VII)Matrix_with_Tuple.py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ Tuple ในการจัดเก็บข้อมูลของ Matrix และทำการคูณ Matrix กับ Transpose ของ Matrix นั้นเอง",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ Tuple ในการจัดเก็บข้อมูลของ Matrix และทำการคูณ Matrix กับ Transpose ของ Matrix นั้นเอง\nprint('*' * 70)\nprint('Matrix with Tuple'.center(70))\nprint('*' * 70)\n\nA = ((1, 3, 5), (2, 4, 6))\nA_T = tuple(zip(*A))\nA_AT = (\n    (sum(A[0][k] * A_T[k][0] for k in range(3)), sum(A[0][k] * A_T[k][1] for k in range(3))),\n    (sum(A[1][k] * A_T[k][0] for k in range(3)), sum(A[1][k] * A_T[k][1] for k in range(3)))\n)\n\ndef input_number(matrix, matrix_name, matrix_position):\n        row = int(input(f\"Enter row number of the {matrix_name}: \")) - 1\n        col = int(input(f\"Enter column number of the {matrix_name}: \")) - 1\n        value = matrix[row][col]\n        print(f'The \"{matrix_position}{row+1}{col+1}\" element in the {matrix_name} matrix is {value}')\n\ninput_number(A, '\"A\" matrix', 'a')\nprint(\"-\" * 67)\n\ninput_number(A_T, 'transposed \"A\" matrix', 'b')\nprint(\"-\" * 67)\n\ninput_number(A_AT, 'multiplication of matrix \"A\" and transposed of \"A\"', 'c')\nprint(\"-\" * 67 + \"\\n\")\n"
    },
    {
        "filename": "เพิ่มระบบค้นหาข้อมูลบุคคล.py",
        "description": "# โปรแกรมแสดงข้อมูลของนักเรียน และเพิ่มข้อมูลของนักเรียนคนใหม่",
        "content_snippet": "# โปรแกรมแสดงข้อมูลของนักเรียน และเพิ่มข้อมูลของนักเรียนคนใหม่\nid = {'Peter' : {'Age': 40 , 'Gender': 'Male', 'Test': {'First': 20, 'Second': 18, 'Third': 19}},\n      'Paul' : {'Age': 25, 'Gender': 'Male', 'Test': {'First' : 19, 'Second': 20, 'Third': 19}},\n      'Mary' : {'Age': 18, 'Gender': 'Female', 'Test': {'First': 10, 'Second': 5, 'Third': 4}},\n      'Jenny' : {'Age': 60, 'Gender': 'Female', 'Test': {'First': 5, 'Second': 3, 'Third': 1}}}\n\nprint(f'\"Peter\" is {id['Peter']['Gender']}')\nprint(f'The 1st test score of \"Mary\" is {id['Mary']['Test']['First']}')\nprint(f'The 2st test score of \"Jenny\" is {id['Jenny']['Test']['Second']}')\nprint(f'The 3st test score of \"Paul\" is {id['Paul']['Test']['Third']}')\n\nid['Robert'] = {'Age': 35, 'Gender': 'Male', 'Test' : {'First': 10, 'Second': 18, 'Third': 5}}\n\nprint(f'\"Robert\" is {id['Robert']['Age']} years old')\nprint('The dictionary to solve this problem was designed as:')\n\nfor name, data in id.items():\n    print(f'{name} : {data}')"
    },
    {
        "filename": "ReverseThe.py",
        "description": "# โปรแกรมที่รับข้อความเข้ามาแล้ว reverse ข้อความนั้น",
        "content_snippet": "# โปรแกรมที่รับข้อความเข้ามาแล้ว reverse ข้อความนั้น\ntext = str(input())\n\nw = text.split()\nrevers_w = w[::-1]\nrevers_text = ' '.join(revers_w)\n\nprint(revers_text)"
    },
    {
        "filename": "(XV)เพิ่มการเข้ารหัสตัวเลข.py",
        "description": "# โปรแกรมเข้ารหัสข้อความด้วยวิธีการเข้ารหัส Caesar Cipher โดยให้ผู้ใช้ป้อนข้อความและคีย์เป็นจำนวนเต็มบวกหรือลบ",
        "content_snippet": "# โปรแกรมเข้ารหัสข้อความด้วยวิธีการเข้ารหัส Caesar Cipher โดยให้ผู้ใช้ป้อนข้อความและคีย์เป็นจำนวนเต็มบวกหรือลบ\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():  # ตรวจสอบว่าเป็นตัวอักษรหรือไม่\n            shift_base = ord('A') if char.isupper() else ord('a') # ตรวจสอบว่าเป็นตัวพิมพ์ใหญ่หรือเล็ก\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base) # คำนวณตำแหน่งของตัวอักษรที่ถูกเข้ารหัส\n            result += shifted_char # ต่อค่าที่ถูกเข้ารหัสเข้ากับตัวแปร\n        elif char.isdigit():  # ตรวจสอบว่าเป็นตัวเลขหรือไม่\n            shifted_digit = (int(char) + key) % 10 # คำนวณตำแหน่งของตัวเลขที่ถูกเข้ารหัส\n            result += str(shifted_digit) # ต่อค่าที่ถูกเข้ารหัสเข้ากับตัวแปร\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabets and Digits Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    ciphertext = secret_password(plaintext, key)\n    print(\"The encrypted ciphertext:\", ciphertext)\n\n    decrypted_text = secret_password(ciphertext, -key)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "สร้างBox_Plot.py",
        "description": "#โปรแกรมสร้าง Box Plot เพื่อแสดงการกระจายของข้อมูล",
        "content_snippet": "#โปรแกรมสร้าง Box Plot เพื่อแสดงการกระจายของข้อมูล\nimport matplotlib.pyplot as plt\n\ndef plot_box(data):\n    plt.boxplot(data, patch_artist=True)\n    plt.title(\"Box Plot แสดงการกระจายของข้อมูล\")\n    plt.xlabel(\"หมวดหมู่\")\n    plt.ylabel(\"ค่า\")\n    plt.show()\n\n# ตัวอย่างการใช้งาน\ndata = [7, 8, 9, 10, 15, 16, 22, 24, 27, 28]\nplot_box(data)"
    },
    {
        "filename": "(1)เพิ่มการเรียงลำดับMatrixตามแถวหรือคอลัมน์.py",
        "description": "# โปรแกรมสร้างเมทริกซ์จากตัวเลขสุ่ม และให้ผู้ใช้เลือกเรียงลำดับตามแถวหรือคอลัมน์",
        "content_snippet": "# โปรแกรมสร้างเมทริกซ์จากตัวเลขสุ่ม และให้ผู้ใช้เลือกเรียงลำดับตามแถวหรือคอลัมน์\nimport random\n\nprint(\"=\" * 80)\nrows = int(input(\"Enter a number of rows: \"))\ncolumns = int(input(\"Enter a number of columns: \"))\n\nif rows < 1 or columns < 1: # ตรวจสอบขนาดของ Matrix\n    print(\"!!! Rows and columns must be at least 1 !!!\")\n    exit()\n\n# สุ่มค่าจำนวนเต็ม 0-20 สำหรับ Matrix A\nmatrix_a = [[random.randint(0, 20) for _ in range(columns)] for _ in range(rows)]  # สร้าง Matrix แบบสุ่ม\nprint(f\"Original Matrix A [{rows}x{columns}]: {matrix_a}\")\n\n# เลือกการเรียงลำดับ\nsort_by = input(\"Sort matrix by rows or columns? (r/c): \").strip().lower() # รับข้อมูลการเรียงลำดับ\nif sort_by == \"r\": # เรียงลำดับตามแถว\n    # เรียงลำดับตามแถว\n    sorted_matrix = [sorted(row) for row in matrix_a] # เรียงลำดับแต่ละแถวของ Matrix\n    print(f\"Matrix sorted by rows: {sorted_matrix}\")\nelif sort_by == \"c\": # เรียงลำดับตามคอลัมน์\n    # เรียงลำดับตามคอลัมน์\n    transposed = [[matrix_a[j][i] for j in range(rows)] for i in range(columns)] \n    sorted_transposed = [sorted(row) for row in transposed] # เรียงลำดับแต่ละคอลัมน์ของ Matrix\n    sorted_matrix = [[sorted_transposed[i][j] for i in range(columns)] for j in range(rows)]\n    print(f\"Matrix sorted by columns: {sorted_matrix}\")\nelse:\n    print(\"Invalid choice!\")"
    },
    {
        "filename": "คำนวณEigenvaluesและEigenvectors.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการคำนวณ Eigenvalues และ Eigenvectors ของเมทริกซ์ 2x2",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการคำนวณ Eigenvalues และ Eigenvectors ของเมทริกซ์ 2x2\n# แก้ไขการเพิ่มการ import ไลบรารี numpy\nimport numpy as np  # เพิ่มการนำเข้าไลบรารี numpy\n\nprint('*' * 70)\nprint('Eigenvalues and Eigenvectors'.center(70))\nprint('*' * 70)\n\nA = np.array([[4, 2], [1, 3]])  # เมทริกซ์ 2x2 ตัวอย่าง\n\n# คำนวณ Eigenvalues และ Eigenvectors\neigenvalues, eigenvectors = np.linalg.eig(A)\n\nprint(\"Matrix A:\")\nprint(A)\n\nprint(\"\\nEigenvalues:\")\nprint(eigenvalues)\n\nprint(\"\\nEigenvectors:\")\nprint(eigenvectors)\n"
    },
    {
        "filename": "(IX)สร้างรูปทรงสี่เหลี่ยมแบบไดนามิกที่มีข้อความตรงกลาง.py",
        "description": "# โค้ดสร้างสี่เหลี่ยมพร้อมข้อความตรงกลาง",
        "content_snippet": "# โค้ดสร้างสี่เหลี่ยมพร้อมข้อความตรงกลาง\nprint('---------- Drawing squares with a message ----------')\nprint('[To quit the program, press \"0\"]')\nprint(\"-----------------------------------------------------------\")\n\nwhile True:\n    size = int(input(\"Please enter the size (at least 5): \"))\n    message = input(\"Enter a message to center (max 1 less than size): \")\n\n    if size == 0:\n        break\n    elif size >= 5 and len(message) <= size - 2:\n        print(\"#\" * size)\n        for i in range(size - 2):\n            if i == (size - 2) // 2:  # แสดงข้อความตรงกลาง\n                padding = (size - 2 - len(message)) // 2\n                print(\"#\" + \" \" * padding + message + \" \" * padding + \"#\")\n            else:\n                print(\"#\" + \" \" * (size - 2) + \"#\")\n        print(\"#\" * size)\n    else:\n        print(\"Invalid input. Ensure message length < size and size >= 5.\")\n"
    },
    {
        "filename": "ดึงข้อมูล_API_หลายรายการ.py",
        "description": "# โปรแกรมนี้เป็นตัวอย่างการดึงข้อมูลจากหลาย API พร้อมกัน และบันทึกข้อมูลลงไฟล์ JSON",
        "content_snippet": "# โปรแกรมนี้เป็นตัวอย่างการดึงข้อมูลจากหลาย API พร้อมกัน และบันทึกข้อมูลลงไฟล์ JSON\nimport requests\nimport json\n\ndef fetch_multiple_apis(api_urls, output_file):\n    data = {}\n    for name, url in api_urls.items():\n        try:\n            response = requests.get(url)\n            if response.status_code == 200:\n                data[name] = response.json()\n                print(f\"ดึงข้อมูลสำเร็จจาก {name}\")\n            else:\n                print(f\"ข้อผิดพลาดในการดึงข้อมูลจาก {name}: {response.status_code}\")\n        except Exception as e:\n            print(f\"ข้อผิดพลาด: {e}\")\n\n    # บันทึกข้อมูลทั้งหมดลงไฟล์ JSON\n    with open(output_file, 'w', encoding='utf-8') as file:\n        json.dump(data, file, indent=4)\n    print(f\"บันทึกข้อมูลลงไฟล์ {output_file} สำเร็จ\")\n\n# ตัวอย่างการใช้งาน\napi_urls = {\n    \"Todos\": \"https://jsonplaceholder.typicode.com/todos\",\n    \"Posts\": \"https://jsonplaceholder.typicode.com/posts\"\n}\noutput_file = \"combined_data.json\"\nfetch_multiple_apis(api_urls, output_file)"
    },
    {
        "filename": "จัดเรียงและกรองข้อมูล.py",
        "description": "#โปรแกรมจัดเรียงข้อมูลและกรองค่าที่มากกว่าค่ากำหนด",
        "content_snippet": "#โปรแกรมจัดเรียงข้อมูลและกรองค่าที่มากกว่าค่ากำหนด\ndef sort_and_filter(data, threshold):\n    sorted_data = sorted(data)\n    filtered_data = [x for x in sorted_data if x > threshold]\n    return filtered_data\n\n# รับข้อมูลจากผู้ใช้\ndata = list(map(int, input(\"ใส่ข้อมูลตัวเลข (คั่นด้วยช่องว่าง): \").split()))\nthreshold = int(input(\"กรุณาใส่ค่าที่ต้องการกรอง: \"))\n\nresult = sort_and_filter(data, threshold)\nprint(f\"ข้อมูลที่จัดเรียงและกรองแล้ว: {result}\")"
    },
    {
        "filename": "เกมเรียงตัวอักษร.py",
        "description": "# โปรแกรมเกมสับเปลี่ยนคำ (Word Scramble Game)",
        "content_snippet": "# โปรแกรมเกมสับเปลี่ยนคำ (Word Scramble Game)\n#เกมให้ผู้เล่นเรียงตัวอักษรที่ถูกสับเปลี่ยนให้กลับเป็นคำที่ถูกต้อง\nimport random\n\ndef scramble_word(word):\n    word = list(word)\n    random.shuffle(word)\n    return ''.join(word)\n\ndef play_word_scramble_game(word):\n    scrambled = scramble_word(word)\n    print(f\"คำที่สับเปลี่ยน: {scrambled}\")\n    attempts = 3\n    while attempts > 0:\n        guess = input(\"ลองเรียงตัวอักษร: \")\n        if guess == word:\n            print(\"ยินดีด้วย! คุณเรียงถูกต้อง\")\n            return\n        else:\n            attempts -= 1\n            print(f\"ผิด! เหลือโอกาส {attempts} ครั้ง\")\n    print(f\"เสียใจด้วย! คำที่ถูกต้องคือ '{word}'\")\n\n# ตัวอย่างการใช้งาน\nplay_word_scramble_game(\"python\")"
    },
    {
        "filename": "(XI)เพิ่มโหมดเกม(สุ่มตัวเลขให้ผู้ใช้เดาRomanNumeral).py",
        "description": "# โปรแกรมแปลงเลขฐาน 10 เป็นเลขโรมัน และเลขโรมันเป็นเลขฐาน 10",
        "content_snippet": "# โปรแกรมแปลงเลขฐาน 10 เป็นเลขโรมัน และเลขโรมันเป็นเลขฐาน 10\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\nimport random\n\ndef roman_guessing_game():\n    \"\"\"เกมเดา Roman Numeral\"\"\"\n    number = random.randint(1, 100)\n    roman = int_to_roman(number)\n    print(\"Welcome to the Roman Numeral Guessing Game!\")\n    print(f\"Roman Numeral: {roman}\")\n    \n    attempts = 3\n    for attempt in range(1, attempts + 1):\n        try:\n            guess = int(input(f\"Attempt {attempt}/{attempts}: Guess the number: \"))\n            if guess == number:\n                print(\"Congratulations! Your guess is correct.\")\n                return\n            elif guess < number:\n                print(\"Hint: The number is higher.\")\n            else:\n                print(\"Hint: The number is lower.\")\n        except ValueError:\n            print(\"Please enter a valid number.\")\n    \n    print(f\"Sorry, you've used all attempts. The correct number was {number}.\")\n\n# โหมดเกม\nwhile True:\n    print(\"\\nRoman Numeral Converter (Game Mode)\")\n    print(\"1. Play Roman Numeral Guessing Game\")\n    print(\"2. Exit\")\n    \n    choice = input(\"Choose an option (1/2): \")\n    \n    if choice == \"1\":\n        roman_guessing_game()\n    \n    elif choice == \"2\":\n        print(\"Exiting the converter. Goodbye!\")\n        break\n    \n    else:\n        print(\"Invalid option. Please choose again.\")\n"
    },
    {
        "filename": "สร้างกราฟพีชคณิตเชิงขั้ว.py",
        "description": "#โปรแกรมสร้างกราฟขั้วเพื่อแสดงข้อมูลในรูปแบบเรขาคณิตขั้ว",
        "content_snippet": "#โปรแกรมสร้างกราฟขั้วเพื่อแสดงข้อมูลในรูปแบบเรขาคณิตขั้ว\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef plot_polar():\n    theta = np.linspace(0, 2 * np.pi, 100)\n    r = 1 + np.sin(3 * theta)\n    plt.polar(theta, r)\n    plt.title(\"กราฟพีชคณิตเชิงขั้ว\")\n    plt.show()\n\n# ตัวอย่างการใช้งาน\nplot_polar()"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับด้านพร้อมตัวอักษรสุ่มในแต่ละตำแหน่ง.py",
        "description": "# Drawing a reversed right triangle with random letters",
        "content_snippet": "# Drawing a reversed right triangle with random letters\nimport random\nimport string\n\nwhile True:\n    height = int(input(\"Enter the height of the triangle (0 to quit): \"))\n    if height == 0:\n        break\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        stars = ''.join(random.choice(string.ascii_letters) for _ in range(i))\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "ตรวจสอบจำนวนเฉพาะ.py",
        "description": "#โปรแกรมตรวจสอบว่าตัวเลขที่ป้อนเป็นจำนวนเฉพาะหรือไม่",
        "content_snippet": "#โปรแกรมตรวจสอบว่าตัวเลขที่ป้อนเป็นจำนวนเฉพาะหรือไม่\ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n# รับข้อมูลจากผู้ใช้\nnumber = int(input(\"กรุณาใส่ตัวเลขที่ต้องการตรวจสอบ: \"))\nif is_prime(number):\n    print(f\"{number} เป็นจำนวนเฉพาะ\")\nelse:\n    print(f\"{number} ไม่ใช่จำนวนเฉพาะ\")"
    },
    {
        "filename": "(8)เพิ่มการสร้าง Matrix Identity (I).py",
        "description": "# โปรแกรมสำหรับสร้าง Identity Matrix",
        "content_snippet": "# โปรแกรมสำหรับสร้าง Identity Matrix\nprint(\"=\" * 80)\nsize = int(input(\"Enter the size of the identity matrix (e.g., 2 or 3): \"))\n\nif size > 3:  # ตรวจสอบว่าไม่เกินขนาดที่กำหนด\n    print(\"!!! Error: Maximum supported size for identity matrix is 3 !!!\\n\")\nelse:\n    # สร้าง Identity Matrix โดยให้ตำแหน่งที่ i == j เป็น 1 และตำแหน่งอื่นเป็น 0\n    identity_matrix = [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n    \n    # แสดงผลลัพธ์ของ Identity Matrix\n    print(f\"Identity Matrix [{size}x{size}]:\")\n    for row in identity_matrix:\n        print(row)\n    print(\"=\" * 80 + \"\\n\")"
    },
    {
        "filename": "การคำนวณเลข_Fibonacci.py",
        "description": "#โปรแกรมคำนวณลำดับ Fibonacci สำหรับจำนวน n ที่ผู้ใช้ป้อน",
        "content_snippet": "#โปรแกรมคำนวณลำดับ Fibonacci สำหรับจำนวน n ที่ผู้ใช้ป้อน\ndef fibonacci(n):\n    if n <= 0:\n        return []\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\n# รับค่าจากผู้ใช้\nn = int(input(\"ใส่จำนวนตัวเลขในลำดับ Fibonacci: \"))\nresult = fibonacci(n)\nprint(f\"ลำดับ Fibonacci {n} ตัวแรกคือ: {result}\")\n"
    },
    {
        "filename": "(3)เพิ่มตัวเลือกให้ผู้ใช้เลือกวาดสามเหลี่ยมแบบปกติหรือกลับด้าน.py",
        "description": "# Drawing a right or reversed right triangle based on user choice",
        "content_snippet": "# Drawing a right or reversed right triangle based on user choice\nwhile True:\n    height = int(input(\"Enter the height of the triangle (0 to quit): \"))\n    if height == 0:\n        break\n    direction = input(\"Draw normal or reversed triangle? (n/r): \").strip().lower()\n    if direction == 'r':\n        for i in range(1, height + 1):\n            spaces = ' ' * (height - i)\n            stars = '*' * i\n            print(spaces + stars)\n    elif direction == 'n':\n        for i in range(height, 0, -1):\n            stars = '*' * i\n            print(stars)\n    print()"
    },
    {
        "filename": "(XII)เพิ่มระบบValidationให้RomanNumerals.py",
        "description": "# โปรแกรมแปลงตัวเลขเป็นเลขโรมัน และเลขโรมันเป็นตัวเลข โดยมีการตรวจสอบความถูกต้องของเลขโรมัน",
        "content_snippet": "# โปรแกรมแปลงตัวเลขเป็นเลขโรมัน และเลขโรมันเป็นตัวเลข โดยมีการตรวจสอบความถูกต้องของเลขโรมัน\ndef int_to_roman(number):\n    if number <= 0 or number > 1000000:\n        return \"Number out of range (must be 1 - 1,000,000)\"\n    \n    roman_numerals = [\n        ('M̅', 1000000), ('C̅M̅', 900000), ('D̅', 500000), ('C̅D̅', 400000),\n        ('C̅', 100000), ('X̅C̅', 90000), ('L̅', 50000), ('X̅L̅', 40000),\n        ('X̅', 10000), ('I̅X̅', 9000), ('V̅', 5000), ('I̅V̅', 4000),\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4),\n        ('I', 1)\n    ]\n\n    result = \"\"\n    for roman, value in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n\ndef roman_to_int(roman):\n    roman_numerals = {\n        'M̅': 1000000, 'C̅M̅': 900000, 'D̅': 500000, 'C̅D̅': 400000,\n        'C̅': 100000, 'X̅C̅': 90000, 'L̅': 50000, 'X̅L̅': 40000,\n        'X̅': 10000, 'I̅X̅': 9000, 'V̅': 5000, 'I̅V̅': 4000,\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n        'I': 1\n    }\n    \n    index = 0\n    result = 0\n    while index < len(roman):\n        # Check for two-character symbols\n        if index + 1 < len(roman) and roman[index:index + 2] in roman_numerals:\n            result += roman_numerals[roman[index:index + 2]]\n            index += 2\n        # Check for one-character symbols\n        elif roman[index] in roman_numerals:\n            result += roman_numerals[roman[index]]\n            index += 1\n        else:\n            return \"Invalid Roman numeral\"\n    return result\n\ndef validate_roman_numeral(roman):\n    \"\"\"ตรวจสอบว่า Roman Numeral ถูกต้องหรือไม่\"\"\"\n    valid_roman_characters = {'I', 'V', 'X', 'L', 'C', 'D', 'M', '̅'}\n    for char in roman:\n        if char not in valid_roman_characters:\n            return False\n    return True\n\n# Interactive conversion loop with validation\nwhile True:\n    print(\"\\nRoman Numeral Converter (With Validation)\")\n    print(\"1. Convert number to Roman numeral\")\n    print(\"2. Convert Roman numeral to number (with validation)\")\n    print(\"3. Exit\")\n    \n    choice = input(\"Choose an option (1/2/3): \")\n    \n    if choice == \"1\":\n        try:\n            number = int(input(\"Enter a number (1 - 1,000,000): \"))\n            print(f\"The Roman numeral of {number} is: {int_to_roman(number)}\")\n        except ValueError:\n            print(\"Please enter a valid number.\")\n    \n    elif choice == \"2\":\n        roman = input(\"Enter a Roman numeral: \").upper()\n        if validate_roman_numeral(roman):\n            result = roman_to_int(roman)\n            print(f\"The number of Roman numeral '{roman}' is: {result}\")\n        else:\n            print(\"Invalid Roman numeral! Please enter a valid one.\")\n    \n    elif choice == \"3\":\n        print(\"Exiting the converter. Goodbye!\")\n        break\n    \n    else:\n        print(\"Invalid option. Please choose again.\")\n"
    },
    {
        "filename": "เกมสุ่มตัวเลข(หลายระดับความยาก).py",
        "description": "# โปรแกรมทายตัวเลข",
        "content_snippet": "# โปรแกรมทายตัวเลข\n# ให้ผู้ใช้เลือกระดับความยาก (ง่าย/ปานกลาง/ยาก) และทายตัวเลขที่สุ่มไว้\nimport random\n\ndef play_guessing_game(level):\n    if level == 'ง่าย':\n        number = random.randint(1, 10)\n        attempts = 5\n    elif level == 'ปานกลาง':\n        number = random.randint(1, 50)\n        attempts = 7\n    elif level == 'ยาก':\n        number = random.randint(1, 100)\n        attempts = 10\n    else:\n        print(\"ระดับความยากไม่ถูกต้อง\")\n        return\n\n    print(f\"เริ่มเกม! คุณมี {attempts} ครั้งในการทายตัวเลข\")\n    while attempts > 0:\n        guess = int(input(\"ทายตัวเลขของคุณ: \"))\n        if guess < number:\n            print(\"ตัวเลขต่ำเกินไป!\")\n        elif guess > number:\n            print(\"ตัวเลขสูงเกินไป!\")\n        else:\n            print(f\"ยินดีด้วย! คุณทายถูกต้อง ตัวเลขคือ {number}\")\n            return\n        attempts -= 1\n        print(f\"เหลือโอกาส {attempts} ครั้ง\")\n    \n    print(f\"เสียใจด้วย คุณแพ้! ตัวเลขคือ {number}\")\n\n# เลือกระดับความยากและเล่นเกม\ndifficulty = input(\"เลือกระดับความยาก (ง่าย/ปานกลาง/ยาก): \")\nplay_guessing_game(difficulty)"
    },
    {
        "filename": "(6)เพิ่มระบบเก็บ ciphertext ลงในไฟล์ และอ่านไฟล์เพื่อถอดรหัส.py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR\ndef save_to_file(filename, content):\n    \"\"\"บันทึกข้อความลงในไฟล์\"\"\"\n    with open(filename, \"w\") as file:\n        file.write(content)\n\ndef read_from_file(filename):\n    \"\"\"อ่านข้อความจากไฟล์\"\"\"\n    with open(filename, \"r\") as file:\n        return file.read()\n\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef encrypt(plaintext, secret_key):\n    \"\"\"เข้ารหัสข้อความด้วย XOR\"\"\"\n    ciphertext = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n    return ciphertext\n\ndef decrypt(ciphertext, secret_key):\n    \"\"\"ถอดรหัสข้อความด้วย XOR\"\"\"\n    plaintext = ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(ciphertext, secret_key))\n    return plaintext\n\n# Main Program\nprint(\"------------- Encryption and Decryption Program -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\nsecret_key = input(\"Enter your secret key: \")\n\nadjusted_key = adjust_key_length(plaintext, secret_key)\nciphertext = encrypt(plaintext, adjusted_key)\n\nfilename = \"ciphertext.txt\"\nsave_to_file(filename, ciphertext)  # บันทึก Ciphertext ลงไฟล์\nprint(f\"Encrypted ciphertext saved to {filename}.\")\n\nciphertext_from_file = read_from_file(filename)  # อ่าน Ciphertext จากไฟล์\ndecrypted_text = decrypt(ciphertext_from_file, adjusted_key)\nprint(f\"The decryption results: {decrypted_text}\\n\")"
    },
    {
        "filename": "ลบอักษรซ้ำอักขระพิเศษได้.py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการหาตัวอักษรที่ซ้ำกัน และ ตัวอักษรที่ไม่ซ้ำกัน ระหว่างสองข้อความที่ผู้ใช้ป้อนเข้ามา",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการหาตัวอักษรที่ซ้ำกัน และ ตัวอักษรที่ไม่ซ้ำกัน ระหว่างสองข้อความที่ผู้ใช้ป้อนเข้ามา\n# โค้ดนี้เพิ่มฟังก์ชัน clean_input() ที่จะ ลบตัวอักษรซ้ำ และ เอาช่องว่างออก จากข้อความที่ผู้ใช้ป้อน \n# (ใช้ set() เพื่อทำให้ข้อความไม่ซ้ำ) และรองรับการใช้งาน Unicode เพื่อให้สามารถใช้อักขระพิเศษหรือภาษาต่างประเทศได้\ndef clean_input(string):\n    # เอาช่องว่างออก และลบตัวอักษรซ้ำ\n    return \"\".join(set(string.strip()))\n\n# รับข้อมูลจากผู้ใช้ พร้อมทำความสะอาด String\nuser_a = clean_input(input('Enter string A (Unicode supported): '))\nuser_b = clean_input(input('Enter string B (Unicode supported): '))\n\nset_a = set(user_a)\nset_b = set(user_b)\n\nprint('--------------------------------------------------')\nprint(f'Cleaned A: {user_a}')\nprint(f'Cleaned B: {user_b}')\nprint(f'Characters common in both: {set_a & set_b}')\nprint(f'Characters unique to A or B: {set_a ^ set_b}')\nprint(f'Total unique characters: {set_a | set_b}')"
    },
    {
        "filename": "(XIII)เพิ่มโหมดยากตัวเลขสุ่มใหม่ทุกครั้งหลังเดาผิด.py",
        "description": "# โปรแกรมทายเลขที่สุ่มมา โดยมีจำนวนครั้งในการทายเป็นจำนวนจำกัด และมีการแจ้งเตือนว่าเลขที่ทายมากไปหรือน้อยไป",
        "content_snippet": "# โปรแกรมทายเลขที่สุ่มมา โดยมีจำนวนครั้งในการทายเป็นจำนวนจำกัด และมีการแจ้งเตือนว่าเลขที่ทายมากไปหรือน้อยไป\nimport random\n\ndef dynamic_guessing_game():\n    low, high = 1, 99\n    attempts = 5\n\n    print(\"***** Welcome to the Dynamic Guessing Game *****\")\n    random_number = random.randint(low, high)  # สุ่มตัวเลขเริ่มต้น\n\n    for attempt in range(attempts):\n        print(f\"{'-'*21} round{attempt + 1} {'-'*21}\")\n        print(f\"Enter an integer from {low} to {high} : \", end=\"\")\n        \n        input_number = int(input())\n        \n        if input_number == random_number:\n            print(\"#\" * 50)\n            print(\"   *** CONGRATULATION *** Your guess is correct  \")\n            print(\"#\" * 50)\n            return\n        else:\n            print(\"Wrong guess! A new secret number has been generated.\")\n            random_number = random.randint(low, high)  # สุ่มตัวเลขใหม่ทุกครั้ง\n            if input_number < random_number:\n                print(\"Hint: Your guess was too low.\")\n            else:\n                print(\"Hint: Your guess was too high.\")\n\n    print(\"#\" * 50)\n    print(\"You have run out of attempts!\")\n    print(\"#\" * 50)\n\ndynamic_guessing_game()\n"
    },
    {
        "filename": "แก้สมการกำลังสอง.py",
        "description": "#โปรแกรมแก้สมการกำลังสองและหาคำตอบที่เป็นรากของสมการ",
        "content_snippet": "#โปรแกรมแก้สมการกำลังสองและหาคำตอบที่เป็นรากของสมการ\nimport math\n\ndef solve_quadratic(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b / (2*a)\n        return root, None\n    else:\n        return None, None\n\n# รับข้อมูลจากผู้ใช้\na = float(input(\"ใส่ค่าของ a: \"))\nb = float(input(\"ใส่ค่าของ b: \"))\nc = float(input(\"ใส่ค่าของ c: \"))\n\nroots = solve_quadratic(a, b, c)\nif roots[0] is not None:\n    if roots[1] is not None:\n        print(f\"รากของสมการคือ {roots[0]:.2f} และ {roots[1]:.2f}\")\n    else:\n        print(f\"รากของสมการคือ {roots[0]:.2f}\")\nelse:\n    print(\"สมการไม่มีคำตอบในจำนวนจริง\")"
    },
    {
        "filename": "(7)โปรแกรมรับค่าชื่อวิชา.py",
        "description": "# โปรแกรมหาค่าเฉลี่ยคะแนนและจำนวนนักเรียนในแต่ละเกรดของรายวิชาที่เลือก",
        "content_snippet": "# โปรแกรมหาค่าเฉลี่ยคะแนนและจำนวนนักเรียนในแต่ละเกรดของรายวิชาที่เลือก\nfrom module_exam import Info_Dict, grading\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nsubject = input(\"Enter your subject [Mathematics, Physics, English, Chemistry, Computer]: \")\n\nif subject not in valid_subjects:\n    print(\"----------------------------------------------------------\")\n    print(\"!!!   Subject Error   !!!\")\n    print(\"----------------------------------------------------------\\n\")\nelse:\n    print(\"----------------------------------------------------------\")\n    grades_count = {'A': 0, 'B+': 0, 'B': 0, 'C+': 0, 'C': 0, 'D+': 0, 'D': 0, 'F': 0}\n    total_score = 0\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        grade = grading(subject, score)\n        grades_count[grade] += 1\n        total_score += score\n\n    total_students = len(Info_Dict)\n    print(f\"{'Grade':<10}{'A number of students (Percentage)':<30}\")\n    for grade, count in grades_count.items():\n        percentage = (count / total_students) * 100\n        print(f\"  {grade:<17}{count:>2} ({percentage:>5.2f})\")\n\n    average_score = total_score / total_students\n    print(\"----------------------------------------------------------\")\n    print(f\"  Average Score = {average_score:.2f}\")\n    print(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "ตรวจสอบความแข็งแรงของรหัสผ่าน.py",
        "description": "#โปรแกรมประเมินระดับความแข็งแรงของรหัสผ่านที่ป้อน",
        "content_snippet": "#โปรแกรมประเมินระดับความแข็งแรงของรหัสผ่านที่ป้อน\ndef password_strength(password):\n    length = len(password) >= 8\n    has_upper = any(char.isupper() for char in password)\n    has_lower = any(char.islower() for char in password)\n    has_digit = any(char.isdigit() for char in password)\n    has_special = any(char in \"!@#$%^&*()-_+=\" for char in password)\n\n    if all([length, has_upper, has_lower, has_digit, has_special]):\n        return \"แข็งแรงมาก\"\n    elif length and (has_upper or has_lower) and (has_digit or has_special):\n        return \"ปานกลาง\"\n    else:\n        return \"อ่อนแอ\"\n\n# รับข้อมูลจากผู้ใช้\npassword = input(\"กรุณาใส่รหัสผ่าน: \")\nstrength = password_strength(password)\nprint(f\"ระดับความแข็งแรงของรหัสผ่าน: {strength}\")"
    },
    {
        "filename": "เกมสุ่มคำศัพท์.py",
        "description": "# โปรแกรมเกมเดาคำศัพท์",
        "content_snippet": "# โปรแกรมเกมเดาคำศัพท์\n# โดยรับคำศัพท์จากรายการและให้ผู้เล่นเดาคำศัพท์นั้นๆ\nimport random\n\ndef play_word_guessing_game(words):\n    # สุ่มเลือกคำจากรายการ\n    word_to_guess = random.choice(words).lower()\n    guessed_word = ['_' for _ in word_to_guess]\n    attempts = 6  # จำนวนโอกาสที่ให้เดา\n\n    print(\"เริ่มเกมเดาคำศัพท์! คุณมีโอกาส 6 ครั้ง\")\n    while attempts > 0:\n        print(\"คำปัจจุบัน:\", ' '.join(guessed_word))\n        guess = input(\"ใส่ตัวอักษร: \").lower()\n\n        if guess in word_to_guess:\n            for i, char in enumerate(word_to_guess):\n                if char == guess:\n                    guessed_word[i] = guess\n            if '_' not in guessed_word:\n                print(f\"ยินดีด้วย! คุณเดาคำว่า '{word_to_guess}' ได้สำเร็จ\")\n                break\n        else:\n            attempts -= 1\n            print(f\"ผิด! เหลือโอกาส {attempts} ครั้ง\")\n        \n        if attempts == 0:\n            print(f\"เกมจบ! คำที่ต้องเดาคือ '{word_to_guess}'\")\n\n# เรียกใช้งาน\nword_list = [\"Python\", \"Programming\", \"Game\", \"Learning\", \"AI\"]\nplay_word_guessing_game(word_list)\n"
    },
    {
        "filename": "(XIV)Pascal Triangle.py",
        "description": "# โปรแกรมสร้าง Pascal Triangle โดยใช้ Recursive Function",
        "content_snippet": "# โปรแกรมสร้าง Pascal Triangle โดยใช้ Recursive Function\ndef pascal_triangle(input_number):\n    if input_number == 0:\n        return [1]\n\n    else:\n        previous_row = pascal_triangle(input_number - 1) # เรียกใช้ฟังก์ชันเดิม\n        current_row = [1] # สร้างแถวใหม่\n\n        for i in range(1, len(previous_row)): # วนลูปเพื่อสร้างตัวเลขใหม่\n            current_row.append(previous_row[i - 1] + previous_row[i]) # สร้างตัวเลขใหม่จากผลรวม\n\n        current_row.append(1) # เพิ่มตัวเลขสุดท้าย\n        return current_row # ส่งค่ากลับ\n\ninput_number = int(input(\"Please Enter Degree of Pascal Triangle: \"))\nprint(f\"{pascal_triangle(input_number)}\\n\")"
    },
    {
        "filename": "(7)เพิ่มการวิเคราะห์ค่าเฉลี่ยของเกรดสำหรับทุกวิชา.py",
        "description": "# โปรแกรมแสดงค่าเฉลี่ยของคะแนนของนักเรียนในแต่ละวิชา",
        "content_snippet": "# โปรแกรมแสดงค่าเฉลี่ยของคะแนนของนักเรียนในแต่ละวิชา\nfrom module_exam import Info_Dict, grading\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nfor subject in valid_subjects:\n    grades_count = {'A': 0, 'B+': 0, 'B': 0, 'C+': 0, 'C': 0, 'D+': 0, 'D': 0, 'F': 0}\n    total_score = 0\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        grade = grading(subject, score)\n        grades_count[grade] += 1\n        total_score += score\n\n    average_score = total_score / len(Info_Dict)\n    print(f\"{subject}: Average Score = {average_score:.2f}\")\nprint(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "(X)เพิ่มข้อกำหนดตัวอักษรพิเศษ.py",
        "description": "# โปรแกรมตรวจสอบความแข็งแรงของรหัสผ่าน",
        "content_snippet": "# โปรแกรมตรวจสอบความแข็งแรงของรหัสผ่าน\nimport re\n\nwhile True:\n    password = input(\"Set your password:\")\n\n    # Check password length\n    if 8 <= len(password) <= 16:\n        # Check if password meets all criteria\n        if (re.search(r'[A-Z]', password) and  # At least one uppercase letter\n            re.search(r'[a-z]', password) and  # At least one lowercase letter\n            re.search(r'[0-9]', password) and  # At least one digit\n            re.search(r'[!@#$%^&*]', password)):  # At least one special character\n            print(\":-) Your password is strong (-: \")\n            break\n        \n        # Check missing criteria\n        missing_criteria = []\n        if not re.search(r'[A-Z]', password):\n            missing_criteria.append(\"an uppercase letter\")\n        if not re.search(r'[a-z]', password):\n            missing_criteria.append(\"a lowercase letter\")\n        if not re.search(r'[0-9]', password):\n            missing_criteria.append(\"a digit\")\n        if not re.search(r'[!@#$%^&*]', password):\n            missing_criteria.append(\"a special character\")\n\n        print(f\"!!!ERROR!!! Your password is missing {', '.join(missing_criteria)}\\n\")\n\n    elif len(password) < 8:\n        print(\"!!!ERROR!!! The password must contain at least 8 characters\\n\")\n    elif len(password) > 16:\n        print(\"!!!ERROR!!! The password must not contain more than 16 characters\\n\")\n"
    },
    {
        "filename": "สรุปสถิติข้อมูล.py",
        "description": "#โปรแกรมคำนวณค่าเฉลี่ย มัธยฐาน และฐานนิยมของชุดข้อมูล",
        "content_snippet": "#โปรแกรมคำนวณค่าเฉลี่ย มัธยฐาน และฐานนิยมของชุดข้อมูล\nimport statistics\n\ndef calculate_statistics(data):\n    mean = statistics.mean(data)\n    median = statistics.median(data)\n    mode = statistics.mode(data)\n    return mean, median, mode\n\n# รับข้อมูลจากผู้ใช้\ndata = list(map(float, input(\"ใส่ข้อมูลตัวเลข (คั่นด้วยช่องว่าง): \").split()))\nmean, median, mode = calculate_statistics(data)\nprint(f\"ค่าเฉลี่ย: {mean:.2f}, มัธยฐาน: {median:.2f}, ฐานนิยม: {mode:.2f}\")"
    },
    {
        "filename": "(5)เพิ่มการคำนวณเงินทอนแสดงเป็นจำนวนครั้งที่ต้องทอน (สำหรับคนทอนมือใหม่).py",
        "description": "# โปรแกรมคำนวณจำนวนขั้นตอนที่ต้องใช้ในการทอนเงิน",
        "content_snippet": "# โปรแกรมคำนวณจำนวนขั้นตอนที่ต้องใช้ในการทอนเงิน\n# Program to display the number of steps needed for making change\ndef calculate_change_steps(total_price, payment):\n    denominations = {\n        \"The 500-$Baht Banknote\": 500,\n        \"The 100-$Baht Banknote\": 100,\n        \"The 50-$Baht Banknote\": 50,\n        \"The 20-$Baht Banknote\": 20,\n        \"The 10-$Baht Coin\": 10,\n        \"The 5-$Baht Coin\": 5,\n        \"The 2-$Baht Coin\": 2,\n        \"The 1-$Baht Coin\": 1,\n    }\n\n    change = payment - total_price\n    steps = 0  # นับจำนวนครั้งที่ทอน\n\n    if change < 0:\n        return \"!!! Incorrect payment !!!\"\n    elif change == 0:\n        return \"Complete payment\"\n    else:\n        result = []\n        for denom, value in denominations.items():\n            count = change // value\n            if count > 0:\n                steps += count\n                result.append(f\"{denom} = {count} Piece(s)\")\n            change %= value\n        result.append(f\"Total steps needed: {steps}\")\n        return \"\\n\".join(result)\n\nwhile True:\n    print(\"----------------------------------------------------------\")\n    total_price = int(input(\"The total price of products: \"))\n    payment = int(input(\"Customer payment: \"))\n    print(\"----------------------------------------------------------\")\n\n    if payment == 0:\n        print(\"Exiting the program.\")\n        break\n\n    result = calculate_change_steps(total_price, payment)\n    print(result)\n    print(\"----------------------------------------------------------\")"
    },
    {
        "filename": "(3)วาดสามเหลี่ยมกลับด้านด้วยตัวอักษรที่เพิ่มขึ้น.py",
        "description": "# Drawing a reversed right triangle with increasing letters in each row",
        "content_snippet": "# Drawing a reversed right triangle with increasing letters in each row\nwhile True:\n    height = int(input(\"Enter the height of the triangle (0 to quit): \"))\n    if height == 0:\n        break\n    for i in range(1, height + 1):\n        spaces = ' ' * (height - i)\n        stars = ''.join(chr(65 + (j % 26)) for j in range(i))\n        print(spaces + stars)\n    print()"
    },
    {
        "filename": "หาจำนวนเฉพาะ.py",
        "description": "# โปรแกรมตรวจสอบว่าเลขที่รับมาเป็นจำนวนเฉพาะหรือไม่",
        "content_snippet": "# โปรแกรมตรวจสอบว่าเลขที่รับมาเป็นจำนวนเฉพาะหรือไม่\ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n# รับค่าจากผู้ใช้\nnum = int(input(\"ใส่ตัวเลขที่ต้องการตรวจสอบ: \"))\nif is_prime(num):\n    print(f\"{num} เป็นจำนวนเฉพาะ\")\nelse:\n    print(f\"{num} ไม่ใช่จำนวนเฉพาะ\")\n"
    },
    {
        "filename": "สร้างรหัสผ่านแบบสุ่ม.py",
        "description": "#โปรแกรมสร้างรหัสผ่านที่ปลอดภัยและมีความยาวตามที่กำหนด",
        "content_snippet": "#โปรแกรมสร้างรหัสผ่านที่ปลอดภัยและมีความยาวตามที่กำหนด\nimport random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\n# ตัวอย่างการใช้งาน\nlength = int(input(\"กรุณาใส่ความยาวของรหัสผ่าน: \"))\npassword = generate_password(length)\nprint(f\"รหัสผ่านที่สร้างคือ: {password}\")"
    },
    {
        "filename": "(6) เพิ่มการเข้ารหัสด้วย XOR และเลื่อนอักขระ (Caesar Cipher).py",
        "description": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR และ Caesar Cipher",
        "content_snippet": "# โปรแกรมเข้ารหัสและถอดรหัสข้อความด้วย XOR และ Caesar Cipher\ndef adjust_key_length(plaintext, secret_key):\n    \"\"\"ปรับความยาวของ Secret Key ให้เท่ากับ Plaintext\"\"\"\n    if len(secret_key) > len(plaintext):\n        return secret_key[:len(plaintext)]\n    else:\n        repeat_times = len(plaintext) // len(secret_key) + 1\n        return (secret_key * repeat_times)[:len(plaintext)]\n\ndef caesar_cipher(text, shift):\n    \"\"\"เข้ารหัสและถอดรหัสด้วย Caesar Cipher\"\"\"\n    return ''.join(chr((ord(c) + shift) % 256) for c in text)\n\ndef encrypt(plaintext, secret_key, shift=3):\n    \"\"\"เข้ารหัสข้อความด้วย XOR และ Caesar Cipher\"\"\"\n    xor_cipher = ''.join(chr(ord(p) ^ ord(k)) for p, k in zip(plaintext, secret_key))\n    return caesar_cipher(xor_cipher, shift)\n\ndef decrypt(ciphertext, secret_key, shift=3):\n    \"\"\"ถอดรหัสข้อความด้วย Caesar Cipher และ XOR\"\"\"\n    shifted_text = caesar_cipher(ciphertext, -shift)\n    return ''.join(chr(ord(c) ^ ord(k)) for c, k in zip(shifted_text, secret_key))\n\n# Main Program\nprint(\"------------- Encryption and Decryption Program with Caesar Cipher -------------\")\n\nplaintext = input(\"Enter your plaintext: \")\nsecret_key = input(\"Enter your secret key: \")\nshift = int(input(\"Enter the Caesar Cipher shift value: \"))\n\nadjusted_key = adjust_key_length(plaintext, secret_key)\nciphertext = encrypt(plaintext, adjusted_key, shift)\nprint(f\"The encrypted ciphertext: {ciphertext}\")\n\ndecrypted_text = decrypt(ciphertext, adjusted_key, shift)\nprint(f\"The decryption results: {decrypted_text}\\n\")"
    },
    {
        "filename": "(7)เพิ่มการแสดงผลในรูปแบบกราฟแท่ง (Bar Chart).py",
        "description": "# โปรแกรมแสดงกราฟแท่งแสดงการกระจายของเกรดของนักเรียนในรายวิชาที่เลือก",
        "content_snippet": "# โปรแกรมแสดงกราฟแท่งแสดงการกระจายของเกรดของนักเรียนในรายวิชาที่เลือก\nfrom module_exam import Info_Dict, grading\nimport matplotlib.pyplot as plt\n\n# รายวิชาที่มีในระบบ\nvalid_subjects = ['Mathematics', 'Physics', 'English', 'Chemistry', 'Computer']\n\nprint(\"----------------------------------------------------------\")\nsubject = input(\"Enter your subject [Mathematics, Physics, English, Chemistry, Computer]: \")\n\nif subject not in valid_subjects:\n    print(\"----------------------------------------------------------\")\n    print(\"!!!   Subject Error   !!!\")\n    print(\"----------------------------------------------------------\\n\")\nelse:\n    print(\"----------------------------------------------------------\")\n    grades_count = {'A': 0, 'B+': 0, 'B': 0, 'C+': 0, 'C': 0, 'D+': 0, 'D': 0, 'F': 0}\n\n    for student_id, scores in Info_Dict.items():\n        score = scores[subject]\n        grade = grading(subject, score)\n        grades_count[grade] += 1\n\n    grades = list(grades_count.keys())\n    counts = list(grades_count.values())\n\n    plt.bar(grades, counts, color='blue')\n    plt.title(f\"Grade Distribution for {subject}\")\n    plt.xlabel(\"Grades\")\n    plt.ylabel(\"Number of Students\")\n    plt.show()\n\n    print(\"----------------------------------------------------------\\n\")"
    },
    {
        "filename": "(VIII)สร้างกราฟด้วยmatplotlib.py",
        "description": "# โปรแกรมแสดงกราฟแท่งและเส้นด้วย matplotlib",
        "content_snippet": "# โปรแกรมแสดงกราฟแท่งและเส้นด้วย matplotlib\nimport matplotlib.pyplot as plt\n\ndata_game = ['a', 1, 9, 4.8, 'b', 3, 2, 3.2, 'c', 3, 2, 3.2, 'd', 2, 4, 4.3, \n            'e', 1, 12, 6.4, 'f', 4, 2, 4.3, 'g', 2, 3, 3.2, 'h', 4, 2, 4.3, \n            'i', 1, 9, 4.8, 'j', 8, 1, 4.3, 'k', 5, 1, 2.7, 'l', 1, 4, 2.1, \n            'm', 3, 2, 3.2, 'n', 1, 6, 3.2, 'o', 1, 8, 4.3, 'p', 3, 2, 3.2, \n            'q', 10, 1, 5.3, 'r', 1, 6, 3.2, 's', 1, 4, 2.1, 't', 1, 6, 3.2, \n            'u', 1, 4, 2.1, 'v', 4, 2, 4.3, 'w', 4, 2, 4.3, 'x', 8, 1, 4.3, \n            'y', 4, 2, 4.3, 'z', 10, 1, 5.3]\n\n# แบ่งข้อมูลออกเป็น sublists (เหมือนเดิม)\nsublists = [data_game[i:i+4] for i in range(0, len(data_game), 4)]\n\n# ดึงข้อมูลตัวอักษร, คะแนน, จำนวน และอัตราส่วน\nletters = [sublist[0] for sublist in sublists]\npoints = [sublist[1] for sublist in sublists]\namounts = [sublist[2] for sublist in sublists]\nratios = [sublist[3] for sublist in sublists]\n\n# สร้างกราฟแท่งแสดงคะแนน\nplt.figure(figsize=(10, 6))\nplt.bar(letters, points, color='skyblue', label='Points')\nplt.xlabel('Letters')\nplt.ylabel('Points')\nplt.title('Points per Letter')\nplt.legend()\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.show()\n\n# สร้างกราฟเส้นแสดงอัตราส่วน\nplt.figure(figsize=(10, 6))\nplt.plot(letters, ratios, marker='o', color='orange', label='Ratios')\nplt.xlabel('Letters')\nplt.ylabel('Ratios')\nplt.title('Ratios per Letter')\nplt.legend()\nplt.grid(alpha=0.7)\nplt.show()\n"
    },
    {
        "filename": "(XV)เพิ่มการสุ่มสลับลำดับตัวอักษรหลังเข้ารหัส.py",
        "description": "# โปรแกรมที่ใช้ในการเข้ารหัสและถอดรหัสข้อความด้วยวิธี Caesar Cipher และใช้ Base64 เป็นวิธีการเข้ารหัสข้อความที่เข้ารหัสแล้ว",
        "content_snippet": "# โปรแกรมที่ใช้ในการเข้ารหัสและถอดรหัสข้อความด้วยวิธี Caesar Cipher และใช้ Base64 เป็นวิธีการเข้ารหัสข้อความที่เข้ารหัสแล้ว\nimport base64\n\ndef secret_password(text, key):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift_base = ord('A') if char.isupper() else ord('a')\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base)\n            result += shifted_char\n        else:\n            raise ValueError(\"Error!!!! Input contains invalid characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabet Only): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    # ขั้นตอนการเข้ารหัส\n    encrypted_text = secret_password(plaintext, key)\n    \n    # แปลงข้อความที่เข้ารหัสไปเป็น Base64\n    base64_encoded = base64.b64encode(encrypted_text.encode()).decode() # แปลงข้อความที่เข้ารหัสไปเป็น Base64\n    print(\"The encrypted ciphertext (Base64):\", base64_encoded) # แสดงข้อความที่ถูกเข้ารหัสแล้ว\n\n    # ถอดรหัสจาก Base64 ก่อน\n    base64_decoded = base64.b64decode(base64_encoded).decode() # ถอดรหัสจาก Base64\n\n    # ถอดรหัสกลับด้วย key เดิม\n    decrypted_text = secret_password(base64_decoded, -key)\n    print(f'The decryption result: {decrypted_text}')\nexcept ValueError as e:\n    print(e)\n\n#คำสั่ง import base64 ในภาษา Python คือการนำเข้า (import) โมดูล base64 ที่ใช้สำหรับการเข้ารหัสและถอดรหัสข้อมูลในรูปแบบ Base64 ซึ่งเป็นเทคนิคที่ใช้ในการแปลงข้อมูลจากรูปแบบไบต์ (binary) ให้เป็นข้อความในรูปแบบที่สามารถแสดงผลได้เป็นข้อความ ASCII ตัวอักษร\n#Base64 มักจะใช้ในการถ่ายโอนข้อมูลที่เป็นไบต์ เช่น ภาพหรือไฟล์ในรูปแบบที่ไม่สามารถแสดงผลได้โดยตรงในข้อความ (เช่น ไฟล์อีเมลหรือ HTTP requests) เพื่อให้สามารถส่งข้อมูลผ่านทางช่องทางที่รองรับเฉพาะข้อความ ASCII ได้\n"
    },
    {
        "filename": "คำนวณว่าตัวอักษรแต่ละตัวมีจำนวนเท่าไร.py",
        "description": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการคำนวณตัวอักษรที่ซ้ำซ้อน และตัวอักษรที่ไม่ซ้ำซ้อนระหว่างข้อความ 2 ข้อความที่ผู้ใช้ป้อนเข้ามา",
        "content_snippet": "# โปรแกรมนี้เป็นโปรแกรมที่ใช้ในการคำนวณตัวอักษรที่ซ้ำซ้อน และตัวอักษรที่ไม่ซ้ำซ้อนระหว่างข้อความ 2 ข้อความที่ผู้ใช้ป้อนเข้ามา\n# โค้ดนี้ใช้ Counter จากโมดูล collections เพื่อทำการนับจำนวนของตัวอักษรแต่ละตัวในข้อความของผู้ใช้ (จะคำนวณว่าตัวอักษรแต่ละตัวมีจำนวนเท่าไร) \n# และแสดงผลนับตัวอักษรที่ซ้ำซ้อน\n# รับข้อมูลจากผู้ใช้\nuser_a = input('Enter string A: ')\nuser_b = input('Enter string B: ')\n\n# แปลง String เป็นเซ็ต\nset_a = set(user_a)\nset_b = set(user_b)\n\n# คำนวณผลลัพธ์\noutput = {\n    \"Unique characters in A\": len(set_a),\n    \"Unique characters in B\": len(set_b),\n    \"Characters in both\": set_a & set_b,\n    \"Characters in A not in B\": set_a - set_b,\n    \"Characters in B not in A\": set_b - set_a,\n    \"Symmetric difference\": set_a ^ set_b,\n    \"Union\": set_a | set_b\n}\n\n# แสดงผลและบันทึกลงไฟล์\nprint('--------------------------------------------------')\nwith open(\"result.txt\", \"w\", encoding=\"utf-8\") as file:\n    for key, value in output.items():\n        file.write(f'{key}: {value}\\n')\n        print(f'{key}: {value}')\nprint(\"Results saved to result.txt\")\n"
    },
    {
        "filename": "จับเวลา(Stopwatch).py",
        "description": "#โปรแกรมจับเวลาพื้นฐานที่สามารถเริ่มและหยุดได้",
        "content_snippet": "#โปรแกรมจับเวลาพื้นฐานที่สามารถเริ่มและหยุดได้\nimport time\n\ndef stopwatch():\n    input(\"กด Enter เพื่อเริ่มจับเวลา\")\n    start_time = time.time()\n    input(\"กด Enter เพื่อหยุดจับเวลา\")\n    end_time = time.time()\n    elapsed_time = end_time - start_time\n    print(f\"เวลาที่ผ่านไป: {elapsed_time:.2f} วินาที\")\n\n# ตัวอย่างการใช้งาน\nstopwatch()\n"
    },
    {
        "filename": "(XV)รองรับตัวเลขและสัญลักษณ์.py",
        "description": "# โปรแกรมเข้ารหัสข้อความด้วยวิธี Caesar Cipher",
        "content_snippet": "# โปรแกรมเข้ารหัสข้อความด้วยวิธี Caesar Cipher\ndef secret_password(text, key): # ฟังก์ชันเข้ารหัสข้อความ\n    result = \"\"\n    for char in text: # วนลูปทุกตัวอักษรในข้อความ\n        if char.isalpha(): # ตรวจสอบว่าเป็นตัวอักษรหรือไม่\n            shift_base = ord('A') if char.isupper() else ord('a') # กำหนดตัวอักษรฐาน\n            shifted_char = chr((ord(char) - shift_base + key) % 26 + shift_base) # คำนวณตัวอักษรที่ถูกเข้ารหัส\n            result += shifted_char # เก็บตัวอักษรที่ถูกเข้ารหัส\n        elif char.isdigit(): # ตรวจสอบว่าเป็นตัวเลขหรือไม่\n            shifted_digit = (int(char) + key) % 10 # คำนวณตัวเลขที่ถูกเข้ารหัส\n            result += str(shifted_digit) # เก็บตัวเลขที่ถูกเข้ารหัส\n        elif char in \"!@#$%^&*()-_=+[]{};:,.<>?/\": # ตรวจสอบว่าเป็นสัญลักษณ์หรือไม่\n            shifted_special = chr((ord(char) + key) % 256)  # คำนวณสัญลักษณ์ที่ถูกเข้ารหัส\n            result += shifted_special # เก็บสัญลักษณ์ที่ถูกเข้ารหัส\n        elif char.isspace(): # ตรวจสอบว่าเป็นช่องว่างหรือไม่\n            result += char # เก็บช่องว่างไว้\n        else:\n            raise ValueError(\"Error!!!! Input contains unsupported characters.\")\n    return result\n\ntry:\n    plaintext = input(\"Enter plaintext (Alphabets, Digits, Special Characters): \")\n    key = int(input(\"Enter secret key (Number Only): \"))\n\n    ciphertext = secret_password(plaintext, key) # เรียกใช้ฟังก์ชันเข้ารหัสข้อความ\n    print(\"The encrypted ciphertext:\", ciphertext) # แสดงข้อความที่ถูกเข้ารหัส\n\n    decrypted_text = secret_password(ciphertext, -key) # เรียกใช้ฟังก์ชันถอดรหัสข้อความ\n    print(f'The decryption result: {decrypted_text}') # แสดงข้อความที่ถูกถอดรหัส\nexcept ValueError as e:\n    print(e)\n"
    },
    {
        "filename": "หน้าไปหลังแล้วหลังมาหน้า.py",
        "description": "# โปรแกรมรับค่าจำนวนเต็ม n และรับค่าจำนวนเต็ม n ตัว แล้วแสดงผลลัพธ์จากหลังมาหน้า",
        "content_snippet": "# โปรแกรมรับค่าจำนวนเต็ม n และรับค่าจำนวนเต็ม n ตัว แล้วแสดงผลลัพธ์จากหลังมาหน้า\nnum = int(input())\nnuma = []\n\nfor i in range(num):\n  numb = int(input())\n  i += 1\n  numa.append(numb)\n\nnuma.reverse()\nfor numa in numa:\n  print(numa)\n  "
    }
]