#‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ n ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏ã‡πâ‡∏≥ (RecursiveProgramming) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Tuple ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ô‡∏µ‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà ùêæ0 ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á ùêæùëõ 

def integer_sequence(n):
    if n == 0:
        return 1
    elif n == 1:
        return 2
    elif n == 2:
        return 3
    else:
        return integer_sequence(n-3) + 2 * integer_sequence(n-2) + 4 * integer_sequence(n-1)

def generate_tuple(n):
    return tuple(integer_sequence(i) for i in range(n + 1))

while True:
    n = int(input("Enter 'n' of Integer Sequence : "))
    print(f'A tuple of Integer Sequence [n={n}] is {generate_tuple(n)}\n')
    
    if n == -1:
        break