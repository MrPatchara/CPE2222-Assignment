# Assignment XII: 
# ฟังก์ชันสำหรับแปลงเลขอารบิกเป็นเลขโรมัน
def int_to_roman(number):
    roman_numerals = {
        1: "I", 4: "IV", 5: "V", 9: "IX", 10: "X", 40: "XL", 50: "L", 
        90: "XC", 100: "C", 400: "CD", 500: "D", 900: "CM", 1000: "M" 
    }
    # สร้างตัวแปรสำหรับเก็บเลขโรมัน
    result = "" # สร้างตัวแปรสำหรับเก็บเลขโรมัน
    for value in sorted(roman_numerals.keys(), reverse=True): # จัดเรียงค่าในพจนานุกรมจากมากไปน้อย
        while number >= value: # วนลูปเพื่อหาค่าที่มากที่สุดที่น้อยกว่าหรือเท่ากับจำนวนที่ต้องการแปลง
            result += roman_numerals[value] # เพิ่มเลขโรมันลงในผลลัพธ์
            number -= value # ลบค่าที่แปลงแล้วออกจากจำนวนที่ต้องการแปลง
    return result

# สร้างพจนานุกรมเลขอารบิก 1-39 เป็นเลขโรมัน
roman_dict = {i: int_to_roman(i) for i in range(1, 40)} # ใช้ฟังก์ชัน int_to_roman ในการแปลงเลขอารบิกเป็นเลขโรมัน

while True:
    # รับค่าอินพุตจากผู้ใช้
    number = int(input("Enter a number for Roman number conversion: "))
    
    # ตรวจสอบว่าจำนวนที่กรอกอยู่ในช่วง 1 ถึง 39 หรือไม่
    if 1 <= number <= 39:
        print(f"The roman number of {number} is {roman_dict[number]}") 
    else:
        break
#อธิบายการทำงานของโค้ด
#การใช้พจนานุกรม: พจนานุกรม (roman_numerals) กำหนดเฉพาะค่าที่สำคัญ เช่น 1 (I), 4 (IV), 5 (V), 10 (X), และอื่นๆ ซึ่งรวมถึงค่าที่มีความหมายพิเศษ (เช่น IV, IX) 

#การวนลูป: เมื่อฟังก์ชัน int_to_roman ถูกเรียกใช้สำหรับเลข 3:
#จะเริ่มจากค่าในพจนานุกรมที่สูงที่สุดและจะทำการหักค่าออกจาก number จนกว่า number จะไม่มากกว่าค่านั้น
#โดยเริ่มจาก 1 (I) และเพราะว่า 3 = 1 + 1 + 1 ดังนั้นฟังก์ชันจะเพิ่ม "I" สามครั้งเข้ากับ result

#ตัวอย่างการทำงานของเลข 3:
#เริ่มที่ 3
#3 >= 1: เพิ่ม "I" ให้กับ result (ตอนนี้ result = "I") และลด number เป็น 2
#2 >= 1: เพิ่ม "I" (ตอนนี้ result = "II") และลด number เป็น 1
#1 >= 1: เพิ่ม "I" (ตอนนี้ result = "III") และลด number เป็น 0
#เมื่อ number เท่ากับ 0 จะออกจากลูปและคืนค่า "III"


#ตัวอย่าง 10
#การทำงานของฟังก์ชัน int_to_roman สำหรับเลข 10
#เริ่มต้นที่ค่า number เป็น 10:
#result จะถูกตั้งค่าเป็นสตริงว่าง ("")
#ลูปผ่านค่าในพจนานุกรม roman_numerals ที่เรียงจากมากไปน้อย:
#ค่า 1000 (M): 10 < 1000 (ไม่เข้าลูป)
#ค่า 900 (CM): 10 < 900 (ไม่เข้าลูป)
#ค่า 500 (D): 10 < 500 (ไม่เข้าลูป)
#ค่า 400 (CD): 10 < 400 (ไม่เข้าลูป)
#ค่า 100 (C): 10 < 100 (ไม่เข้าลูป)
#ค่า 90 (XC): 10 < 90 (ไม่เข้าลูป)
#ค่า 50 (L): 10 < 50 (ไม่เข้าลูป)
#ค่า 40 (XL): 10 < 40 (ไม่เข้าลูป)
#ค่า 10 (X):
#10 >= 10: เข้าลูป
#เพิ่ม "X" ลงใน result (ตอนนี้ result = "X")
#ลด number เป็น 0 (10 - 10)
#ค่า 9 (IX): 0 < 9 (ไม่เข้าลูป)
#ค่า 5 (V): 0 < 5 (ไม่เข้าลูป)
#ค่า 4 (IV): 0 < 4 (ไม่เข้าลูป)
#ค่า 1 (I): 0 < 1 (ไม่เข้าลูป)
#ออกจากลูป: เนื่องจาก number เท่ากับ 0
#ส่งค่าผลลัพธ์กลับ: ฟังก์ชันคืนค่า result ซึ่งเป็น "X"